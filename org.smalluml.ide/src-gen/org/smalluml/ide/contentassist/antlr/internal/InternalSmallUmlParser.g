/*
 * generated by Xtext 2.10.0
 */
parser grammar InternalSmallUmlParser;

options {
	tokenVocab=InternalSmallUmlLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package org.smalluml.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.smalluml.services.SmallUmlGrammarAccess;

}
@members {
	private SmallUmlGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("HyphenMinusHyphenMinusHyphenMinusGreaterThanSign", "'--->'");
		tokenNameToValue.put("LessThanSignGreaterThanSignHyphenMinusHyphenMinus", "'<>--'");
		tokenNameToValue.put("Bool", "'Bool'");
		tokenNameToValue.put("Enum", "'Enum'");
		tokenNameToValue.put("Real", "'Real'");
		tokenNameToValue.put("Class", "'Class'");
		tokenNameToValue.put("String", "'String'");
		tokenNameToValue.put("Integer", "'Integer'");
		tokenNameToValue.put("Package", "'Package'");
		tokenNameToValue.put("Extends", "'extends'");
		tokenNameToValue.put("UnlimitedNatural", "'UnlimitedNatural'");
	}

	public void setGrammarAccess(SmallUmlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRulePackage
entryRulePackage
:
{ before(grammarAccess.getPackageRule()); }
	 rulePackage
{ after(grammarAccess.getPackageRule()); } 
	 EOF 
;

// Rule Package
rulePackage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPackageAccess().getGroup()); }
		(rule__Package__Group__0)
		{ after(grammarAccess.getPackageAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNamedElement
entryRuleNamedElement
:
{ before(grammarAccess.getNamedElementRule()); }
	 ruleNamedElement
{ after(grammarAccess.getNamedElementRule()); } 
	 EOF 
;

// Rule NamedElement
ruleNamedElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNamedElementAccess().getAlternatives()); }
		(rule__NamedElement__Alternatives)
		{ after(grammarAccess.getNamedElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClass
entryRuleClass
:
{ before(grammarAccess.getClassRule()); }
	 ruleClass
{ after(grammarAccess.getClassRule()); } 
	 EOF 
;

// Rule Class
ruleClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassAccess().getGroup()); }
		(rule__Class__Group__0)
		{ after(grammarAccess.getClassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribute
entryRuleAttribute
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getGroup()); }
		(rule__Attribute__Group__0)
		{ after(grammarAccess.getAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethod
entryRuleMethod
:
{ before(grammarAccess.getMethodRule()); }
	 ruleMethod
{ after(grammarAccess.getMethodRule()); } 
	 EOF 
;

// Rule Method
ruleMethod 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodAccess().getGroup()); }
		(rule__Method__Group__0)
		{ after(grammarAccess.getMethodAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComposition
entryRuleComposition
:
{ before(grammarAccess.getCompositionRule()); }
	 ruleComposition
{ after(grammarAccess.getCompositionRule()); } 
	 EOF 
;

// Rule Composition
ruleComposition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompositionAccess().getGroup()); }
		(rule__Composition__Group__0)
		{ after(grammarAccess.getCompositionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReference
entryRuleReference
:
{ before(grammarAccess.getReferenceRule()); }
	 ruleReference
{ after(grammarAccess.getReferenceRule()); } 
	 EOF 
;

// Rule Reference
ruleReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReferenceAccess().getGroup()); }
		(rule__Reference__Group__0)
		{ after(grammarAccess.getReferenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRole
entryRuleRole
:
{ before(grammarAccess.getRoleRule()); }
	 ruleRole
{ after(grammarAccess.getRoleRule()); } 
	 EOF 
;

// Rule Role
ruleRole 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRoleAccess().getGroup()); }
		(rule__Role__Group__0)
		{ after(grammarAccess.getRoleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleString0
entryRuleString0
:
{ before(grammarAccess.getString0Rule()); }
	 ruleString0
{ after(grammarAccess.getString0Rule()); } 
	 EOF 
;

// Rule String0
ruleString0 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getString0Access().getGroup()); }
		(rule__String0__Group__0)
		{ after(grammarAccess.getString0Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInteger
entryRuleInteger
:
{ before(grammarAccess.getIntegerRule()); }
	 ruleInteger
{ after(grammarAccess.getIntegerRule()); } 
	 EOF 
;

// Rule Integer
ruleInteger 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntegerAccess().getGroup()); }
		(rule__Integer__Group__0)
		{ after(grammarAccess.getIntegerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBool
entryRuleBool
:
{ before(grammarAccess.getBoolRule()); }
	 ruleBool
{ after(grammarAccess.getBoolRule()); } 
	 EOF 
;

// Rule Bool
ruleBool 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoolAccess().getGroup()); }
		(rule__Bool__Group__0)
		{ after(grammarAccess.getBoolAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReal
entryRuleReal
:
{ before(grammarAccess.getRealRule()); }
	 ruleReal
{ after(grammarAccess.getRealRule()); } 
	 EOF 
;

// Rule Real
ruleReal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRealAccess().getGroup()); }
		(rule__Real__Group__0)
		{ after(grammarAccess.getRealAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnlimitedNatural
entryRuleUnlimitedNatural
:
{ before(grammarAccess.getUnlimitedNaturalRule()); }
	 ruleUnlimitedNatural
{ after(grammarAccess.getUnlimitedNaturalRule()); } 
	 EOF 
;

// Rule UnlimitedNatural
ruleUnlimitedNatural 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnlimitedNaturalAccess().getGroup()); }
		(rule__UnlimitedNatural__Group__0)
		{ after(grammarAccess.getUnlimitedNaturalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumeration
entryRuleEnumeration
:
{ before(grammarAccess.getEnumerationRule()); }
	 ruleEnumeration
{ after(grammarAccess.getEnumerationRule()); } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumerationAccess().getGroup()); }
		(rule__Enumeration__Group__0)
		{ after(grammarAccess.getEnumerationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNamedElementAccess().getClassParserRuleCall_0()); }
		ruleClass
		{ after(grammarAccess.getNamedElementAccess().getClassParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNamedElementAccess().getAttributeParserRuleCall_1()); }
		ruleAttribute
		{ after(grammarAccess.getNamedElementAccess().getAttributeParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getNamedElementAccess().getMethodParserRuleCall_2()); }
		ruleMethod
		{ after(grammarAccess.getNamedElementAccess().getMethodParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getNamedElementAccess().getParameterParserRuleCall_3()); }
		ruleParameter
		{ after(grammarAccess.getNamedElementAccess().getParameterParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getNamedElementAccess().getRoleParserRuleCall_4()); }
		ruleRole
		{ after(grammarAccess.getNamedElementAccess().getRoleParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getNamedElementAccess().getCompositionParserRuleCall_5()); }
		ruleComposition
		{ after(grammarAccess.getNamedElementAccess().getCompositionParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getNamedElementAccess().getReferenceParserRuleCall_6()); }
		ruleReference
		{ after(grammarAccess.getNamedElementAccess().getReferenceParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getNamedElementAccess().getPackageParserRuleCall_7()); }
		rulePackage
		{ after(grammarAccess.getNamedElementAccess().getPackageParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getNamedElementAccess().getEnumerationParserRuleCall_8()); }
		ruleEnumeration
		{ after(grammarAccess.getNamedElementAccess().getEnumerationParserRuleCall_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getString0ParserRuleCall_0()); }
		ruleString0
		{ after(grammarAccess.getTypeAccess().getString0ParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getIntegerParserRuleCall_1()); }
		ruleInteger
		{ after(grammarAccess.getTypeAccess().getIntegerParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getBoolParserRuleCall_2()); }
		ruleBool
		{ after(grammarAccess.getTypeAccess().getBoolParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getRealParserRuleCall_3()); }
		ruleReal
		{ after(grammarAccess.getTypeAccess().getRealParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getUnlimitedNaturalParserRuleCall_4()); }
		ruleUnlimitedNatural
		{ after(grammarAccess.getTypeAccess().getUnlimitedNaturalParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getEnumerationParserRuleCall_5()); }
		ruleEnumeration
		{ after(grammarAccess.getTypeAccess().getEnumerationParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Alternatives_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getMethodAssignment_4_1_0()); }
		(rule__Class__MethodAssignment_4_1_0)
		{ after(grammarAccess.getClassAccess().getMethodAssignment_4_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getClassAccess().getAttributeAssignment_4_1_1()); }
		(rule__Class__AttributeAssignment_4_1_1)
		{ after(grammarAccess.getClassAccess().getAttributeAssignment_4_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Package__Group__0__Impl
	rule__Package__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageAccess().getPackageAction_0()); }
	()
	{ after(grammarAccess.getPackageAccess().getPackageAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Package__Group__1__Impl
	rule__Package__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageAccess().getPackageKeyword_1()); }
	Package
	{ after(grammarAccess.getPackageAccess().getPackageKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Package__Group__2__Impl
	rule__Package__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageAccess().getNameAssignment_2()); }
	(rule__Package__NameAssignment_2)
	{ after(grammarAccess.getPackageAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Package__Group__3__Impl
	rule__Package__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageAccess().getBEGINTerminalRuleCall_3()); }
	RULE_BEGIN
	{ after(grammarAccess.getPackageAccess().getBEGINTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Package__Group__4__Impl
	rule__Package__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageAccess().getMemberAssignment_4()); }
	(rule__Package__MemberAssignment_4)*
	{ after(grammarAccess.getPackageAccess().getMemberAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Package__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageAccess().getENDTerminalRuleCall_5()); }
	RULE_END
	{ after(grammarAccess.getPackageAccess().getENDTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__0__Impl
	rule__Class__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getClassAction_0()); }
	()
	{ after(grammarAccess.getClassAccess().getClassAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__1__Impl
	rule__Class__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getClassKeyword_1()); }
	Class
	{ after(grammarAccess.getClassAccess().getClassKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__2__Impl
	rule__Class__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getNameAssignment_2()); }
	(rule__Class__NameAssignment_2)
	{ after(grammarAccess.getClassAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__3__Impl
	rule__Class__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getGroup_3()); }
	(rule__Class__Group_3__0)?
	{ after(grammarAccess.getClassAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getGroup_4()); }
	(rule__Class__Group_4__0)?
	{ after(grammarAccess.getClassAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group_3__0__Impl
	rule__Class__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getExtendsKeyword_3_0()); }
	Extends
	{ after(grammarAccess.getClassAccess().getExtendsKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getSuperAssignment_3_1()); }
	(rule__Class__SuperAssignment_3_1)
	{ after(grammarAccess.getClassAccess().getSuperAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group_4__0__Impl
	rule__Class__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getBEGINTerminalRuleCall_4_0()); }
	RULE_BEGIN
	{ after(grammarAccess.getClassAccess().getBEGINTerminalRuleCall_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group_4__1__Impl
	rule__Class__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getAlternatives_4_1()); }
	(rule__Class__Alternatives_4_1)*
	{ after(grammarAccess.getClassAccess().getAlternatives_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getENDTerminalRuleCall_4_2()); }
	RULE_END
	{ after(grammarAccess.getClassAccess().getENDTerminalRuleCall_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getPlusSignKeyword_0()); }
	PlusSign
	{ after(grammarAccess.getAttributeAccess().getPlusSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getNameAssignment_1()); }
	(rule__Attribute__NameAssignment_1)
	{ after(grammarAccess.getAttributeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__2__Impl
	rule__Attribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getColonKeyword_2()); }
	Colon
	{ after(grammarAccess.getAttributeAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getTypeAssignment_3()); }
	(rule__Attribute__TypeAssignment_3)
	{ after(grammarAccess.getAttributeAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__0__Impl
	rule__Method__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getMethodAction_0()); }
	()
	{ after(grammarAccess.getMethodAccess().getMethodAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__1__Impl
	rule__Method__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getPlusSignKeyword_1()); }
	PlusSign
	{ after(grammarAccess.getMethodAccess().getPlusSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__2__Impl
	rule__Method__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getNameAssignment_2()); }
	(rule__Method__NameAssignment_2)
	{ after(grammarAccess.getMethodAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__3__Impl
	rule__Method__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getLeftParenthesisKeyword_3()); }
	LeftParenthesis
	{ after(grammarAccess.getMethodAccess().getLeftParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__4__Impl
	rule__Method__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getGroup_4()); }
	(rule__Method__Group_4__0)?
	{ after(grammarAccess.getMethodAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__5__Impl
	rule__Method__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getRightParenthesisKeyword_5()); }
	RightParenthesis
	{ after(grammarAccess.getMethodAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getGroup_6()); }
	(rule__Method__Group_6__0)?
	{ after(grammarAccess.getMethodAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_4__0__Impl
	rule__Method__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getParameterAssignment_4_0()); }
	(rule__Method__ParameterAssignment_4_0)
	{ after(grammarAccess.getMethodAccess().getParameterAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getGroup_4_1()); }
	(rule__Method__Group_4_1__0)*
	{ after(grammarAccess.getMethodAccess().getGroup_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_4_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_4_1__0__Impl
	rule__Method__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_4_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getCommaKeyword_4_1_0()); }
	Comma
	{ after(grammarAccess.getMethodAccess().getCommaKeyword_4_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_4_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_4_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getParameterAssignment_4_1_1()); }
	(rule__Method__ParameterAssignment_4_1_1)
	{ after(grammarAccess.getMethodAccess().getParameterAssignment_4_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_6__0__Impl
	rule__Method__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getColonKeyword_6_0()); }
	Colon
	{ after(grammarAccess.getMethodAccess().getColonKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Method__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodAccess().getReturnTypeAssignment_6_1()); }
	(rule__Method__ReturnTypeAssignment_6_1)
	{ after(grammarAccess.getMethodAccess().getReturnTypeAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getNameAssignment_0()); }
	(rule__Parameter__NameAssignment_0)
	{ after(grammarAccess.getParameterAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getColonKeyword_1()); }
	Colon
	{ after(grammarAccess.getParameterAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getTypeAssignment_2()); }
	(rule__Parameter__TypeAssignment_2)
	{ after(grammarAccess.getParameterAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Composition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group__0__Impl
	rule__Composition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getGroup_0()); }
	(rule__Composition__Group_0__0)?
	{ after(grammarAccess.getCompositionAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group__1__Impl
	rule__Composition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getSourceAssignment_1()); }
	(rule__Composition__SourceAssignment_1)
	{ after(grammarAccess.getCompositionAccess().getSourceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group__2__Impl
	rule__Composition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getLessThanSignGreaterThanSignHyphenMinusHyphenMinusKeyword_2()); }
	LessThanSignGreaterThanSignHyphenMinusHyphenMinus
	{ after(grammarAccess.getCompositionAccess().getLessThanSignGreaterThanSignHyphenMinusHyphenMinusKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getTargetAssignment_3()); }
	(rule__Composition__TargetAssignment_3)
	{ after(grammarAccess.getCompositionAccess().getTargetAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Composition__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group_0__0__Impl
	rule__Composition__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getNameAssignment_0_0()); }
	(rule__Composition__NameAssignment_0_0)
	{ after(grammarAccess.getCompositionAccess().getNameAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Composition__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositionAccess().getColonKeyword_0_1()); }
	Colon
	{ after(grammarAccess.getCompositionAccess().getColonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Reference__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__0__Impl
	rule__Reference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getGroup_0()); }
	(rule__Reference__Group_0__0)?
	{ after(grammarAccess.getReferenceAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__1__Impl
	rule__Reference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getSourceAssignment_1()); }
	(rule__Reference__SourceAssignment_1)
	{ after(grammarAccess.getReferenceAccess().getSourceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__2__Impl
	rule__Reference__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getHyphenMinusHyphenMinusHyphenMinusGreaterThanSignKeyword_2()); }
	HyphenMinusHyphenMinusHyphenMinusGreaterThanSign
	{ after(grammarAccess.getReferenceAccess().getHyphenMinusHyphenMinusHyphenMinusGreaterThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getTargetAssignment_3()); }
	(rule__Reference__TargetAssignment_3)
	{ after(grammarAccess.getReferenceAccess().getTargetAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Reference__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group_0__0__Impl
	rule__Reference__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getNameAssignment_0_0()); }
	(rule__Reference__NameAssignment_0_0)
	{ after(grammarAccess.getReferenceAccess().getNameAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getColonKeyword_0_1()); }
	Colon
	{ after(grammarAccess.getReferenceAccess().getColonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Role__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Role__Group__0__Impl
	rule__Role__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoleAccess().getNameAssignment_0()); }
	(rule__Role__NameAssignment_0)?
	{ after(grammarAccess.getRoleAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Role__Group__1__Impl
	rule__Role__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoleAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getRoleAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Role__Group__2__Impl
	rule__Role__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoleAccess().getClassAssignment_2()); }
	(rule__Role__ClassAssignment_2)
	{ after(grammarAccess.getRoleAccess().getClassAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Role__Group__3__Impl
	rule__Role__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoleAccess().getGroup_3()); }
	(rule__Role__Group_3__0)?
	{ after(grammarAccess.getRoleAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Role__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoleAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getRoleAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Role__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Role__Group_3__0__Impl
	rule__Role__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoleAccess().getCommaKeyword_3_0()); }
	Comma
	{ after(grammarAccess.getRoleAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Role__Group_3__1__Impl
	rule__Role__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoleAccess().getLeftSquareBracketKeyword_3_1()); }
	LeftSquareBracket
	{ after(grammarAccess.getRoleAccess().getLeftSquareBracketKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Role__Group_3__2__Impl
	rule__Role__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoleAccess().getLowerBoundAssignment_3_2()); }
	(rule__Role__LowerBoundAssignment_3_2)
	{ after(grammarAccess.getRoleAccess().getLowerBoundAssignment_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Role__Group_3__3__Impl
	rule__Role__Group_3__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoleAccess().getCommaKeyword_3_3()); }
	Comma
	{ after(grammarAccess.getRoleAccess().getCommaKeyword_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group_3__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Role__Group_3__4__Impl
	rule__Role__Group_3__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group_3__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoleAccess().getUpperBoundAssignment_3_4()); }
	(rule__Role__UpperBoundAssignment_3_4)
	{ after(grammarAccess.getRoleAccess().getUpperBoundAssignment_3_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group_3__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Role__Group_3__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__Group_3__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoleAccess().getRightSquareBracketKeyword_3_5()); }
	RightSquareBracket
	{ after(grammarAccess.getRoleAccess().getRightSquareBracketKeyword_3_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__String0__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__String0__Group__0__Impl
	rule__String0__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__String0__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getString0Access().getStringAction_0()); }
	()
	{ after(grammarAccess.getString0Access().getStringAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__String0__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__String0__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__String0__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getString0Access().getStringKeyword_1()); }
	String
	{ after(grammarAccess.getString0Access().getStringKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Integer__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Integer__Group__0__Impl
	rule__Integer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerAccess().getIntegerAction_0()); }
	()
	{ after(grammarAccess.getIntegerAccess().getIntegerAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Integer__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerAccess().getIntegerKeyword_1()); }
	Integer
	{ after(grammarAccess.getIntegerAccess().getIntegerKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bool__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group__0__Impl
	rule__Bool__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getBoolAction_0()); }
	()
	{ after(grammarAccess.getBoolAccess().getBoolAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bool__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoolAccess().getBoolKeyword_1()); }
	Bool
	{ after(grammarAccess.getBoolAccess().getBoolKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Real__Group__0__Impl
	rule__Real__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealAccess().getRealAction_0()); }
	()
	{ after(grammarAccess.getRealAccess().getRealAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Real__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealAccess().getRealKeyword_1()); }
	Real
	{ after(grammarAccess.getRealAccess().getRealKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnlimitedNatural__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnlimitedNatural__Group__0__Impl
	rule__UnlimitedNatural__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnlimitedNatural__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnlimitedNaturalAccess().getUnlimitedNaturalAction_0()); }
	()
	{ after(grammarAccess.getUnlimitedNaturalAccess().getUnlimitedNaturalAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnlimitedNatural__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnlimitedNatural__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnlimitedNatural__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnlimitedNaturalAccess().getUnlimitedNaturalKeyword_1()); }
	UnlimitedNatural
	{ after(grammarAccess.getUnlimitedNaturalAccess().getUnlimitedNaturalKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__0__Impl
	rule__Enumeration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getEnumerationAction_0()); }
	()
	{ after(grammarAccess.getEnumerationAccess().getEnumerationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__1__Impl
	rule__Enumeration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getEnumKeyword_1()); }
	Enum
	{ after(grammarAccess.getEnumerationAccess().getEnumKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__2__Impl
	rule__Enumeration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getNameAssignment_2()); }
	(rule__Enumeration__NameAssignment_2)
	{ after(grammarAccess.getEnumerationAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__3__Impl
	rule__Enumeration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getLeftSquareBracketKeyword_3()); }
	LeftSquareBracket
	{ after(grammarAccess.getEnumerationAccess().getLeftSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__4__Impl
	rule__Enumeration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getValuesAssignment_4()); }
	(rule__Enumeration__ValuesAssignment_4)
	{ after(grammarAccess.getEnumerationAccess().getValuesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__5__Impl
	rule__Enumeration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getGroup_5()); }
	(rule__Enumeration__Group_5__0)*
	{ after(grammarAccess.getEnumerationAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getRightSquareBracketKeyword_6()); }
	RightSquareBracket
	{ after(grammarAccess.getEnumerationAccess().getRightSquareBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group_5__0__Impl
	rule__Enumeration__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getCommaKeyword_5_0()); }
	Comma
	{ after(grammarAccess.getEnumerationAccess().getCommaKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getValuesAssignment_5_1()); }
	(rule__Enumeration__ValuesAssignment_5_1)
	{ after(grammarAccess.getEnumerationAccess().getValuesAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	(HyphenMinus)?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Package__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getPackageAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__MemberAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageAccess().getMemberNamedElementParserRuleCall_4_0()); }
		ruleNamedElement
		{ after(grammarAccess.getPackageAccess().getMemberNamedElementParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getClassAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__SuperAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getSuperClassCrossReference_3_1_0()); }
		(
			{ before(grammarAccess.getClassAccess().getSuperClassEStringParserRuleCall_3_1_0_1()); }
			ruleEString
			{ after(grammarAccess.getClassAccess().getSuperClassEStringParserRuleCall_3_1_0_1()); }
		)
		{ after(grammarAccess.getClassAccess().getSuperClassCrossReference_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__MethodAssignment_4_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getMethodMethodParserRuleCall_4_1_0_0()); }
		ruleMethod
		{ after(grammarAccess.getClassAccess().getMethodMethodParserRuleCall_4_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__AttributeAssignment_4_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getAttributeAttributeParserRuleCall_4_1_1_0()); }
		ruleAttribute
		{ after(grammarAccess.getClassAccess().getAttributeAttributeParserRuleCall_4_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getAttributeAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getTypeTypeParserRuleCall_3_0()); }
		ruleType
		{ after(grammarAccess.getAttributeAccess().getTypeTypeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getMethodAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ParameterAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getParameterParameterParserRuleCall_4_0_0()); }
		ruleParameter
		{ after(grammarAccess.getMethodAccess().getParameterParameterParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ParameterAssignment_4_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getParameterParameterParserRuleCall_4_1_1_0()); }
		ruleParameter
		{ after(grammarAccess.getMethodAccess().getParameterParameterParserRuleCall_4_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ReturnTypeAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodAccess().getReturnTypeTypeParserRuleCall_6_1_0()); }
		ruleType
		{ after(grammarAccess.getMethodAccess().getReturnTypeTypeParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_0_0()); }
		ruleEString
		{ after(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_2_0()); }
		ruleType
		{ after(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__NameAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionAccess().getNameEStringParserRuleCall_0_0_0()); }
		ruleEString
		{ after(grammarAccess.getCompositionAccess().getNameEStringParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__SourceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionAccess().getSourceRoleParserRuleCall_1_0()); }
		ruleRole
		{ after(grammarAccess.getCompositionAccess().getSourceRoleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Composition__TargetAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositionAccess().getTargetRoleParserRuleCall_3_0()); }
		ruleRole
		{ after(grammarAccess.getCompositionAccess().getTargetRoleParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__NameAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceAccess().getNameEStringParserRuleCall_0_0_0()); }
		ruleEString
		{ after(grammarAccess.getReferenceAccess().getNameEStringParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__SourceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceAccess().getSourceRoleParserRuleCall_1_0()); }
		ruleRole
		{ after(grammarAccess.getReferenceAccess().getSourceRoleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__TargetAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceAccess().getTargetRoleParserRuleCall_3_0()); }
		ruleRole
		{ after(grammarAccess.getReferenceAccess().getTargetRoleParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoleAccess().getNameEStringParserRuleCall_0_0()); }
		ruleEString
		{ after(grammarAccess.getRoleAccess().getNameEStringParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__ClassAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoleAccess().getClassClassCrossReference_2_0()); }
		(
			{ before(grammarAccess.getRoleAccess().getClassClassEStringParserRuleCall_2_0_1()); }
			ruleEString
			{ after(grammarAccess.getRoleAccess().getClassClassEStringParserRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getRoleAccess().getClassClassCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__LowerBoundAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoleAccess().getLowerBoundEIntParserRuleCall_3_2_0()); }
		ruleEInt
		{ after(grammarAccess.getRoleAccess().getLowerBoundEIntParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Role__UpperBoundAssignment_3_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoleAccess().getUpperBoundEIntParserRuleCall_3_4_0()); }
		ruleEInt
		{ after(grammarAccess.getRoleAccess().getUpperBoundEIntParserRuleCall_3_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getEnumerationAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__ValuesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationAccess().getValuesEStringParserRuleCall_4_0()); }
		ruleEString
		{ after(grammarAccess.getEnumerationAccess().getValuesEStringParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__ValuesAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationAccess().getValuesEStringParserRuleCall_5_1_0()); }
		ruleEString
		{ after(grammarAccess.getEnumerationAccess().getValuesEStringParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
