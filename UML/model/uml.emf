@"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="UML")
@namespace(uri="http://www.omg.org/spec/UML/20131001", prefix="uml")
package uml;

import "platform:/resource/UML/model/types.ecore";

@"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="Activities")
@Ecore(validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL", invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL")
@namespace(uri="http:///uml/activities.ecore", prefix="uml.activities")
package activities {
  @GenModel(documentation="An Activity is the specification of parameterized Behavior as the coordinated sequencing of subordinate units.
ownedParameter->forAll(p | 
   p.direction <> ParameterDirectionKind::inout implies node->select(
       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p)->size()= 1)
ownedParameter->forAll(p | 
p.direction = ParameterDirectionKind::inout implies
let associatedNodes : Set(ActivityNode) = node->select(
       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p) in 
  associatedNodes->size()=2 and
  associatedNodes->select(incoming->notEmpty())->size()<=1 and
  associatedNodes->select(outgoing->notEmpty())->size()<=1
)
")
  @Ecore(constraints="maximum_one_parameter_node maximum_two_parameter_nodes")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(maximum_one_parameter_node="ownedParameter->forAll(p | 
   p.direction <> ParameterDirectionKind::inout implies node->select(
       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p)->size()= 1)", maximum_two_parameter_nodes="ownedParameter->forAll(p | 
p.direction = ParameterDirectionKind::inout implies
let associatedNodes : Set(ActivityNode) = node->select(
       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p) in 
  associatedNodes->size()=2 and
  associatedNodes->select(incoming->notEmpty())->size()<=1 and
  associatedNodes->select(outgoing->notEmpty())->size()<=1
)
")
  class Activity extends commonBehavior.Behavior {

    @GenModel(documentation="ActivityEdges expressing flow between the nodes of the Activity.")
    @subsets
    !ordered val ActivityEdge[*]#activity edge;

    @GenModel(documentation="ActivityNodes coordinated by the Activity.")
    @subsets
    !ordered val ActivityNode[*]#activity node;

    @GenModel(documentation="Top-level Variables defined by the Activity.")
    @subsets
    !ordered val Variable[*]#activityScope variable;

    @GenModel(documentation="Top-level StructuredActivityNodes in the Activity.")
    @subsets
    !ordered volatile ref actions.StructuredActivityNode[*] structuredNode;

    @GenModel(documentation="Top-level ActivityGroups in the Activity.")
    @subsets
    !ordered val ActivityGroup[*]#inActivity group;

    @GenModel(documentation="If true, this Activity must not make any changes to objects. The default is false (an Activity may make nonlocal changes). (This is an assertion, not an executable property. It may be used by an execution engine to optimize model execution. If the assertion is violated by the Activity, then the model is ill-formed.) ")
    !ordered attr types.Boolean[1] isReadOnly = "false";

    @GenModel(documentation="If true, all invocations of the Activity are handled by the same execution.")
    !ordered attr types.Boolean[1] isSingleExecution = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="activity")
    @GenModel(documentation="Top-level ActivityPartitions in the Activity.")
    @subsets
    !ordered ref ActivityPartition[*] partition;
  }

  @GenModel(documentation="An ActivityEdge is an abstract class for directed connections between two ActivityNodes.
activity<>null implies source.containingActivity() = activity and target.containingActivity() = activity")
  @Ecore(constraints="source_and_target")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(source_and_target="activity<>null implies source.containingActivity() = activity and target.containingActivity() = activity")
  @duplicates
  abstract class ActivityEdge extends classification.RedefinableElement {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="activityEdge")
    @GenModel(documentation="A ValueSpecification that is evaluated to determine if a token can traverse the ActivityEdge. If an ActivityEdge has no guard, then there is no restriction on tokens traversing the edge.")
    @subsets
    !ordered val values.ValueSpecification guard;

    @GenModel(documentation="ActivityGroups containing the ActivityEdge.")
    @union
    !ordered readonly volatile transient derived ref ActivityGroup[*]#containedEdge inGroup;

    @GenModel(documentation="The InterruptibleActivityRegion for which this ActivityEdge is an interruptingEdge.")
    !ordered ref InterruptibleActivityRegion#interruptingEdge interrupts;

    @GenModel(documentation="ActivityPartitions containing the ActivityEdge.")
    @subsets
    !ordered ref ActivityPartition[*]#edge inPartition;

    @GenModel(documentation="The StructuredActivityNode containing the ActivityEdge, if it is owned by a StructuredActivityNode.")
    @subsets
    !ordered ref actions.StructuredActivityNode#edge inStructuredNode;

    @GenModel(documentation="The ActivityNode to which tokens are put when they traverse the ActivityEdge.")
    !ordered ref ActivityNode[1]#incoming target;

    @GenModel(documentation="The ActivityNode from which tokens are taken when they traverse the ActivityEdge.")
    !ordered ref ActivityNode[1]#outgoing source;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="activityEdge")
    @GenModel(documentation="ActivityEdges from a generalization of the Activity containing this ActivityEdge that are redefined by this ActivityEdge.")
    @subsets
    !ordered ref ActivityEdge[*] redefinedEdge;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="activityEdge")
    @GenModel(documentation="The minimum number of tokens that must traverse the ActivityEdge at the same time. If no weight is specified, this is equivalent to specifying a constant value of 1.")
    @subsets
    !ordered val values.ValueSpecification weight;

    @GenModel(documentation="The Activity containing the ActivityEdge, if it is directly owned by an Activity.")
    @subsets
    !ordered ref Activity#edge activity;
  }

  @GenModel(documentation="ActivityGroup is an abstract class for defining sets of ActivityNodes and ActivityEdges in an Activity.
containedNode->forAll(activity = self.containingActivity()) and 
containedEdge->forAll(activity = self.containingActivity())
subgroup->closure(subgroup).containedNode->excludesAll(containedNode) and
superGroup->closure(superGroup).containedNode->excludesAll(containedNode) and 
subgroup->closure(subgroup).containedEdge->excludesAll(containedEdge) and 
superGroup->closure(superGroup).containedEdge->excludesAll(containedEdge)")
  @Ecore(constraints="nodes_and_edges not_contained")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(nodes_and_edges="containedNode->forAll(activity = self.containingActivity()) and 
containedEdge->forAll(activity = self.containingActivity())", not_contained="subgroup->closure(subgroup).containedNode->excludesAll(containedNode) and
superGroup->closure(superGroup).containedNode->excludesAll(containedNode) and 
subgroup->closure(subgroup).containedEdge->excludesAll(containedEdge) and 
superGroup->closure(superGroup).containedEdge->excludesAll(containedEdge)")
  abstract class ActivityGroup extends commonStructure.NamedElement {

    @GenModel(documentation="The Activity that directly or indirectly contains this ActivityGroup.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if superGroup<>null then superGroup.containingActivity()
else inActivity
endif")
    !ordered op Activity containingActivity();

    @GenModel(documentation="ActivityNodes immediately contained in the ActivityGroup.")
    @union
    !ordered readonly volatile transient derived ref ActivityNode[*]#inGroup containedNode;

    @GenModel(documentation="The Activity containing the ActivityGroup, if it is directly owned by an Activity.")
    @subsets
    !ordered ref Activity#group inActivity;

    @GenModel(documentation="Other ActivityGroups immediately contained in this ActivityGroup.")
    @union
    @subsets
    !ordered readonly volatile transient derived ref ActivityGroup[*]#superGroup subgroup;

    @GenModel(documentation="The ActivityGroup immediately containing this ActivityGroup, if it is directly owned by another ActivityGroup.")
    @union
    @subsets
    !ordered readonly volatile transient derived ref ActivityGroup#subgroup superGroup;

    @GenModel(documentation="ActivityEdges immediately contained in the ActivityGroup.")
    @union
    !ordered readonly volatile transient derived ref ActivityEdge[*]#inGroup containedEdge;
  }

  @GenModel(documentation="ActivityNode is an abstract class for points in the flow of an Activity connected by ActivityEdges.")
  @duplicates
  abstract class ActivityNode extends classification.RedefinableElement {

    @GenModel(documentation="The Activity that directly or indirectly contains this ActivityNode.")
    @redefines
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if inStructuredNode<>null then inStructuredNode.containingActivity()
else activity
endif")
    !ordered op Activity ActivityNode_containingActivity();

    @GenModel(documentation="The Activity containing the ActivityNode, if it is directly owned by an Activity.")
    @subsets
    !ordered ref Activity#node activity;

    @GenModel(documentation="InterruptibleActivityRegions containing the ActivityNode.")
    @subsets
    !ordered ref InterruptibleActivityRegion[*]#node inInterruptibleRegion;

    @GenModel(documentation="ActivityPartitions containing the ActivityNode.")
    @subsets
    !ordered ref ActivityPartition[*]#node inPartition;

    @GenModel(documentation="The StructuredActivityNode containing the ActvityNode, if it is directly owned by a StructuredActivityNode.")
    @subsets
    !ordered ref actions.StructuredActivityNode#node inStructuredNode;

    @GenModel(documentation="ActivityEdges that have the ActivityNode as their target.")
    !ordered ref ActivityEdge[*]#target incoming;

    @GenModel(documentation="ActivityEdges that have the ActivityNode as their source.")
    !ordered ref ActivityEdge[*]#source outgoing;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="activityNode")
    @GenModel(documentation="ActivityNodes from a generalization of the Activity containining this ActivityNode that are redefined by this ActivityNode.")
    @subsets
    !ordered ref ActivityNode[*] redefinedNode;

    @GenModel(documentation="ActivityGroups containing the ActivityNode.")
    @union
    !ordered readonly volatile transient derived ref ActivityGroup[*]#containedNode inGroup;
  }

  @GenModel(documentation="An InterruptibleActivityRegion is an ActivityGroup that supports the termination of tokens flowing in the portions of an activity within it.
interruptingEdge->forAll(edge | 
  node->includes(edge.source) and node->excludes(edge.target) and edge.target.containingActivity() = inActivity)")
  @Ecore(constraints="interrupting_edges")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(interrupting_edges="interruptingEdge->forAll(edge | 
  node->includes(edge.source) and node->excludes(edge.target) and edge.target.containingActivity() = inActivity)")
  class InterruptibleActivityRegion extends ActivityGroup {

    @GenModel(documentation="The ActivityEdges leaving the InterruptibleActivityRegion on which a traversing token will result in the termination of other tokens flowing in the InterruptibleActivityRegion.")
    !ordered ref ActivityEdge[*]#interrupts interruptingEdge;

    @GenModel(documentation="ActivityNodes immediately contained in the InterruptibleActivityRegion.")
    @subsets
    !ordered ref ActivityNode[*]#inInterruptibleRegion node;
  }

  @GenModel(documentation="An ActivityPartition is a kind of ActivityGroup for identifying ActivityNodes that have some characteristic in common.
(not isExternal and represents.oclIsKindOf(Classifier) and superPartition->notEmpty()) implies
(
   let representedClassifier : Classifier = represents.oclAsType(Classifier) in
     superPartition.represents.oclIsKindOf(Classifier) and
      let representedSuperClassifier : Classifier = superPartition.represents.oclAsType(Classifier) in
       (representedSuperClassifier.oclIsKindOf(BehavioredClassifier) and representedClassifier.oclIsKindOf(Behavior) and 
        representedSuperClassifier.oclAsType(BehavioredClassifier).ownedBehavior->includes(representedClassifier.oclAsType(Behavior))) 
       or
       (representedSuperClassifier.oclIsKindOf(Class) and  representedSuperClassifier.oclAsType(Class).nestedClassifier->includes(representedClassifier))
       or
       (Association.allInstances()->exists(a | a.memberEnd->exists(end1 | end1.isComposite and end1.type = representedClassifier and 
                                                                      a.memberEnd->exists(end2 | end1<>end2 and end2.type = representedSuperClassifier))))
)
(represents.oclIsKindOf(Property) and superPartition->notEmpty()) implies
(
  (superPartition.represents.oclIsKindOf(Classifier) and represents.owner = superPartition.represents) or 
  (superPartition.represents.oclIsKindOf(Property) and represents.owner = superPartition.represents.oclAsType(Property).type)
)
(represents.oclIsKindOf(Property) and superPartition->notEmpty() and superPartition.represents.oclIsKindOf(Classifier)) implies
(
  let representedClassifier : Classifier = superPartition.represents.oclAsType(Classifier)
  in
    superPartition.subpartition->reject(isExternal)->forAll(p | 
       p.represents.oclIsKindOf(Property) and p.owner=representedClassifier)
)
isDimension implies superPartition->isEmpty()")
  @Ecore(constraints="represents_classifier represents_property_and_is_contained represents_property dimension_not_contained")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(represents_classifier="(not isExternal and represents.oclIsKindOf(Classifier) and superPartition->notEmpty()) implies
(
   let representedClassifier : Classifier = represents.oclAsType(Classifier) in
     superPartition.represents.oclIsKindOf(Classifier) and
      let representedSuperClassifier : Classifier = superPartition.represents.oclAsType(Classifier) in
       (representedSuperClassifier.oclIsKindOf(BehavioredClassifier) and representedClassifier.oclIsKindOf(Behavior) and 
        representedSuperClassifier.oclAsType(BehavioredClassifier).ownedBehavior->includes(representedClassifier.oclAsType(Behavior))) 
       or
       (representedSuperClassifier.oclIsKindOf(Class) and  representedSuperClassifier.oclAsType(Class).nestedClassifier->includes(representedClassifier))
       or
       (Association.allInstances()->exists(a | a.memberEnd->exists(end1 | end1.isComposite and end1.type = representedClassifier and 
                                                                      a.memberEnd->exists(end2 | end1<>end2 and end2.type = representedSuperClassifier))))
)", represents_property_and_is_contained="(represents.oclIsKindOf(Property) and superPartition->notEmpty()) implies
(
  (superPartition.represents.oclIsKindOf(Classifier) and represents.owner = superPartition.represents) or 
  (superPartition.represents.oclIsKindOf(Property) and represents.owner = superPartition.represents.oclAsType(Property).type)
)", represents_property="(represents.oclIsKindOf(Property) and superPartition->notEmpty() and superPartition.represents.oclIsKindOf(Classifier)) implies
(
  let representedClassifier : Classifier = superPartition.represents.oclAsType(Classifier)
  in
    superPartition.subpartition->reject(isExternal)->forAll(p | 
       p.represents.oclIsKindOf(Property) and p.owner=representedClassifier)
)", dimension_not_contained="isDimension implies superPartition->isEmpty()")
  class ActivityPartition extends ActivityGroup {

    @GenModel(documentation="ActivityEdges immediately contained in the ActivityPartition.")
    @subsets
    !ordered ref ActivityEdge[*]#inPartition edge;

    @GenModel(documentation="Indicates whether the ActivityPartition groups other ActivityPartitions along a dimension.")
    !ordered attr types.Boolean[1] isDimension = "false";

    @GenModel(documentation="Indicates whether the ActivityPartition represents an entity to which the partitioning structure does not apply.")
    !ordered attr types.Boolean[1] isExternal = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="activityPartition")
    @GenModel(documentation="An Element represented by the functionality modeled within the ActivityPartition.")
    !ordered ref commonStructure.Element represents;

    @GenModel(documentation="Other ActivityPartitions immediately contained in this ActivityPartition (as its subgroups).")
    @subsets
    !ordered val ActivityPartition[*]#superPartition subpartition;

    @GenModel(documentation="Other ActivityPartitions immediately containing this ActivityPartition (as its superGroups).")
    @subsets
    !ordered ref ActivityPartition#subpartition superPartition;

    @GenModel(documentation="ActivityNodes immediately contained in the ActivityPartition.")
    @subsets
    !ordered ref ActivityNode[*]#inPartition node;
  }

  @GenModel(documentation="An ExecutableNode is an abstract class for ActivityNodes whose execution may be controlled using ControlFlows and to which ExceptionHandlers may be attached.")
  abstract class ExecutableNode extends ActivityNode {

    @GenModel(documentation="A set of ExceptionHandlers that are examined if an exception propagates out of the ExceptionNode.")
    @subsets
    !ordered val ExceptionHandler[*]#protectedNode handler;
  }

  @GenModel(documentation="An ExceptionHandler is an Element that specifies a handlerBody ExecutableNode to execute in case the specified exception occurs during the execution of the protected ExecutableNode.
handlerBody.incoming->isEmpty() and handlerBody.outgoing->isEmpty() and exceptionInput.incoming->isEmpty()
(protectedNode.oclIsKindOf(Action) and protectedNode.oclAsType(Action).output->notEmpty()) implies
(
  handlerBody.oclIsKindOf(Action) and 
  let protectedNodeOutput : OrderedSet(OutputPin) = protectedNode.oclAsType(Action).output,
        handlerBodyOutput : OrderedSet(OutputPin) =  handlerBody.oclAsType(Action).output in
    protectedNodeOutput->size() = handlerBodyOutput->size() and
    Sequence{1..protectedNodeOutput->size()}->forAll(i |
    	handlerBodyOutput->at(i).type.conformsTo(protectedNodeOutput->at(i).type) and
    	handlerBodyOutput->at(i).isOrdered=protectedNodeOutput->at(i).isOrdered and
    	handlerBodyOutput->at(i).compatibleWith(protectedNodeOutput->at(i)))
)
handlerBody.oclIsKindOf(Action) and
let inputs: OrderedSet(InputPin) = handlerBody.oclAsType(Action).input in
inputs->size()=1 and inputs->first()=exceptionInput
let nodes:Set(ActivityNode) = handlerBody.oclAsType(Action).allOwnedNodes() in
nodes.outgoing->forAll(nodes->includes(target)) and
nodes.incoming->forAll(nodes->includes(source))
handlerBody.owner=protectedNode.owner
exceptionInput.type=null or 
exceptionType->forAll(conformsTo(exceptionInput.type.oclAsType(Classifier)))")
  @Ecore(constraints="handler_body_edges output_pins one_input edge_source_target handler_body_owner exception_input_type")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(handler_body_edges="handlerBody.incoming->isEmpty() and handlerBody.outgoing->isEmpty() and exceptionInput.incoming->isEmpty()", output_pins="(protectedNode.oclIsKindOf(Action) and protectedNode.oclAsType(Action).output->notEmpty()) implies
(
  handlerBody.oclIsKindOf(Action) and 
  let protectedNodeOutput : OrderedSet(OutputPin) = protectedNode.oclAsType(Action).output,
        handlerBodyOutput : OrderedSet(OutputPin) =  handlerBody.oclAsType(Action).output in
    protectedNodeOutput->size() = handlerBodyOutput->size() and
    Sequence{1..protectedNodeOutput->size()}->forAll(i |
    	handlerBodyOutput->at(i).type.conformsTo(protectedNodeOutput->at(i).type) and
    	handlerBodyOutput->at(i).isOrdered=protectedNodeOutput->at(i).isOrdered and
    	handlerBodyOutput->at(i).compatibleWith(protectedNodeOutput->at(i)))
)", one_input="handlerBody.oclIsKindOf(Action) and
let inputs: OrderedSet(InputPin) = handlerBody.oclAsType(Action).input in
inputs->size()=1 and inputs->first()=exceptionInput", edge_source_target="let nodes:Set(ActivityNode) = handlerBody.oclAsType(Action).allOwnedNodes() in
nodes.outgoing->forAll(nodes->includes(target)) and
nodes.incoming->forAll(nodes->includes(source))", handler_body_owner="handlerBody.owner=protectedNode.owner", exception_input_type="exceptionInput.type=null or 
exceptionType->forAll(conformsTo(exceptionInput.type.oclAsType(Classifier)))")
  class ExceptionHandler extends commonStructure.Element {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="exceptionHandler")
    @GenModel(documentation="An ObjectNode within the handlerBody. When the ExceptionHandler catches an exception, the exception token is placed on this ObjectNode, causing the handlerBody to execute.")
    !ordered ref ObjectNode[1] exceptionInput;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="exceptionHandler")
    @GenModel(documentation="The Classifiers whose instances the ExceptionHandler catches as exceptions. If an exception occurs whose type is any exceptionType, the ExceptionHandler catches the exception and executes the handlerBody.")
    !ordered ref classification.Classifier[+] exceptionType;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="exceptionHandler")
    @GenModel(documentation="An ExecutableNode that is executed if the ExceptionHandler catches an exception.")
    !ordered ref ExecutableNode[1] handlerBody;

    @GenModel(documentation="The ExecutableNode protected by the ExceptionHandler. If an exception propagates out of the protectedNode and has a type matching one of the exceptionTypes, then it is caught by this ExceptionHandler.")
    @subsets
    !ordered ref ExecutableNode[1]#handler protectedNode;
  }

  @GenModel(documentation="An ObjectNode is an abstract ActivityNode that may hold tokens within the object flow in an Activity. ObjectNodes also support token selection, limitation on the number of tokens held, specification of the state required for tokens being held, and carrying control values.

selection<>null implies
	selection.inputParameters()->size()=1 and
	selection.inputParameters()->forAll(p | not p.isUnique and p.is(0,*) and self.type.conformsTo(p.type)) and
	selection.outputParameters()->size()=1 and
		selection.inputParameters()->forAll(p | self.type.conformsTo(p.type))
	
(selection<>null) = (ordering=ObjectNodeOrderingKind::ordered)
(not isControlType) implies incoming->union(outgoing)->forAll(oclIsKindOf(ObjectFlow))")
  @Ecore(constraints="input_output_parameter selection_behavior object_flow_edges")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(input_output_parameter="selection<>null implies
	selection.inputParameters()->size()=1 and
	selection.inputParameters()->forAll(p | not p.isUnique and p.is(0,*) and self.type.conformsTo(p.type)) and
	selection.outputParameters()->size()=1 and
		selection.inputParameters()->forAll(p | self.type.conformsTo(p.type))
	", selection_behavior="(selection<>null) = (ordering=ObjectNodeOrderingKind::ordered)", object_flow_edges="(not isControlType) implies incoming->union(outgoing)->forAll(oclIsKindOf(ObjectFlow))")
  abstract class ObjectNode extends ActivityNode, commonStructure.TypedElement {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="objectNode")
    @GenModel(documentation="The States required to be associated with the values held by tokens on this ObjectNode.")
    !ordered ref stateMachines.State[*] inState;

    @GenModel(documentation="Indicates whether the type of the ObjectNode is to be treated as representing control values that may traverse ControlFlows.")
    !ordered attr types.Boolean[1] isControlType = "false";

    @GenModel(documentation="Indicates how the tokens held by the ObjectNode are ordered for selection to traverse ActivityEdges outgoing from the ObjectNode.")
    !ordered attr ObjectNodeOrderingKind[1] ordering = "fifo";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="objectNode")
    @GenModel(documentation="A Behavior used to select tokens to be offered on outgoing ActivityEdges.")
    !ordered ref commonBehavior.Behavior selection;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="objectNode")
    @GenModel(documentation="The maximum number of tokens that may be held by this ObjectNode. Tokens cannot flow into the ObjectNode if the upperBound is reached. If no upperBound is specified, then there is no limit on how many tokens the ObjectNode can hold.")
    @subsets
    !ordered val values.ValueSpecification upperBound;
  }

  @GenModel(documentation="ObjectNodeOrderingKind is an enumeration indicating queuing order for offering the tokens held by an ObjectNode.")
  enum ObjectNodeOrderingKind {

    @GenModel(documentation="Indicates that tokens are unordered.")
    unordered = 0;

    @GenModel(documentation="Indicates that tokens are ordered.")
    ~ordered = 1;

    @"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="LIFO")
    @GenModel(documentation="Indicates that tokens are queued in a last in, first out manner.")
    lifo = 2;

    @"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="FIFO")
    @GenModel(documentation="Indicates that tokens are queued in a first in, first out manner.")
    fifo = 3;
  }

  @GenModel(documentation="A Variable is a ConnectableElement that may store values during the execution of an Activity. Reading and writing the values of a Variable provides an alternative means for passing data than the use of ObjectFlows. A Variable may be owned directly by an Activity, in which case it is accessible from anywhere within that activity, or it may be owned by a StructuredActivityNode, in which case it is only accessible within that node.")
  class Variable extends structuredClassifiers.ConnectableElement, commonStructure.MultiplicityElement {

    @GenModel(documentation="A Variable is accessible by Actions within its scope (the Activity or StructuredActivityNode that owns it).")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if scope<>null then scope.allOwnedNodes()->includes(a)
else a.containingActivity()=activityScope
endif")
    !ordered op types.Boolean[1] isAccessibleBy(!ordered actions.Action[1] a);

    @GenModel(documentation="An Activity that owns the Variable.")
    @subsets
    !ordered ref Activity#variable activityScope;

    @GenModel(documentation="A StructuredActivityNode that owns the Variable.")
    @subsets
    !ordered ref actions.StructuredActivityNode#variable scope;
  }

  @GenModel(documentation="An ActivityFinalNode is a FinalNode that terminates the execution of its owning Activity or StructuredActivityNode.")
  class ActivityFinalNode extends FinalNode {
  }

  @GenModel(documentation="A FinalNode is an abstract ControlNode at which a flow in an Activity stops.
outgoing->isEmpty()")
  @Ecore(constraints="no_outgoing_edges")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(no_outgoing_edges="outgoing->isEmpty()")
  abstract class FinalNode extends ControlNode {
  }

  @GenModel(documentation="A ControlNode is an abstract ActivityNode that coordinates flows in an Activity.")
  abstract class ControlNode extends ActivityNode {
  }

  @GenModel(documentation="An ActivityParameterNode is an ObjectNode for accepting values from the input Parameters or providing values to the output Parameters of an Activity.
(incoming->notEmpty() and outgoing->isEmpty()) implies 
	(parameter.direction = ParameterDirectionKind::out or 
	 parameter.direction = ParameterDirectionKind::inout or 
	 parameter.direction = ParameterDirectionKind::return)
activity.ownedParameter->includes(parameter)
type = parameter.type
(outgoing->notEmpty() and incoming->isEmpty()) implies 
	(parameter.direction = ParameterDirectionKind::_'in' or 
	 parameter.direction = ParameterDirectionKind::inout)
incoming->isEmpty() or outgoing->isEmpty()")
  @Ecore(constraints="no_outgoing_edges has_parameters same_type no_incoming_edges no_edges")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(no_outgoing_edges="(incoming->notEmpty() and outgoing->isEmpty()) implies 
	(parameter.direction = ParameterDirectionKind::out or 
	 parameter.direction = ParameterDirectionKind::inout or 
	 parameter.direction = ParameterDirectionKind::return)", has_parameters="activity.ownedParameter->includes(parameter)", same_type="type = parameter.type", no_incoming_edges="(outgoing->notEmpty() and incoming->isEmpty()) implies 
	(parameter.direction = ParameterDirectionKind::_'in' or 
	 parameter.direction = ParameterDirectionKind::inout)", no_edges="incoming->isEmpty() or outgoing->isEmpty()")
  class ActivityParameterNode extends ObjectNode {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="activityParameterNode")
    @GenModel(documentation="The Parameter for which the ActivityParameterNode will be accepting or providing values.")
    !ordered ref classification.Parameter[1] parameter;
  }

  @GenModel(documentation="A CentralBufferNode is an ObjectNode for managing flows from multiple sources and targets.")
  class CentralBufferNode extends ObjectNode {
  }

  @GenModel(documentation="A ControlFlow is an ActivityEdge traversed by control tokens or object tokens of control type, which are use to control the execution of ExecutableNodes.
(source.oclIsKindOf(ObjectNode) implies source.oclAsType(ObjectNode).isControlType) and 
(target.oclIsKindOf(ObjectNode) implies target.oclAsType(ObjectNode).isControlType)")
  @Ecore(constraints="object_nodes")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(object_nodes="(source.oclIsKindOf(ObjectNode) implies source.oclAsType(ObjectNode).isControlType) and 
(target.oclIsKindOf(ObjectNode) implies target.oclAsType(ObjectNode).isControlType)")
  class ControlFlow extends ActivityEdge {
  }

  @GenModel(documentation="A DataStoreNode is a CentralBufferNode for persistent data.")
  class DataStoreNode extends CentralBufferNode {
  }

  @GenModel(documentation="A DecisionNode is a ControlNode that chooses between outgoing ActivityEdges for the routing of tokens.
(decisionInput<>null and decisionInputFlow=null and incoming->exists(oclIsKindOf(ControlFlow))) implies
   decisionInput.inputParameters()->isEmpty()
let allEdges: Set(ActivityEdge) = incoming->union(outgoing) in
let allRelevantEdges: Set(ActivityEdge) = if decisionInputFlow->notEmpty() then allEdges->excluding(decisionInputFlow) else allEdges endif in
allRelevantEdges->forAll(oclIsKindOf(ControlFlow)) or allRelevantEdges->forAll(oclIsKindOf(ObjectFlow))

incoming->includes(decisionInputFlow)
(decisionInput<>null and decisionInputFlow<>null and incoming->forAll(oclIsKindOf(ObjectFlow))) implies
	decisionInput.inputParameters()->size()=2
(incoming->size() = 1 or incoming->size() = 2) and outgoing->size() > 0
(decisionInput<>null and decisionInputFlow<>null and incoming->exists(oclIsKindOf(ControlFlow))) implies
	decisionInput.inputParameters()->size()=1
decisionInput<>null implies 
  (decisionInput.ownedParameter->forAll(par | 
     par.direction <> ParameterDirectionKind::out and 
     par.direction <> ParameterDirectionKind::inout ) and
   decisionInput.ownedParameter->one(par | 
     par.direction <> ParameterDirectionKind::return))
     
(decisionInput<>null and decisionInputFlow=null and incoming->forAll(oclIsKindOf(ObjectFlow))) implies
	decisionInput.inputParameters()->size()=1")
  @Ecore(constraints="zero_input_parameters edges decision_input_flow_incoming two_input_parameters incoming_outgoing_edges incoming_control_one_input_parameter parameters incoming_object_one_input_parameter")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(zero_input_parameters="(decisionInput<>null and decisionInputFlow=null and incoming->exists(oclIsKindOf(ControlFlow))) implies
   decisionInput.inputParameters()->isEmpty()", edges="let allEdges: Set(ActivityEdge) = incoming->union(outgoing) in
let allRelevantEdges: Set(ActivityEdge) = if decisionInputFlow->notEmpty() then allEdges->excluding(decisionInputFlow) else allEdges endif in
allRelevantEdges->forAll(oclIsKindOf(ControlFlow)) or allRelevantEdges->forAll(oclIsKindOf(ObjectFlow))
", decision_input_flow_incoming="incoming->includes(decisionInputFlow)", two_input_parameters="(decisionInput<>null and decisionInputFlow<>null and incoming->forAll(oclIsKindOf(ObjectFlow))) implies
	decisionInput.inputParameters()->size()=2", incoming_outgoing_edges="(incoming->size() = 1 or incoming->size() = 2) and outgoing->size() > 0", incoming_control_one_input_parameter="(decisionInput<>null and decisionInputFlow<>null and incoming->exists(oclIsKindOf(ControlFlow))) implies
	decisionInput.inputParameters()->size()=1", parameters="decisionInput<>null implies 
  (decisionInput.ownedParameter->forAll(par | 
     par.direction <> ParameterDirectionKind::out and 
     par.direction <> ParameterDirectionKind::inout ) and
   decisionInput.ownedParameter->one(par | 
     par.direction <> ParameterDirectionKind::return))
     ", incoming_object_one_input_parameter="(decisionInput<>null and decisionInputFlow=null and incoming->forAll(oclIsKindOf(ObjectFlow))) implies
	decisionInput.inputParameters()->size()=1")
  class DecisionNode extends ControlNode {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="decisionNode")
    @GenModel(documentation="A Behavior that is executed to provide an input to guard ValueSpecifications on ActivityEdges outgoing from the DecisionNode.")
    !ordered ref commonBehavior.Behavior decisionInput;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="decisionNode")
    @GenModel(documentation="An additional ActivityEdge incoming to the DecisionNode that provides a decision input value for the guards ValueSpecifications on ActivityEdges outgoing from the DecisionNode.")
    !ordered ref ObjectFlow decisionInputFlow;
  }

  @GenModel(documentation="An ObjectFlow is an ActivityEdge that is traversed by object tokens that may hold values. Object flows also support multicast/receive, token selection from object nodes, and transformation of tokens.
selection<>null implies
	selection.inputParameters()->size()=1 and
	selection.inputParameters()->forAll(not isUnique and is(0,*)) and
	selection.outputParameters()->size()=1
not (source.oclIsKindOf(ExecutableNode) or target.oclIsKindOf(ExecutableNode))
transformation<>null implies
	transformation.inputParameters()->size()=1 and
	transformation.outputParameters()->size()=1
selection<>null implies source.oclIsKindOf(ObjectNode)
not (isMulticast and isMultireceive)")
  @Ecore(constraints="input_and_output_parameter no_executable_nodes transformation_behavior selection_behavior compatible_types same_upper_bounds target is_multicast_or_is_multireceive")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(input_and_output_parameter="selection<>null implies
	selection.inputParameters()->size()=1 and
	selection.inputParameters()->forAll(not isUnique and is(0,*)) and
	selection.outputParameters()->size()=1", no_executable_nodes="not (source.oclIsKindOf(ExecutableNode) or target.oclIsKindOf(ExecutableNode))", transformation_behavior="transformation<>null implies
	transformation.inputParameters()->size()=1 and
	transformation.outputParameters()->size()=1", selection_behavior="selection<>null implies source.oclIsKindOf(ObjectNode)", is_multicast_or_is_multireceive="not (isMulticast and isMultireceive)")
  class ObjectFlow extends ActivityEdge {

    @GenModel(documentation="Indicates whether the objects in the ObjectFlow are passed by multicasting.")
    !ordered attr types.Boolean[1] isMulticast = "false";

    @GenModel(documentation="Indicates whether the objects in the ObjectFlow are gathered from respondents to multicasting.")
    !ordered attr types.Boolean[1] isMultireceive = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="objectFlow")
    @GenModel(documentation="A Behavior used to select tokens from a source ObjectNode.")
    !ordered ref commonBehavior.Behavior selection;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="objectFlow")
    @GenModel(documentation="A Behavior used to change or replace object tokens flowing along the ObjectFlow.")
    !ordered ref commonBehavior.Behavior transformation;
  }

  @GenModel(documentation="A FlowFinalNode is a FinalNode that terminates a flow by consuming the tokens offered to it.")
  class FlowFinalNode extends FinalNode {
  }

  @GenModel(documentation="A ForkNode is a ControlNode that splits a flow into multiple concurrent flows.
let allEdges : Set(ActivityEdge) = incoming->union(outgoing) in
allEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow))

incoming->size()=1")
  @Ecore(constraints="edges one_incoming_edge")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(edges="let allEdges : Set(ActivityEdge) = incoming->union(outgoing) in
allEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow))
", one_incoming_edge="incoming->size()=1")
  class ForkNode extends ControlNode {
  }

  @GenModel(documentation="An InitialNode is a ControlNode that offers a single control token when initially enabled.
incoming->isEmpty()
outgoing->forAll(oclIsKindOf(ControlFlow))")
  @Ecore(constraints="no_incoming_edges control_edges")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(no_incoming_edges="incoming->isEmpty()", control_edges="outgoing->forAll(oclIsKindOf(ControlFlow))")
  class InitialNode extends ControlNode {
  }

  @GenModel(documentation="A JoinNode is a ControlNode that synchronizes multiple flows.
outgoing->size() = 1
if incoming->exists(oclIsKindOf(ObjectFlow)) then outgoing->forAll(oclIsKindOf(ObjectFlow))
else outgoing->forAll(oclIsKindOf(ControlFlow))
endif")
  @Ecore(constraints="one_outgoing_edge incoming_object_flow")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(one_outgoing_edge="outgoing->size() = 1", incoming_object_flow="if incoming->exists(oclIsKindOf(ObjectFlow)) then outgoing->forAll(oclIsKindOf(ObjectFlow))
else outgoing->forAll(oclIsKindOf(ControlFlow))
endif")
  class JoinNode extends ControlNode {

    @GenModel(documentation="Indicates whether incoming tokens having objects with the same identity are combined into one by the JoinNode.")
    !ordered attr types.Boolean[1] isCombineDuplicate = "true";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="joinNode")
    @GenModel(documentation="A ValueSpecification giving the condition under which the JoinNode will offer a token on its outgoing ActivityEdge. If no joinSpec is specified, then the JoinNode will offer an outgoing token if tokens are offered on all of its incoming ActivityEdges (an \"and\" condition).")
    @subsets
    !ordered val values.ValueSpecification joinSpec;
  }

  @GenModel(documentation="A merge node is a control node that brings together multiple alternate flows. It is not used to synchronize concurrent flows but to accept one among several alternate flows.
outgoing->size()=1
let allEdges : Set(ActivityEdge) = incoming->union(outgoing) in
allEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow))
")
  @Ecore(constraints="one_outgoing_edge edges")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(one_outgoing_edge="outgoing->size()=1", edges="let allEdges : Set(ActivityEdge) = incoming->union(outgoing) in
allEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow))
")
  class MergeNode extends ControlNode {
  }

}

@"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="CommonBehavior")
@Ecore(validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL", invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL")
@namespace(uri="http:///uml/commonBehavior.ecore", prefix="uml.commonBehavior")
package commonBehavior {
  @GenModel(documentation="A trigger for an AnyReceiveEvent is triggered by the receipt of any message that is not explicitly handled by any related trigger.")
  class AnyReceiveEvent extends MessageEvent {
  }

  @GenModel(documentation="A MessageEvent specifies the receipt by an object of either an Operation call or a Signal instance.")
  abstract class MessageEvent extends Event {
  }

  @GenModel(documentation="An Event is the specification of some occurrence that may potentially trigger effects by an object.")
  abstract class Event extends commonStructure.PackageableElement {
  }

  @GenModel(documentation="A Trigger specifies a specific point  at which an Event occurrence may trigger an effect in a Behavior. A Trigger may be qualified by the Port on which the Event occurred.
port->notEmpty() implies event.oclIsKindOf(MessageEvent)")
  @Ecore(constraints="trigger_with_ports")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(trigger_with_ports="port->notEmpty() implies event.oclIsKindOf(MessageEvent)")
  class Trigger extends commonStructure.NamedElement {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="trigger")
    @GenModel(documentation="The Event that detected by the Trigger.")
    !ordered ref Event[1] event;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="trigger")
    @GenModel(documentation="A optional Port of through which the given effect is detected.")
    !ordered ref structuredClassifiers.Port[*] port;
  }

  @GenModel(documentation="A CallEvent models the receipt by an object of a message invoking a call of an Operation.")
  class CallEvent extends MessageEvent {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="callEvent")
    @GenModel(documentation="Designates the Operation whose invocation raised the CalEvent.")
    !ordered ref classification.Operation[1] operation;
  }

  @GenModel(documentation="A ChangeEvent models a change in the system configuration that makes a condition true.")
  class ChangeEvent extends Event {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="changeEvent")
    @GenModel(documentation="A Boolean-valued ValueSpecification that will result in a ChangeEvent whenever its value changes from false to true.")
    @subsets
    !ordered val values.ValueSpecification[1] changeExpression;
  }

  @GenModel(documentation="A FunctionBehavior is an OpaqueBehavior that does not access or modify any objects or other external data.
self.ownedParameter->
  select(p | p.direction = ParameterDirectionKind::out or p.direction= ParameterDirectionKind::inout or p.direction= ParameterDirectionKind::return)->size() >= 1
ownedParameter->forAll(p | p.type <> null and
  p.type.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p.type.oclAsType(DataType)))")
  @Ecore(constraints="one_output_parameter types_of_parameters")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(one_output_parameter="self.ownedParameter->
  select(p | p.direction = ParameterDirectionKind::out or p.direction= ParameterDirectionKind::inout or p.direction= ParameterDirectionKind::return)->size() >= 1", types_of_parameters="ownedParameter->forAll(p | p.type <> null and
  p.type.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p.type.oclAsType(DataType)))")
  class FunctionBehavior extends OpaqueBehavior {

    @GenModel(documentation="The hasAllDataTypeAttributes query tests whether the types of the attributes of the given DataType are all DataTypes, and similarly for all those DataTypes.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="d.ownedAttribute->forAll(a |
    a.type.oclIsKindOf(DataType) and
      hasAllDataTypeAttributes(a.type.oclAsType(DataType)))")
    !ordered op types.Boolean[1] hasAllDataTypeAttributes(!ordered simpleClassifiers.DataType[1] d);
  }

  @GenModel(documentation="An OpaqueBehavior is a Behavior whose specification is given in a textual language other than UML.")
  class OpaqueBehavior extends Behavior {

    @GenModel(documentation="Specifies the behavior in one or more languages.")
    !unique attr types.String[*] body;

    @GenModel(documentation="Languages the body strings use in the same order as the body strings.")
    attr types.String[*] language;
  }

  @GenModel(documentation="A SignalEvent represents the receipt of an asynchronous Signal instance.")
  class SignalEvent extends MessageEvent {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="signalEvent")
    @GenModel(documentation="The specific Signal that is associated with this SignalEvent.")
    !ordered ref simpleClassifiers.Signal[1] signal;
  }

  @GenModel(documentation="A TimeEvent is an Event that occurs at a specific point in time.
when.integerValue() >= 0")
  @Ecore(constraints="when_non_negative")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(when_non_negative="when.integerValue() >= 0")
  class TimeEvent extends Event {

    @GenModel(documentation="Specifies whether the TimeEvent is specified as an absolute or relative time.")
    !ordered attr types.Boolean[1] isRelative = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="timeEvent")
    @GenModel(documentation="Specifies the time of the TimeEvent.")
    @subsets
    !ordered val values.TimeExpression[1] when;
  }

  @GenModel(documentation="Behavior is a specification of how its context BehavioredClassifier changes state over time. This specification may be either a definition of possible behavior execution or emergent behavior, or a selective illustration of an interesting subset of possible executions. The latter form is typically used for capturing examples, such as a trace of a particular execution.
specification <> null implies _'context'.ownedBehavior->select(specification=self.specification)->size() = 1
specification <> null implies ownedParameter->size() = specification.ownedParameter->size()
_'context'.feature->includes(specification)")
  @Ecore(constraints="most_one_behavior parameters_match feature_of_context_classifier")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(most_one_behavior="specification <> null implies _'context'.ownedBehavior->select(specification=self.specification)->size() = 1", parameters_match="specification <> null implies ownedParameter->size() = specification.ownedParameter->size()", feature_of_context_classifier="_'context'.feature->includes(specification)")
  abstract class Behavior extends structuredClassifiers.Class {

    @GenModel(documentation="A Behavior that is directly owned as a nestedClassifier does not have a context. Otherwise, to determine the context of a Behavior, find the first BehavioredClassifier reached by following the chain of owner relationships from the Behavior, if any. If there is such a BehavioredClassifier, then it is the context, unless it is itself a Behavior with a non-empty context, in which case that is also the context for the original Behavior. ")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if nestingClass <> null then
    null
else
    let b:BehavioredClassifier = self.behavioredClassifier(self.owner) in
    if b.oclIsKindOf(Behavior) and b.oclAsType(Behavior)._'context' <> null then 
        b.oclAsType(Behavior)._'context'
    else 
        b 
    endif
endif")
    !ordered op simpleClassifiers.BehavioredClassifier context();

    @GenModel(documentation="The first BehavioredClassifier reached by following the chain of owner relationships from the Behavior, if any.")
    !ordered op simpleClassifiers.BehavioredClassifier behavioredClassifier(!ordered commonStructure.Element[1] from);

    @GenModel(documentation="The in and inout ownedParameters of the Behavior.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="ownedParameter->select(direction=ParameterDirectionKind::_'in' or direction=ParameterDirectionKind::inout)")
    op classification.Parameter[*] inputParameters();

    @GenModel(documentation="The out, inout and return ownedParameters.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="ownedParameter->select(direction=ParameterDirectionKind::out or direction=ParameterDirectionKind::inout or direction=ParameterDirectionKind::return)")
    op classification.Parameter[*] outputParameters();

    @GenModel(documentation="Designates a BehavioralFeature that the Behavior implements. The BehavioralFeature must be owned by the BehavioredClassifier that owns the Behavior or be inherited by it. The Parameters of the BehavioralFeature and the implementing Behavior must match. A Behavior does not need to have a specification, in which case it either is the classifierBehavior of a BehavioredClassifier or it can only be invoked by another Behavior of the Classifier.")
    !ordered ref classification.BehavioralFeature#method specification;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="behavior")
    @GenModel(documentation="The BehavioredClassifier that is the context for the execution of the Behavior. A Behavior that is directly owned as a nestedClassifier does not have a context. Otherwise, to determine the context of a Behavior, find the first BehavioredClassifier reached by following the chain of owner relationships from the Behavior, if any. If there is such a BehavioredClassifier, then it is the context, unless it is itself a Behavior with a non-empty context, in which case that is also the context for the original Behavior. For example, following this algorithm, the context of an entry Behavior in a StateMachine is the BehavioredClassifier that owns the StateMachine. The features of the context BehavioredClassifier as well as the Elements visible to the context Classifier are visible to the Behavior.")
    @subsets
    !ordered readonly volatile transient derived ref simpleClassifiers.BehavioredClassifier context;

    @GenModel(documentation="Tells whether the Behavior can be invoked while it is still executing from a previous invocation.")
    !ordered attr types.Boolean[1] isReentrant = "true";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="behavior")
    @GenModel(documentation="References a list of Parameters to the Behavior which describes the order and type of arguments that can be given when the Behavior is invoked and of the values which will be returned when the Behavior completes its execution.")
    @subsets
    val classification.Parameter[*] ownedParameter;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="behavior")
    @GenModel(documentation="The ParameterSets owned by this Behavior.")
    @subsets
    !ordered val classification.ParameterSet[*] ownedParameterSet;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="behavior")
    @GenModel(documentation="An optional set of Constraints specifying what is fulfilled after the execution of the Behavior is completed, if its precondition was fulfilled before its invocation.")
    @subsets
    !ordered ref commonStructure.Constraint[*] postcondition;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="behavior")
    @GenModel(documentation="An optional set of Constraints specifying what must be fulfilled before the Behavior is invoked.")
    @subsets
    !ordered ref commonStructure.Constraint[*] precondition;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="behavior")
    @GenModel(documentation="References the Behavior that this Behavior redefines. A subtype of Behavior may redefine any other subtype of Behavior. If the Behavior implements a BehavioralFeature, it replaces the redefined Behavior. If the Behavior is a classifierBehavior, it extends the redefined Behavior.")
    @subsets
    !ordered ref Behavior[*] redefinedBehavior;
  }

}

@"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="CommonStructure")
@Ecore(validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL", invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL")
@namespace(uri="http:///uml/commonStructure.ecore", prefix="uml.commonStructure")
package commonStructure {
  @GenModel(documentation="An Abstraction is a Relationship that relates two Elements or sets of Elements that represent the same concept at different levels of abstraction or from different viewpoints.")
  class Abstraction extends Dependency {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="abstraction")
    @GenModel(documentation="An OpaqueExpression that states the abstraction relationship between the supplier(s) and the client(s). In some cases, such as derivation, it is usually formal and unidirectional; in other cases, such as trace, it is usually informal and bidirectional. The mapping expression is optional and may be omitted if the precise relationship between the Elements is not specified.")
    @subsets
    !ordered val values.OpaqueExpression mapping;
  }

  @GenModel(documentation="A Dependency is a Relationship that signifies that a single model Element or a set of model Elements requires other model Elements for their specification or implementation. This means that the complete semantics of the client Element(s) are either semantically or structurally dependent on the definition of the supplier Element(s).")
  class Dependency extends PackageableElement, DirectedRelationship {

    @GenModel(documentation="The Element(s) dependent on the supplier Element(s). In some cases (such as a trace Abstraction) the assignment of direction (that is, the designation of the client Element) is at the discretion of the modeler and is a stipulation.")
    @subsets
    !ordered volatile transient derived ref NamedElement[+]#clientDependency client;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="supplierDependency")
    @GenModel(documentation="The Element(s) on which the client Element(s) depend in some respect. The modeler may stipulate a sense of Dependency direction suitable for their domain.")
    @subsets
    !ordered ref NamedElement[+] supplier;
  }

  @GenModel(documentation="A DirectedRelationship represents a relationship between a collection of source model Elements and a collection of target model Elements.")
  abstract class DirectedRelationship extends Relationship {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="directedRelationship")
    @GenModel(documentation="Specifies the source Element(s) of the DirectedRelationship.")
    @union
    @subsets
    !ordered readonly volatile transient derived ref Element[+] source;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="directedRelationship")
    @GenModel(documentation="Specifies the target Element(s) of the DirectedRelationship.")
    @union
    @subsets
    !ordered readonly volatile transient derived ref Element[+] target;
  }

  @GenModel(documentation="Relationship is an abstract concept that specifies some kind of relationship between Elements.")
  abstract class Relationship extends Element {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="relationship")
    @GenModel(documentation="Specifies the elements related by the Relationship.")
    @union
    !ordered readonly volatile transient derived ref Element[+] relatedElement;
  }

  @GenModel(documentation="An Element is a constituent of a model. As such, it has the capability of owning other Elements.
mustBeOwned() implies owner->notEmpty()
not allOwnedElements()->includes(self)")
  @Ecore(constraints="has_owner not_own_self")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(has_owner="mustBeOwned() implies owner->notEmpty()", not_own_self="not allOwnedElements()->includes(self)")
  abstract class Element {

    @GenModel(documentation="The query allOwnedElements() gives all of the direct and indirect ownedElements of an Element.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))->asSet()")
    !ordered op Element[*] allOwnedElements();

    @GenModel(documentation="The query mustBeOwned() indicates whether Elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="true")
    !ordered op types.Boolean[1] mustBeOwned();

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="owningElement")
    @GenModel(documentation="The Comments owned by this Element.")
    @subsets
    !ordered val Comment[*] ownedComment;

    @GenModel(documentation="The Elements owned by this Element.")
    @union
    !ordered readonly volatile transient derived ref Element[*]#owner ownedElement;

    @GenModel(documentation="The Element that owns this Element.")
    @union
    !ordered readonly volatile transient derived ref Element#ownedElement owner;
  }

  @GenModel(documentation="A Comment is a textual annotation that can be attached to a set of Elements.")
  class Comment extends Element {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="comment")
    @GenModel(documentation="References the Element(s) being commented.")
    !ordered ref Element[*] annotatedElement;

    @GenModel(documentation="Specifies a string that is the comment.")
    !ordered attr types.String body;
  }

  @GenModel(documentation="A NamedElement is an Element in a model that may have a name. The name may be given directly and/or via the use of a StringExpression.
(namespace = null and owner <> null) implies visibility = null
(name <> null and allNamespaces()->select(ns | ns.name = null)->isEmpty()) implies
  qualifiedName = allNamespaces()->iterate( ns : Namespace; agg: String = name | ns.name.concat(self.separator()).concat(agg))
name=null or allNamespaces()->select( ns | ns.name=null )->notEmpty() implies qualifiedName = null")
  @Ecore(constraints="visibility_needs_ownership has_qualified_name has_no_qualified_name")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(visibility_needs_ownership="(namespace = null and owner <> null) implies visibility = null", has_qualified_name="(name <> null and allNamespaces()->select(ns | ns.name = null)->isEmpty()) implies
  qualifiedName = allNamespaces()->iterate( ns : Namespace; agg: String = name | ns.name.concat(self.separator()).concat(agg))", has_no_qualified_name="name=null or allNamespaces()->select( ns | ns.name=null )->notEmpty() implies qualifiedName = null")
  abstract class NamedElement extends Element {

    @GenModel(documentation="The query allNamespaces() gives the sequence of Namespaces in which the NamedElement is nested, working outwards.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if owner.oclIsKindOf(TemplateParameter) and
  owner.oclAsType(TemplateParameter).signature.template.oclIsKindOf(Namespace) then
    let enclosingNamespace : Namespace =
      owner.oclAsType(TemplateParameter).signature.template.oclAsType(Namespace) in
        enclosingNamespace.allNamespaces()->prepend(enclosingNamespace)
else
  if namespace->isEmpty()
    then OrderedSet{}
  else
    namespace.allNamespaces()->prepend(namespace)
  endif
endif")
    op Namespace[*] allNamespaces();

    @GenModel(documentation="The query allOwningPackages() returns the set of all the enclosing Namespaces of this NamedElement, working outwards, that are Packages, up to but not including the first such Namespace that is not a Package.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if namespace.oclIsKindOf(Package)
then
  let owningPackage : Package = namespace.oclAsType(Package) in
    owningPackage->union(owningPackage.allOwningPackages())
else
  null
endif")
    !ordered op packages.Package[*] allOwningPackages();

    @GenModel(documentation="The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have types neither of which is a kind of the other or (b) they have different names.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="(self.oclIsKindOf(n.oclType()) or n.oclIsKindOf(self.oclType())) implies
    ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()")
    !ordered op types.Boolean[1] isDistinguishableFrom(!ordered NamedElement[1] n, !ordered Namespace[1] ns);

    @GenModel(documentation="When a NamedElement has a name, and all of its containing Namespaces have a name, the qualifiedName is constructed from the name of the NamedElement and the names of the containing Namespaces.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if self.name <> null and self.allNamespaces()->select( ns | ns.name=null )->isEmpty()
then 
    self.allNamespaces()->iterate( ns : Namespace; agg: String = self.name | ns.name.concat(self.separator()).concat(agg))
else
   null
endif")
    !ordered op types.String[1] qualifiedName();

    @GenModel(documentation="The query separator() gives the string that is used to separate names when constructing a qualifiedName.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="'::'")
    !ordered op types.String[1] separator();

    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="Dependency.allInstances()->select(d | d.client->includes(self))")
    !ordered op Dependency[*] clientDependency();

    @GenModel(documentation="The name of the NamedElement.")
    !ordered attr types.String name;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="namedElement")
    @GenModel(documentation="The StringExpression used to define the name of this NamedElement.")
    @subsets
    !ordered val values.StringExpression nameExpression;

    @GenModel(documentation="Specifies the Namespace that owns the NamedElement.")
    @union
    @subsets
    !ordered readonly volatile transient derived ref Namespace#ownedMember namespace;

    @GenModel(documentation="A name that allows the NamedElement to be identified within a hierarchy of nested Namespaces. It is constructed from the names of the containing Namespaces starting at the root of the hierarchy and ending with the name of the NamedElement itself.")
    !ordered readonly volatile transient derived attr types.String qualifiedName;

    @GenModel(documentation="Determines whether and how the NamedElement is visible outside its owning Namespace.")
    !ordered attr VisibilityKind visibility;

    @GenModel(documentation="Indicates the Dependencies that reference this NamedElement as a client.")
    !ordered volatile transient derived ref Dependency[*]#client clientDependency;
  }

  @GenModel(documentation="A TypedElement is a NamedElement that may have a Type specified for it.")
  abstract class TypedElement extends NamedElement {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="typedElement")
    @GenModel(documentation="The type of the TypedElement.")
    !ordered ref Type type;
  }

  @GenModel(documentation="A Type constrains the values represented by a TypedElement.")
  abstract class Type extends PackageableElement {

    @GenModel(documentation="The query conformsTo() gives true for a Type that conforms to another. By default, two Types do not conform to each other. This query is intended to be redefined for specific conformance situations.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="false")
    !ordered op types.Boolean[1] conformsTo(!ordered Type[1] other);

    @GenModel(documentation="Specifies the owning Package of this Type, if any.")
    !ordered volatile transient derived ref packages.Package#ownedType ~package;
  }

  @GenModel(documentation="Realization is a specialized Abstraction relationship between two sets of model Elements, one representing a specification (the supplier) and the other represents an implementation of the latter (the client). Realization can be used to model stepwise refinement, optimizations, transformations, templates, model synthesis, framework composition, etc.")
  class Realization extends Abstraction {
  }

  @GenModel(documentation="A Namespace is an Element in a model that owns and/or imports a set of NamedElements that can be identified by name.
membersAreDistinguishable()
packageImport.importedPackage.oclAsType(Namespace)->excludes(self)
elementImport.importedElement.oclAsType(Element)->excludesAll(ownedMember)")
  @Ecore(constraints="members_distinguishable cannot_import_self cannot_import_ownedMembers")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(members_distinguishable="membersAreDistinguishable()", cannot_import_self="packageImport.importedPackage.oclAsType(Namespace)->excludes(self)", cannot_import_ownedMembers="elementImport.importedElement.oclAsType(Element)->excludesAll(ownedMember)")
  abstract class Namespace extends NamedElement {

    @GenModel(documentation="The query excludeCollisions() excludes from a set of PackageableElements any that would not be distinguishable from each other in this Namespace.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="imps->reject(imp1  | imps->exists(imp2 | not imp1.isDistinguishableFrom(imp2, self)))")
    !ordered op PackageableElement[*] excludeCollisions(!ordered PackageableElement[*] imps);

    @GenModel(documentation="The query getNamesOfMember() gives a set of all of the names that a member would have in a Namespace, taking importing into account. In general a member can have multiple names in a Namespace if it is imported more than once with different aliases.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if self.ownedMember ->includes(element)
then Set{element.name}
else let elementImports : Set(ElementImport) = self.elementImport->select(ei | ei.importedElement = element) in
  if elementImports->notEmpty()
  then
     elementImports->collect(el | el.getName())->asSet()
  else 
     self.packageImport->select(pi | pi.importedPackage.visibleMembers().oclAsType(NamedElement)->includes(element))-> collect(pi | pi.importedPackage.getNamesOfMember(element))->asSet()
  endif
endif")
    !ordered op types.String[*] getNamesOfMember(!ordered NamedElement[1] element);

    @GenModel(documentation="The query importMembers() defines which of a set of PackageableElements are actually imported into the Namespace. This excludes hidden ones, i.e., those which have names that conflict with names of ownedMembers, and it also excludes PackageableElements that would have the indistinguishable names when imported.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="self.excludeCollisions(imps)->select(imp | self.ownedMember->forAll(mem | imp.isDistinguishableFrom(mem, self)))")
    !ordered op PackageableElement[*] importMembers(!ordered PackageableElement[*] imps);

    @GenModel(documentation="The importedMember property is derived as the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="self.importMembers(elementImport.importedElement->asSet()->union(packageImport.importedPackage->collect(p | p.visibleMembers()))->asSet())")
    !ordered op PackageableElement[*] importedMember();

    @GenModel(documentation="The Boolean query membersAreDistinguishable() determines whether all of the Namespace's members are distinguishable within it.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="member->forAll( memb |
   member->excluding(memb)->forAll(other |
       memb.isDistinguishableFrom(other, self)))")
    !ordered op types.Boolean[1] membersAreDistinguishable();

    @GenModel(documentation="References the ElementImports owned by the Namespace.")
    @subsets
    !ordered val ElementImport[*]#importingNamespace elementImport;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="namespace")
    @GenModel(documentation="References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.")
    @subsets
    !ordered readonly volatile transient derived ref PackageableElement[*] importedMember;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="memberNamespace")
    @GenModel(documentation="A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance.")
    @union
    !ordered readonly volatile transient derived ref NamedElement[*] member;

    @GenModel(documentation="A collection of NamedElements owned by the Namespace.")
    @union
    @subsets
    !ordered readonly volatile transient derived ref NamedElement[*]#namespace ownedMember;

    @GenModel(documentation="Specifies a set of Constraints owned by this Namespace.")
    @subsets
    !ordered val Constraint[*]#context ownedRule;

    @GenModel(documentation="References the PackageImports owned by the Namespace.")
    @subsets
    !ordered val PackageImport[*]#importingNamespace packageImport;
  }

  @GenModel(documentation="An ElementImport identifies a NamedElement in a Namespace other than the one that owns that NamedElement and allows the NamedElement to be referenced using an unqualified name in the Namespace owning the ElementImport.
importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public
visibility = VisibilityKind::public or visibility = VisibilityKind::private")
  @Ecore(constraints="imported_element_is_public visibility_public_or_private")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(imported_element_is_public="importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public", visibility_public_or_private="visibility = VisibilityKind::public or visibility = VisibilityKind::private")
  class ElementImport extends DirectedRelationship {

    @GenModel(documentation="The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if alias->notEmpty() then
  alias
else
  importedElement.name
endif")
    !ordered op types.String[1] getName();

    @GenModel(documentation="Specifies the name that should be added to the importing Namespace in lieu of the name of the imported PackagableElement. The alias must not clash with any other member in the importing Namespace. By default, no alias is used.")
    !ordered attr types.String alias;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="import")
    @GenModel(documentation="Specifies the PackageableElement whose name is to be added to a Namespace.")
    @subsets
    !ordered ref PackageableElement[1] importedElement;

    @GenModel(documentation="Specifies the visibility of the imported PackageableElement within the importingNamespace, i.e., whether the  importedElement will in turn be visible to other Namespaces. If the ElementImport is public, the importedElement will be visible outside the importingNamespace while, if the ElementImport is private, it will not.")
    !ordered attr VisibilityKind[1] visibility = "public";

    @GenModel(documentation="Specifies the Namespace that imports a PackageableElement from another Namespace.")
    @subsets
    !ordered ref Namespace[1]#elementImport importingNamespace;
  }

  @GenModel(documentation="VisibilityKind is an enumeration type that defines literals to determine the visibility of Elements in a model.")
  enum VisibilityKind {

    @GenModel(documentation="A Named Element with public visibility is visible to all elements that can access the contents of the Namespace that owns it.")
    public = 0;

    @GenModel(documentation="A NamedElement with private visibility is only visible inside the Namespace that owns it.")
    private = 1;

    @GenModel(documentation="A NamedElement with protected visibility is visible to Elements that have a generalization relationship to the Namespace that owns it.")
    protected = 2;

    @GenModel(documentation="A NamedElement with package visibility is visible to all Elements within the nearest enclosing Package (given that other owning Elements have proper visibility). Outside the nearest enclosing Package, a NamedElement marked as having package visibility is not visible.  Only NamedElements that are not owned by Packages can be marked as having package visibility. ")
    ~package = 3;
  }

  @GenModel(documentation="A Constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an Element or set of Elements.
not constrainedElement->includes(self)")
  @Ecore(constraints="boolean_value no_side_effects not_apply_to_self")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(not_apply_to_self="not constrainedElement->includes(self)")
  class Constraint extends PackageableElement {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="constraint")
    @GenModel(documentation="The ordered set of Elements referenced by this Constraint.")
    ref Element[*] constrainedElement;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="owningConstraint")
    @GenModel(documentation="A condition that must be true when evaluated in order for the Constraint to be satisfied.")
    @subsets
    !ordered val values.ValueSpecification[1] specification;

    @GenModel(documentation="Specifies the Namespace that owns the Constraint.")
    @subsets
    !ordered ref Namespace#ownedRule context;
  }

  @GenModel(documentation="A PackageImport is a Relationship that imports all the non-private members of a Package into the Namespace owning the PackageImport, so that those Elements may be referred to by their unqualified names in the importingNamespace.
visibility = VisibilityKind::public or visibility = VisibilityKind::private")
  @Ecore(constraints="public_or_private")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(public_or_private="visibility = VisibilityKind::public or visibility = VisibilityKind::private")
  class PackageImport extends DirectedRelationship {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="packageImport")
    @GenModel(documentation="Specifies the Package whose members are imported into a Namespace.")
    @subsets
    !ordered ref packages.Package[1] importedPackage;

    @GenModel(documentation="Specifies the visibility of the imported PackageableElements within the importingNamespace, i.e., whether imported Elements will in turn be visible to other Namespaces. If the PackageImport is public, the imported Elements will be visible outside the importingNamespace, while, if the PackageImport is private, they will not.")
    !ordered attr VisibilityKind[1] visibility = "public";

    @GenModel(documentation="Specifies the Namespace that imports the members from a Package.")
    @subsets
    !ordered ref Namespace[1]#packageImport importingNamespace;
  }

  @GenModel(documentation="A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound. A MultiplicityElement embeds this information to specify the allowable cardinalities for an instantiation of the Element.
upperBound() >= lowerBound()
lowerBound() >= 0
lowerValue <> null implies lowerValue.integerValue() <> null
upperValue <> null implies upperValue.unlimitedValue() <> null")
  @Ecore(constraints="upper_ge_lower lower_ge_0 value_specification_no_side_effects value_specification_constant lower_is_integer upper_is_unlimitedNatural")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(upper_ge_lower="upperBound() >= lowerBound()", lower_ge_0="lowerBound() >= 0", lower_is_integer="lowerValue <> null implies lowerValue.integerValue() <> null", upper_is_unlimitedNatural="upperValue <> null implies upperValue.unlimitedValue() <> null")
  abstract class MultiplicityElement extends Element {

    @GenModel(documentation="The operation compatibleWith takes another multiplicity as input. It returns true if the other multiplicity is wider than, or the same as, self.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="(other.lowerBound() <= self.lowerBound()) and ((other.upperBound() = *) or (self.upperBound() <= other.upperBound()))")
    !ordered op types.Boolean[1] compatibleWith(!ordered MultiplicityElement[1] other);

    @GenModel(documentation="The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="(self.lowerBound() <= M.lowerBound()) and (self.upperBound() >= M.upperBound())")
    !ordered op types.Boolean[1] includesMultiplicity(@"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="M")
!ordered MultiplicityElement[1] m);

    @GenModel(documentation="The operation is determines if the upper and lower bound of the ranges are the ones given.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="lowerbound = self.lowerBound() and upperbound = self.upperBound()")
    !ordered op types.Boolean[1] is(!ordered types.Integer[1] lowerbound, !ordered types.UnlimitedNatural[1] upperbound);

    @GenModel(documentation="The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="upperBound() > 1")
    !ordered op types.Boolean[1] isMultivalued();

    @GenModel(documentation="The derived lower attribute must equal the lowerBound.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="lowerBound()")
    !ordered op types.Integer lower();

    @GenModel(documentation="The query lowerBound() returns the lower bound of the multiplicity as an integer, which is the integerValue of lowerValue, if this is given, and 1 otherwise.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if (lowerValue=null or lowerValue.integerValue()=null) then 1 else lowerValue.integerValue() endif")
    !ordered op types.Integer lowerBound();

    @GenModel(documentation="The derived upper attribute must equal the upperBound.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="upperBound()")
    !ordered op types.UnlimitedNatural upper();

    @GenModel(documentation="The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural, which is the unlimitedNaturalValue of upperValue, if given, and 1, otherwise.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if (upperValue=null or upperValue.unlimitedValue()=null) then 1 else upperValue.unlimitedValue() endif")
    !ordered op types.UnlimitedNatural[1] upperBound();

    @GenModel(documentation="For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this MultiplicityElement are sequentially ordered.")
    !ordered attr types.Boolean[1] isOrdered = "false";

    @GenModel(documentation="For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this MultiplicityElement are unique.")
    !ordered attr types.Boolean[1] isUnique = "true";

    @GenModel(documentation="The lower bound of the multiplicity interval.")
    !ordered volatile transient derived attr types.Integer lower;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="owningLower")
    @GenModel(documentation="The specification of the lower bound for this multiplicity.")
    @subsets
    !ordered val values.ValueSpecification lowerValue;

    @GenModel(documentation="The upper bound of the multiplicity interval.")
    !ordered volatile transient derived attr types.UnlimitedNatural[1] upper;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="owningUpper")
    @GenModel(documentation="The specification of the upper bound for this multiplicity.")
    @subsets
    !ordered val values.ValueSpecification upperValue;
  }

  @GenModel(documentation="A ParameterableElement is an Element that can be exposed as a formal TemplateParameter for a template, or specified as an actual parameter in a binding of a template.")
  abstract class ParameterableElement extends Element {

    @GenModel(documentation="The query isCompatibleWith() determines if this ParameterableElement is compatible with the specified ParameterableElement. By default, this ParameterableElement is compatible with another ParameterableElement p if the kind of this ParameterableElement is the same as or a subtype of the kind of p. Subclasses of ParameterableElement should override this operation to specify different compatibility constraints.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="self.oclIsKindOf(p.oclType())")
    !ordered op types.Boolean[1] isCompatibleWith(!ordered ParameterableElement[1] p);

    @GenModel(documentation="The query isTemplateParameter() determines if this ParameterableElement is exposed as a formal TemplateParameter.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="templateParameter->notEmpty()")
    !ordered op types.Boolean[1] isTemplateParameter();

    @GenModel(documentation="The formal TemplateParameter that owns this ParameterableElement.")
    @subsets
    !ordered ref TemplateParameter#ownedParameteredElement owningTemplateParameter;

    @GenModel(documentation="The TemplateParameter that exposes this ParameterableElement as a formal parameter.")
    !ordered ref TemplateParameter#parameteredElement templateParameter;
  }

  @GenModel(documentation="A TemplateParameter exposes a ParameterableElement as a formal parameter of a template.
default <> null implies default.isCompatibleWith(parameteredElement)")
  @Ecore(constraints="must_be_compatible")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(must_be_compatible="default <> null implies default.isCompatibleWith(parameteredElement)")
  class TemplateParameter extends Element {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="templateParameter")
    @GenModel(documentation="The ParameterableElement that is the default for this formal TemplateParameter.")
    !ordered ref ParameterableElement default;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="templateParameter")
    @GenModel(documentation="The ParameterableElement that is owned by this TemplateParameter for the purpose of providing a default.")
    @subsets
    !ordered val ParameterableElement ownedDefault;

    @GenModel(documentation="The ParameterableElement exposed by this TemplateParameter.")
    !ordered ref ParameterableElement[1]#templateParameter parameteredElement;

    @GenModel(documentation="The TemplateSignature that owns this TemplateParameter.")
    @subsets
    !ordered ref TemplateSignature[1]#ownedParameter signature;

    @GenModel(documentation="The ParameterableElement that is owned by this TemplateParameter for the purpose of exposing it as the parameteredElement.")
    @subsets
    !ordered val ParameterableElement#owningTemplateParameter ownedParameteredElement;
  }

  @GenModel(documentation="A Template Signature bundles the set of formal TemplateParameters for a template.
template.ownedElement->includesAll(parameter.parameteredElement->asSet() - parameter.ownedParameteredElement->asSet())
parameter->forAll( p1, p2 | (p1 <> p2 and p1.parameteredElement.oclIsKindOf(NamedElement) and p2.parameteredElement.oclIsKindOf(NamedElement) ) implies
   p1.parameteredElement.oclAsType(NamedElement).name <> p2.parameteredElement.oclAsType(NamedElement).name)")
  @Ecore(constraints="own_elements unique_parameters")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(own_elements="template.ownedElement->includesAll(parameter.parameteredElement->asSet() - parameter.ownedParameteredElement->asSet())", unique_parameters="parameter->forAll( p1, p2 | (p1 <> p2 and p1.parameteredElement.oclIsKindOf(NamedElement) and p2.parameteredElement.oclIsKindOf(NamedElement) ) implies
   p1.parameteredElement.oclAsType(NamedElement).name <> p2.parameteredElement.oclAsType(NamedElement).name)")
  class TemplateSignature extends Element {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="templateSignature")
    @GenModel(documentation="The ordered set of all formal TemplateParameters for this TemplateSignature.")
    ref TemplateParameter[+] parameter;

    @GenModel(documentation="The TemplateableElement that owns this TemplateSignature.")
    @subsets
    !ordered ref TemplateableElement[1]#ownedTemplateSignature template;

    @GenModel(documentation="The formal parameters that are owned by this TemplateSignature.")
    @subsets
    val TemplateParameter[*]#signature ownedParameter;
  }

  @GenModel(documentation="A TemplateableElement is an Element that can optionally be defined as a template and bound to other templates.")
  abstract class TemplateableElement extends Element {

    @GenModel(documentation="The query isTemplate() returns whether this TemplateableElement is actually a template.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="ownedTemplateSignature <> null")
    !ordered op types.Boolean[1] isTemplate();

    @GenModel(documentation="The query parameterableElements() returns the set of ParameterableElements that may be used as the parameteredElements for a TemplateParameter of this TemplateableElement. By default, this set includes all the ownedElements. Subclasses may override this operation if they choose to restrict the set of ParameterableElements.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="self.allOwnedElements()->select(oclIsKindOf(ParameterableElement)).oclAsType(ParameterableElement)->asSet()")
    !ordered op ParameterableElement[*] parameterableElements();

    @GenModel(documentation="The optional TemplateBindings from this TemplateableElement to one or more templates.")
    @subsets
    !ordered val TemplateBinding[*]#boundElement templateBinding;

    @GenModel(documentation="The optional TemplateSignature specifying the formal TemplateParameters for this TemplateableElement. If a TemplateableElement has a TemplateSignature, then it is a template.")
    @subsets
    !ordered val TemplateSignature#template ownedTemplateSignature;
  }

  @GenModel(documentation="A TemplateBinding is a DirectedRelationship between a TemplateableElement and a template. A TemplateBinding specifies the TemplateParameterSubstitutions of actual parameters for the formal parameters of the template.
parameterSubstitution->forAll(b | signature.parameter->includes(b.formal))
signature.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() <= 1)")
  @Ecore(constraints="parameter_substitution_formal one_parameter_substitution")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(parameter_substitution_formal="parameterSubstitution->forAll(b | signature.parameter->includes(b.formal))", one_parameter_substitution="signature.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() <= 1)")
  class TemplateBinding extends DirectedRelationship {

    @GenModel(documentation="The TemplateParameterSubstitutions owned by this TemplateBinding.")
    @subsets
    !ordered val TemplateParameterSubstitution[*]#templateBinding parameterSubstitution;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="templateBinding")
    @GenModel(documentation="The TemplateSignature for the template that is the target of this TemplateBinding.")
    @subsets
    !ordered ref TemplateSignature[1] signature;

    @GenModel(documentation="The TemplateableElement that is bound by this TemplateBinding.")
    @subsets
    !ordered ref TemplateableElement[1]#templateBinding boundElement;
  }

  @GenModel(documentation="A TemplateParameterSubstitution relates the actual parameter to a formal TemplateParameter as part of a template binding.
actual->forAll(a | a.isCompatibleWith(formal.parameteredElement))")
  @Ecore(constraints="must_be_compatible")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(must_be_compatible="actual->forAll(a | a.isCompatibleWith(formal.parameteredElement))")
  class TemplateParameterSubstitution extends Element {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="templateParameterSubstitution")
    @GenModel(documentation="The ParameterableElement that is the actual parameter for this TemplateParameterSubstitution.")
    !ordered ref ParameterableElement[1] actual;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="templateParameterSubstitution")
    @GenModel(documentation="The formal TemplateParameter that is associated with this TemplateParameterSubstitution.")
    !ordered ref TemplateParameter[1] formal;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="owningTemplateParameterSubstitution")
    @GenModel(documentation="The ParameterableElement that is owned by this TemplateParameterSubstitution as its actual parameter.")
    @subsets
    !ordered val ParameterableElement ownedActual;

    @GenModel(documentation="The TemplateBinding that owns this TemplateParameterSubstitution.")
    @subsets
    !ordered ref TemplateBinding[1]#parameterSubstitution templateBinding;
  }

  @GenModel(documentation="A Usage is a Dependency in which the client Element requires the supplier Element (or set of Elements) for its full implementation or operation.")
  class Usage extends Dependency {
  }

  @GenModel(documentation="A PackageableElement is a NamedElement that may be owned directly by a Package. A PackageableElement is also able to serve as the parameteredElement of a TemplateParameter.
visibility = null implies namespace = null")
  @Ecore(constraints="namespace_needs_visibility")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(namespace_needs_visibility="visibility = null implies namespace = null")
  @duplicates
  abstract class PackageableElement extends NamedElement, ParameterableElement {
  }

}

@"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="Values")
@Ecore(validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL", invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL")
@namespace(uri="http:///uml/values.ecore", prefix="uml.values")
package values {
  @GenModel(documentation="A Duration is a ValueSpecification that specifies the temporal distance between two time instants.
expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(DurationObservation)))")
  @Ecore(constraints="no_expr_requires_observation")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(no_expr_requires_observation="expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(DurationObservation)))")
  class Duration extends ValueSpecification {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="duration")
    @GenModel(documentation="A ValueSpecification that evaluates to the value of the Duration.")
    @subsets
    !ordered val ValueSpecification expr;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="duration")
    @GenModel(documentation="Refers to the Observations that are involved in the computation of the Duration value")
    !ordered ref Observation[*] observation;
  }

  @GenModel(documentation="A ValueSpecification is the specification of a (possibly empty) set of values. A ValueSpecification is a ParameterableElement that may be exposed as a formal TemplateParameter and provided as the actual parameter in the binding of a template.")
  @duplicates
  abstract class ValueSpecification extends commonStructure.PackageableElement, commonStructure.TypedElement {

    @GenModel(documentation="The query booleanValue() gives a single Boolean value when one can be computed.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="null")
    !ordered op types.Boolean booleanValue();

    @GenModel(documentation="The query integerValue() gives a single Integer value when one can be computed.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="null")
    !ordered op types.Integer integerValue();

    @GenModel(documentation="The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all ValueSpecifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute at least the value of all LiteralSpecifications.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="false")
    !ordered op types.Boolean[1] isComputable();

    @GenModel(documentation="The query isNull() returns true when it can be computed that the value is null.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="false")
    !ordered op types.Boolean[1] isNull();

    @GenModel(documentation="The query realValue() gives a single Real value when one can be computed.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="null")
    !ordered op types.Real realValue();

    @GenModel(documentation="The query stringValue() gives a single String value when one can be computed.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="null")
    !ordered op types.String stringValue();

    @GenModel(documentation="The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="null")
    !ordered op types.UnlimitedNatural unlimitedValue();
  }

  @GenModel(documentation="Observation specifies a value determined by observing an event or events that occur relative to other model Elements.")
  abstract class Observation extends commonStructure.PackageableElement {
  }

  @GenModel(documentation="A DurationConstraint is a Constraint that refers to a DurationInterval.
if (constrainedElement->size() = 2)
  then (firstEvent->size() = 2) else (firstEvent->size() = 0) 
endif
constrainedElement->size() = 1 or constrainedElement->size()=2")
  @Ecore(constraints="first_event_multiplicity has_one_or_two_constrainedElements")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(first_event_multiplicity="if (constrainedElement->size() = 2)
  then (firstEvent->size() = 2) else (firstEvent->size() = 0) 
endif", has_one_or_two_constrainedElements="constrainedElement->size() = 1 or constrainedElement->size()=2")
  @duplicates
  class DurationConstraint extends IntervalConstraint {

    @GenModel(documentation="The value of firstEvent[i] is related to constrainedElement[i] (where i is 1 or 2). If firstEvent[i] is true, then the corresponding observation event is the first time instant the execution enters constrainedElement[i]. If firstEvent[i] is false, then the corresponding observation event is the last time instant the execution is within constrainedElement[i].")
    !ordered attr types.Boolean[0..2] firstEvent;
  }

  @GenModel(documentation="An IntervalConstraint is a Constraint that is specified by an Interval.")
  @duplicates
  class IntervalConstraint extends commonStructure.Constraint {
  }

  @GenModel(documentation="An Interval defines the range between two ValueSpecifications.")
  class Interval extends ValueSpecification {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="interval")
    @GenModel(documentation="Refers to the ValueSpecification denoting the maximum value of the range.")
    !ordered ref ValueSpecification[1] max;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="interval")
    @GenModel(documentation="Refers to the ValueSpecification denoting the minimum value of the range.")
    !ordered ref ValueSpecification[1] min;
  }

  @GenModel(documentation="A DurationInterval defines the range between two Durations.")
  @duplicates
  class DurationInterval extends Interval {
  }

  @GenModel(documentation="A DurationObservation is a reference to a duration during an execution. It points out the NamedElement(s) in the model to observe and whether the observations are when this NamedElement is entered or when it is exited.
if (event->size() = 2)
  then (firstEvent->size() = 2) else (firstEvent->size() = 0)
endif")
  @Ecore(constraints="first_event_multiplicity")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(first_event_multiplicity="if (event->size() = 2)
  then (firstEvent->size() = 2) else (firstEvent->size() = 0)
endif")
  class DurationObservation extends Observation {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="durationObservation")
    @GenModel(documentation="The DurationObservation is determined as the duration between the entering or exiting of a single event Element during execution, or the entering/exiting of one event Element and the entering/exiting of a second.")
    ref commonStructure.NamedElement[1..2] event;

    @GenModel(documentation="The value of firstEvent[i] is related to event[i] (where i is 1 or 2). If firstEvent[i] is true, then the corresponding observation event is the first time instant the execution enters event[i]. If firstEvent[i] is false, then the corresponding observation event is the time instant the execution exits event[i].")
    !ordered attr types.Boolean[0..2] firstEvent;
  }

  @GenModel(documentation="An Expression represents a node in an expression tree, which may be non-terminal or terminal. It defines a symbol, and has a possibly empty sequence of operands that are ValueSpecifications. It denotes a (possibly empty) set of values when evaluated in a context.")
  class Expression extends ValueSpecification {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="expression")
    @GenModel(documentation="Specifies a sequence of operand ValueSpecifications.")
    @subsets
    val ValueSpecification[*] operand;

    @GenModel(documentation="The symbol associated with this node in the expression tree.")
    !ordered attr types.String symbol;
  }

  @GenModel(documentation="A LiteralBoolean is a specification of a Boolean value.")
  @duplicates
  class LiteralBoolean extends LiteralSpecification {

    @GenModel(documentation="The specified Boolean value.")
    !ordered attr types.Boolean[1] value = "false";
  }

  @GenModel(documentation="A LiteralSpecification identifies a literal constant being modeled.")
  abstract class LiteralSpecification extends ValueSpecification {
  }

  @GenModel(documentation="A LiteralInteger is a specification of an Integer value.")
  @duplicates
  class LiteralInteger extends LiteralSpecification {

    @GenModel(documentation="The specified Integer value.")
    !ordered attr types.Integer[1] value = "0";
  }

  @GenModel(documentation="A LiteralNull specifies the lack of a value.")
  @duplicates
  class LiteralNull extends LiteralSpecification {
  }

  @GenModel(documentation="A LiteralReal is a specification of a Real value.")
  @duplicates
  class LiteralReal extends LiteralSpecification {

    @GenModel(documentation="The specified Real value.")
    !ordered attr types.Real[1] value;
  }

  @GenModel(documentation="A LiteralString is a specification of a String value.")
  @duplicates
  class LiteralString extends LiteralSpecification {

    @GenModel(documentation="The specified String value.")
    !ordered attr types.String value;
  }

  @GenModel(documentation="A LiteralUnlimitedNatural is a specification of an UnlimitedNatural number.")
  @duplicates
  class LiteralUnlimitedNatural extends LiteralSpecification {

    @GenModel(documentation="The specified UnlimitedNatural value.")
    !ordered attr types.UnlimitedNatural[1] value = "0";
  }

  @GenModel(documentation="An OpaqueExpression is a ValueSpecification that specifies the computation of a collection of values either in terms of a UML Behavior or based on a textual statement in a language other than UML
language->notEmpty() implies (_'body'->size() = language->size())
behavior <> null implies
   behavior.ownedParameter->select(direction=ParameterDirectionKind::return)->size() = 1
behavior <> null implies behavior.ownedParameter->select(direction<>ParameterDirectionKind::return)->isEmpty()")
  @Ecore(constraints="language_body_size one_return_result_parameter only_return_result_parameters")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(language_body_size="language->notEmpty() implies (_'body'->size() = language->size())", one_return_result_parameter="behavior <> null implies
   behavior.ownedParameter->select(direction=ParameterDirectionKind::return)->size() = 1", only_return_result_parameters="behavior <> null implies behavior.ownedParameter->select(direction<>ParameterDirectionKind::return)->isEmpty()")
  class OpaqueExpression extends ValueSpecification {

    @GenModel(documentation="The query isIntegral() tells whether an expression is intended to produce an Integer.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="false")
    !ordered op types.Boolean[1] isIntegral();

    @GenModel(documentation="The query isNonNegative() tells whether an integer expression has a non-negative value.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="false")
    !ordered op types.Boolean[1] isNonNegative();

    @GenModel(documentation="The query isPositive() tells whether an integer expression has a positive value.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="false")
    !ordered op types.Boolean[1] isPositive();

    @GenModel(documentation="Derivation for OpaqueExpression::/result ")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if behavior = null then
	null
else
	behavior.ownedParameter->first()
endif")
    !ordered op classification.Parameter result();

    @GenModel(documentation="The query value() gives an integer value for an expression intended to produce one.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="0")
    !ordered op types.Integer[1] value();

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="opaqueExpression")
    @GenModel(documentation="Specifies the behavior of the OpaqueExpression as a UML Behavior.")
    !ordered ref commonBehavior.Behavior behavior;

    @GenModel(documentation="A textual definition of the behavior of the OpaqueExpression, possibly in multiple languages.")
    !unique attr types.String[*] body;

    @GenModel(documentation="Specifies the languages used to express the textual bodies of the OpaqueExpression.  Languages are matched to body Strings by order. The interpretation of the body depends on the languages. If the languages are unspecified, they may be implicit from the expression body or the context.")
    attr types.String[*] language;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="opaqueExpression")
    @GenModel(documentation="If an OpaqueExpression is specified using a UML Behavior, then this refers to the single required return Parameter of that Behavior. When the Behavior completes execution, the values on this Parameter give the result of evaluating the OpaqueExpression.")
    !ordered readonly volatile transient derived ref classification.Parameter result;
  }

  @GenModel(documentation="A TimeConstraint is a Constraint that refers to a TimeInterval.
constrainedElement->size() = 1")
  @Ecore(constraints="has_one_constrainedElement")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(has_one_constrainedElement="constrainedElement->size() = 1")
  @duplicates
  class TimeConstraint extends IntervalConstraint {

    @GenModel(documentation="The value of firstEvent is related to the constrainedElement. If firstEvent is true, then the corresponding observation event is the first time instant the execution enters the constrainedElement. If firstEvent is false, then the corresponding observation event is the last time instant the execution is within the constrainedElement.")
    !ordered attr types.Boolean firstEvent = "true";
  }

  @GenModel(documentation="A TimeInterval defines the range between two TimeExpressions.")
  @duplicates
  class TimeInterval extends Interval {
  }

  @GenModel(documentation="A TimeExpression is a ValueSpecification that represents a time value.
expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(TimeObservation)))")
  @Ecore(constraints="no_expr_requires_observation")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(no_expr_requires_observation="expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(TimeObservation)))")
  class TimeExpression extends ValueSpecification {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="timeExpression")
    @GenModel(documentation="A ValueSpecification that evaluates to the value of the TimeExpression.")
    @subsets
    !ordered val ValueSpecification expr;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="timeExpression")
    @GenModel(documentation="Refers to the Observations that are involved in the computation of the TimeExpression value.")
    !ordered ref Observation[*] observation;
  }

  @GenModel(documentation="A TimeObservation is a reference to a time instant during an execution. It points out the NamedElement in the model to observe and whether the observation is when this NamedElement is entered or when it is exited.")
  class TimeObservation extends Observation {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="timeObservation")
    @GenModel(documentation="The TimeObservation is determined by the entering or exiting of the event Element during execution.")
    !ordered ref commonStructure.NamedElement[1] event;

    @GenModel(documentation="The value of firstEvent is related to the event. If firstEvent is true, then the corresponding observation event is the first time instant the execution enters the event Element. If firstEvent is false, then the corresponding observation event is the time instant the execution exits the event Element.")
    !ordered attr types.Boolean[1] firstEvent = "true";
  }

  @GenModel(documentation="A StringExpression is an Expression that specifies a String value that is derived by concatenating a sequence of operands with String values or a sequence of subExpressions, some of which might be template parameters.
operand->forAll (oclIsKindOf (LiteralString))
if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty() endif")
  @Ecore(constraints="operands subexpressions")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(operands="operand->forAll (oclIsKindOf (LiteralString))", subexpressions="if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty() endif")
  @duplicates
  class StringExpression extends Expression, commonStructure.TemplateableElement {

    @GenModel(documentation="The StringExpression of which this StringExpression is a subExpression.")
    @subsets
    !ordered ref StringExpression#subExpression owningExpression;

    @GenModel(documentation="The StringExpressions that constitute this StringExpression.")
    @subsets
    val StringExpression[*]#owningExpression subExpression;
  }

}

@"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="Packages")
@Ecore(validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL", invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL")
@namespace(uri="http:///uml/packages.ecore", prefix="uml.packages")
package packages {
  @GenModel(documentation="An extension is used to indicate that the properties of a metaclass are extended through a stereotype, and gives the ability to flexibly add (and later remove) stereotypes to classes.
metaclassEnd()->notEmpty() and metaclassEnd().type.oclIsKindOf(Class)
memberEnd->size() = 2")
  @Ecore(constraints="non_owned_end is_binary")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(non_owned_end="metaclassEnd()->notEmpty() and metaclassEnd().type.oclIsKindOf(Class)", is_binary="memberEnd->size() = 2")
  @duplicates
  class Extension extends structuredClassifiers.Association {

    @GenModel(documentation="The query isRequired() is true if the owned end has a multiplicity with the lower bound of 1.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="ownedEnd.lowerBound() = 1")
    !ordered op types.Boolean[1] isRequired();

    @GenModel(documentation="The query metaclass() returns the metaclass that is being extended (as opposed to the extending stereotype).")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="metaclassEnd().type.oclAsType(Class)")
    !ordered op structuredClassifiers.Class[1] metaclass();

    @GenModel(documentation="The query metaclassEnd() returns the Property that is typed by a metaclass (as opposed to a stereotype).")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="memberEnd->reject(p | ownedEnd->includes(p.oclAsType(ExtensionEnd)))->any(true)")
    !ordered op classification.Property[1] metaclassEnd();

    @GenModel(documentation="References the Class that is extended through an Extension. The property is derived from the type of the memberEnd that is not the ownedEnd.")
    !ordered readonly volatile transient derived ref structuredClassifiers.Class[1]#extension metaclass;

    @GenModel(documentation="Indicates whether an instance of the extending stereotype must be created when an instance of the extended class is created. The attribute value is derived from the value of the lower property of the ExtensionEnd referenced by Extension::ownedEnd; a lower value of 1 means that isRequired is true, but otherwise it is false. Since the default value of ExtensionEnd::lower is 0, the default value of isRequired is false.")
    !ordered readonly volatile transient derived attr types.Boolean[1] isRequired;
  }

  @GenModel(documentation="An extension end is used to tie an extension to a stereotype when extending a metaclass.
The default multiplicity of an extension end is 0..1.
(lowerBound() = 0 or lowerBound() = 1) and upperBound() = 1
self.aggregation = AggregationKind::composite")
  @Ecore(constraints="multiplicity aggregation")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(multiplicity="(lowerBound() = 0 or lowerBound() = 1) and upperBound() = 1", aggregation="self.aggregation = AggregationKind::composite")
  @duplicates
  class ExtensionEnd extends classification.Property {
  }

  @GenModel(documentation="A stereotype defines how an existing metaclass may be extended, and enables the use of platform or domain specific terminology or notation in place of, or in addition to, the ones used for the extended metaclass.
ownedAttribute.association->forAll(memberEnd->size()=2)
allParents()->forAll(oclIsKindOf(Stereotype)) 
and Classifier.allInstances()->forAll(c | c.allParents()->exists(oclIsKindOf(Stereotype)) implies c.oclIsKindOf(Stereotype))

ownedAttribute
->select(association->notEmpty() and not association.oclIsKindOf(Extension) and not type.oclIsKindOf(Stereotype))
->forAll(opposite.owner = association)")
  @Ecore(constraints="binaryAssociationsOnly generalize name_not_clash associationEndOwnership base_property_upper_bound base_property_multiplicity_single_extension base_property_multiplicity_multiple_extension")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(binaryAssociationsOnly="ownedAttribute.association->forAll(memberEnd->size()=2)", generalize="allParents()->forAll(oclIsKindOf(Stereotype)) 
and Classifier.allInstances()->forAll(c | c.allParents()->exists(oclIsKindOf(Stereotype)) implies c.oclIsKindOf(Stereotype))
", associationEndOwnership="ownedAttribute
->select(association->notEmpty() and not association.oclIsKindOf(Extension) and not type.oclIsKindOf(Stereotype))
->forAll(opposite.owner = association)")
  class Stereotype extends structuredClassifiers.Class {

    @GenModel(documentation="The query containingProfile returns the closest profile directly or indirectly containing this stereotype.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="self.namespace.oclAsType(Package).containingProfile()")
    !ordered op Profile[1] containingProfile();

    @GenModel(documentation="A stereotype must be contained, directly or indirectly, in a profile.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="self.containingProfile()")
    !ordered op Profile[1] profile();

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="stereotype")
    @GenModel(documentation="Stereotype can change the graphical appearance of the extended model element by using attached icons. When this association is not null, it references the location of the icon content to be displayed within diagrams presenting the extended model elements.")
    @subsets
    !ordered val Image[*] icon;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="stereotype")
    @GenModel(documentation="The profile that directly or indirectly contains this stereotype.")
    !ordered readonly volatile transient derived ref Profile[1] profile;
  }

  @GenModel(documentation="Physical definition of a graphical image.")
  class Image extends commonStructure.Element {

    @GenModel(documentation="This contains the serialization of the image according to the format. The value could represent a bitmap, image such as a GIF file, or drawing 'instructions' using a standard such as Scalable Vector Graphic (SVG) (which is XML based).")
    !ordered attr types.String content;

    @GenModel(documentation="This indicates the format of the content, which is how the string content should be interpreted. The following values are reserved: SVG, GIF, PNG, JPG, WMF, EMF, BMP. In addition the prefix 'MIME: ' is also reserved. This option can be used as an alternative to express the reserved values above, for example \"SVG\" could instead be expressed as \"MIME: image/svg+xml\".")
    !ordered attr types.String format;

    @GenModel(documentation="This contains a location that can be used by a tool to locate the image as an alternative to embedding it in the stereotype.")
    !ordered attr types.String location;
  }

  @GenModel(documentation="A profile defines limited extensions to a reference metamodel with the purpose of adapting the metamodel to a specific platform or domain.
metaclassReference.importedElement->
	select(c | c.oclIsKindOf(Classifier) and
		(c.oclAsType(Classifier).allParents()->collect(namespace)->includes(self)))->isEmpty()
and 
packagedElement->
    select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier).allParents())->
       intersection(metaclassReference.importedElement->select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier)))->isEmpty()
metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages()->
  union(metaclassReference.importedElement.allOwningPackages() )->notEmpty()")
  @Ecore(constraints="metaclass_reference_not_specialized references_same_metamodel")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(metaclass_reference_not_specialized="metaclassReference.importedElement->
	select(c | c.oclIsKindOf(Classifier) and
		(c.oclAsType(Classifier).allParents()->collect(namespace)->includes(self)))->isEmpty()
and 
packagedElement->
    select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier).allParents())->
       intersection(metaclassReference.importedElement->select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier)))->isEmpty()", references_same_metamodel="metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages()->
  union(metaclassReference.importedElement.allOwningPackages() )->notEmpty()")
  class Profile extends Package {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="profile")
    @GenModel(documentation="References a metaclass that may be extended.")
    @subsets
    !ordered ref commonStructure.ElementImport[*] metaclassReference;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="profile")
    @GenModel(documentation="References a package containing (directly or indirectly) metaclasses that may be extended.")
    @subsets
    !ordered ref commonStructure.PackageImport[*] metamodelReference;
  }

  @GenModel(documentation="A model captures a view of a physical system. It is an abstraction of the physical system, with a certain purpose. This purpose determines what is to be included in the model and what is irrelevant. Thus the model completely describes those aspects of the physical system that are relevant to the purpose of the model, at the appropriate level of detail.")
  class Model extends Package {

    @GenModel(documentation="The name of the viewpoint that is expressed by a model (this name may refer to a profile definition).")
    !ordered attr types.String viewpoint;
  }

  @GenModel(documentation="A package merge defines how the contents of one package are extended by the contents of another package.")
  class PackageMerge extends commonStructure.DirectedRelationship {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="packageMerge")
    @GenModel(documentation="References the Package that is to be merged with the receiving package of the PackageMerge.")
    @subsets
    !ordered ref Package[1] mergedPackage;

    @GenModel(documentation="References the Package that is being extended with the contents of the merged package of the PackageMerge.")
    @subsets
    !ordered ref Package[1]#packageMerge receivingPackage;
  }

  @GenModel(documentation="A profile application is used to show which profiles have been applied to a package.")
  class ProfileApplication extends commonStructure.DirectedRelationship {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="profileApplication")
    @GenModel(documentation="References the Profiles that are applied to a Package through this ProfileApplication.")
    @subsets
    !ordered ref Profile[1] appliedProfile;

    @GenModel(documentation="The package that owns the profile application.")
    @subsets
    !ordered ref Package[1]#profileApplication applyingPackage;

    @GenModel(documentation="Specifies that the Profile filtering rules for the metaclasses of the referenced metamodel shall be strictly applied.")
    !ordered attr types.Boolean[1] isStrict = "false";
  }

  @GenModel(documentation="A package can have one or more profile applications to indicate which profiles have been applied. Because a profile is a package, it is possible to apply a profile not only to packages, but also to profiles.
Package specializes TemplateableElement and PackageableElement specializes ParameterableElement to specify that a package can be used as a template and a PackageableElement as a template parameter.
A package is used to group elements, and provides a namespace for the grouped elements.
packagedElement->forAll(e | e.visibility<> null implies e.visibility = VisibilityKind::public or e.visibility = VisibilityKind::private)")
  @Ecore(constraints="elements_public_or_private")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(elements_public_or_private="packagedElement->forAll(e | e.visibility<> null implies e.visibility = VisibilityKind::public or e.visibility = VisibilityKind::private)")
  @duplicates
  class Package extends commonStructure.Namespace, commonStructure.PackageableElement, commonStructure.TemplateableElement {

    @GenModel(documentation="The query allApplicableStereotypes() returns all the directly or indirectly owned stereotypes, including stereotypes contained in sub-profiles.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="let ownedPackages : Bag(Package) = ownedMember->select(oclIsKindOf(Package))->collect(oclAsType(Package)) in
 ownedStereotype->union(ownedPackages.allApplicableStereotypes())->flatten()->asSet()")
    !ordered op Stereotype[*] allApplicableStereotypes();

    @GenModel(documentation="The query containingProfile() returns the closest profile directly or indirectly containing this package (or this package itself, if it is a profile).")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if self.oclIsKindOf(Profile) then 
	self.oclAsType(Profile)
else
	self.namespace.oclAsType(Package).containingProfile()
endif")
    !ordered op Profile containingProfile();

    @GenModel(documentation="The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="ownedMember->includes(el) or
(elementImport->select(ei|ei.importedElement = VisibilityKind::public)->collect(importedElement.oclAsType(NamedElement))->includes(el)) or
(packageImport->select(visibility = VisibilityKind::public)->collect(importedPackage.member->includes(el))->notEmpty())")
    !ordered op types.Boolean[1] makesVisible(!ordered commonStructure.NamedElement[1] el);

    @GenModel(documentation="Derivation for Package::/nestedPackage ")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="packagedElement->select(oclIsKindOf(Package))->collect(oclAsType(Package))->asSet()")
    !ordered op Package[*] nestedPackage();

    @GenModel(documentation="Derivation for Package::/ownedStereotype ")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="packagedElement->select(oclIsKindOf(Stereotype))->collect(oclAsType(Stereotype))->asSet()")
    !ordered op Stereotype[*] ownedStereotype();

    @GenModel(documentation="Derivation for Package::/ownedType")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="packagedElement->select(oclIsKindOf(Type))->collect(oclAsType(Type))->asSet()")
    !ordered op commonStructure.Type[*] ownedType();

    @GenModel(documentation="The query visibleMembers() defines which members of a Package can be accessed outside it.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="member->select( m | m.oclIsKindOf(PackageableElement) and self.makesVisible(m))->collect(oclAsType(PackageableElement))->asSet()")
    !ordered op commonStructure.PackageableElement[*] visibleMembers();

    @GenModel(documentation="References the PackageMerges that are owned by this Package.")
    @subsets
    !ordered val PackageMerge[*]#receivingPackage packageMerge;

    @GenModel(documentation="References the ProfileApplications that indicate which profiles have been applied to the Package.")
    @subsets
    !ordered val ProfileApplication[*]#applyingPackage profileApplication;

    @"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="URI")
    @GenModel(documentation="Provides an identifier for the package that can be used for many purposes. A URI is the universally unique identification of the package following the IETF URI specification, RFC 2396 http://www.ietf.org/rfc/rfc2396.txt and it must comply with those syntax rules.")
    !ordered attr types.String uri;

    @GenModel(documentation="References the packaged elements that are Packages.")
    @subsets
    !ordered volatile transient derived ref Package[*]#nestingPackage nestedPackage;

    @GenModel(documentation="References the Package that owns this Package.")
    !ordered volatile transient derived ref Package#nestedPackage nestingPackage;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="owningPackage")
    @GenModel(documentation="References the Stereotypes that are owned by the Package.")
    @subsets
    !ordered readonly volatile transient derived ref Stereotype[*] ownedStereotype;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="owningPackage")
    @GenModel(documentation="Specifies the packageable elements that are owned by this Package.")
    @subsets
    !ordered val commonStructure.PackageableElement[*] packagedElement;

    @GenModel(documentation="References the packaged elements that are Types.")
    @subsets
    !ordered volatile transient derived ref commonStructure.Type[*]#~package ownedType;
  }

}

@"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="StructuredClassifiers")
@Ecore(validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL", invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL")
@namespace(uri="http:///uml/structuredClassifiers.ecore", prefix="uml.structuredClassifiers")
package structuredClassifiers {
  @GenModel(documentation="A model element that has both Association and Class properties. An AssociationClass can be seen as an Association that also has Class properties, or as a Class that also has Association properties. It not only connects a set of Classifiers but also defines a set of Features that belong to the Association itself and not to any of the associated Classifiers.
self.endType()->excludes(self) and self.endType()->collect(et|et.oclAsType(Classifier).allParents())->flatten()->excludes(self)
ownedAttribute->intersection(ownedEnd)->isEmpty()")
  @Ecore(constraints="cannot_be_defined disjoint_attributes_ends")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(cannot_be_defined="self.endType()->excludes(self) and self.endType()->collect(et|et.oclAsType(Classifier).allParents())->flatten()->excludes(self)", disjoint_attributes_ends="ownedAttribute->intersection(ownedEnd)->isEmpty()")
  class AssociationClass extends Class, Association {
  }

  @GenModel(documentation="A Class classifies a set of objects and specifies the features that characterize the structure and behavior of those objects.  A Class may have an internal structure and Ports.

not isActive implies (ownedReception->isEmpty() and classifierBehavior = null)")
  @Ecore(constraints="passive_class")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(passive_class="not isActive implies (ownedReception->isEmpty() and classifierBehavior = null)")
  @duplicates
  class Class extends EncapsulatedClassifier, simpleClassifiers.BehavioredClassifier {

    @GenModel(documentation="Derivation for Class::/extension : Extension")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="Extension.allInstances()->select(ext | 
  let endTypes : Sequence(Classifier) = ext.memberEnd->collect(type.oclAsType(Classifier)) in
  endTypes->includes(self) or endTypes.allParents()->includes(self) )")
    !ordered op packages.Extension[*] extension();

    @GenModel(documentation="Derivation for Class::/superClass : Class")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="self.general()->select(oclIsKindOf(Class))->collect(oclAsType(Class))->asSet()")
    !ordered op Class[*] superClass();

    @GenModel(documentation="The Operations owned by the Class.")
    @subsets
    val classification.Operation[*]#~class ownedOperation;

    @GenModel(documentation="This property is used when the Class is acting as a metaclass. It references the Extensions that specify additional properties of the metaclass. The property is derived from the Extensions whose memberEnds are typed by the Class.")
    !ordered readonly volatile transient derived ref packages.Extension[*]#metaclass extension;

    @GenModel(documentation="Determines whether an object specified by this Class is active or not. If true, then the owning Class is referred to as an active Class. If false, then such a Class is referred to as a passive Class.")
    !ordered attr types.Boolean[1] isActive = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="nestingClass")
    @GenModel(documentation="The Classifiers owned by the Class that are not ownedBehaviors.")
    @subsets
    val classification.Classifier[*] nestedClassifier;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="class")
    @GenModel(documentation="The Receptions owned by the Class.")
    @subsets
    !ordered val simpleClassifiers.Reception[*] ownedReception;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="class")
    @GenModel(documentation="The superclasses of a Class, derived from its Generalizations.")
    @redefines
    !ordered volatile transient derived ref Class[*] superClass;
  }

  @GenModel(documentation="ConnectableElement is an abstract metaclass representing a set of instances that play roles of a StructuredClassifier. ConnectableElements may be joined by attached Connectors and specify configurations of linked instances to be created within an instance of the containing StructuredClassifier.")
  @duplicates
  abstract class ConnectableElement extends commonStructure.TypedElement, commonStructure.ParameterableElement {

    @GenModel(documentation="Derivation for ConnectableElement::/end : ConnectorEnd")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="ConnectorEnd.allInstances()->select(role = self)")
    !ordered op ConnectorEnd[*] end();

    @GenModel(documentation="A set of ConnectorEnds that attach to this ConnectableElement.")
    !ordered readonly volatile transient derived ref ConnectorEnd[*]#role end;
  }

  @GenModel(documentation="A ConnectorEnd is an endpoint of a Connector, which attaches the Connector to a ConnectableElement.
partWithPort->notEmpty() implies 
  (role.oclIsKindOf(Port) and partWithPort.type.oclAsType(Namespace).member->includes(role))
(role.oclIsKindOf(Port) and role.owner = connector.owner) implies partWithPort->isEmpty()
self.compatibleWith(definingEnd)
partWithPort->notEmpty() implies not partWithPort.oclIsKindOf(Port)")
  @Ecore(constraints="role_and_part_with_port part_with_port_empty multiplicity self_part_with_port")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(role_and_part_with_port="partWithPort->notEmpty() implies 
  (role.oclIsKindOf(Port) and partWithPort.type.oclAsType(Namespace).member->includes(role))", part_with_port_empty="(role.oclIsKindOf(Port) and role.owner = connector.owner) implies partWithPort->isEmpty()", multiplicity="self.compatibleWith(definingEnd)", self_part_with_port="partWithPort->notEmpty() implies not partWithPort.oclIsKindOf(Port)")
  class ConnectorEnd extends commonStructure.MultiplicityElement {

    @GenModel(documentation="Derivation for ConnectorEnd::/definingEnd : Property")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if connector.type = null 
then
  null 
else
  let index : Integer = connector.end->indexOf(self) in
    connector.type.memberEnd->at(index)
endif")
    !ordered op classification.Property definingEnd();

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="connectorEnd")
    @GenModel(documentation="A derived property referencing the corresponding end on the Association which types the Connector owing this ConnectorEnd, if any. It is derived by selecting the end at the same place in the ordering of Association ends as this ConnectorEnd.")
    !ordered readonly volatile transient derived ref classification.Property definingEnd;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="connectorEnd")
    @GenModel(documentation="Indicates the role of the internal structure of a Classifier with the Port to which the ConnectorEnd is attached.")
    !ordered ref classification.Property partWithPort;

    @GenModel(documentation="The ConnectableElement attached at this ConnectorEnd. When an instance of the containing Classifier is created, a link may (depending on the multiplicities) be created to an instance of the Classifier that types this ConnectableElement.")
    !ordered volatile transient derived ref ConnectableElement[1]#end role;
  }

  @GenModel(documentation="A Port is a property of an EncapsulatedClassifier that specifies a distinct interaction point between that EncapsulatedClassifier and its environment or between the (behavior of the) EncapsulatedClassifier and its internal parts. Ports are connected to Properties of the EncapsulatedClassifier by Connectors through which requests can be made to invoke BehavioralFeatures. A Port may specify the services an EncapsulatedClassifier provides (offers) to its environment as well as the services that an EncapsulatedClassifier expects (requires) of its environment.  A Port may have an associated ProtocolStateMachine.
aggregation = AggregationKind::composite
type.oclIsKindOf(Interface) implies defaultValue->isEmpty()
owner = encapsulatedClassifier")
  @Ecore(constraints="port_aggregation default_value encapsulated_owner")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(port_aggregation="aggregation = AggregationKind::composite", default_value="type.oclIsKindOf(Interface) implies defaultValue->isEmpty()", encapsulated_owner="owner = encapsulatedClassifier")
  class Port extends classification.Property {

    @GenModel(documentation="Derivation for Port::/provided")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if isConjugated then basicRequired() else basicProvided() endif")
    !ordered op simpleClassifiers.Interface[*] provided();

    @GenModel(documentation="Derivation for Port::/required")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if isConjugated then basicProvided() else basicRequired() endif")
    !ordered op simpleClassifiers.Interface[*] required();

    @GenModel(documentation="The union of the sets of Interfaces realized by the type of the Port and its supertypes, or directly the type of the Port if the Port is typed by an Interface.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if type.oclIsKindOf(Interface) 
then type.oclAsType(Interface)->asSet() 
else type.oclAsType(Classifier).allRealizedInterfaces() 
endif")
    !ordered op simpleClassifiers.Interface[*] basicProvided();

    @GenModel(documentation="The union of the sets of Interfaces used by the type of the Port and its supertypes.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="type.oclAsType(Classifier).allUsedInterfaces()")
    !ordered op simpleClassifiers.Interface[*] basicRequired();

    @GenModel(documentation="Specifies whether requests arriving at this Port are sent to the classifier behavior of this EncapsulatedClassifier. Such a Port is referred to as a behavior Port. Any invocation of a BehavioralFeature targeted at a behavior Port will be handled by the instance of the owning EncapsulatedClassifier itself, rather than by any instances that it may contain.")
    !ordered attr types.Boolean[1] isBehavior = "false";

    @GenModel(documentation="Specifies the way that the provided and required Interfaces are derived from the Port’s Type.")
    !ordered attr types.Boolean[1] isConjugated = "false";

    @GenModel(documentation="If true, indicates that this Port is used to provide the published functionality of an EncapsulatedClassifier.  If false, this Port is used to implement the EncapsulatedClassifier but is not part of the essential externally-visible functionality of the EncapsulatedClassifier and can, therefore, be altered or deleted along with the internal implementation of the EncapsulatedClassifier and other properties that are considered part of its implementation.")
    !ordered attr types.Boolean[1] isService = "true";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="port")
    @GenModel(documentation="An optional ProtocolStateMachine which describes valid interactions at this interaction point.")
    !ordered ref stateMachines.ProtocolStateMachine protocol;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="port")
    @GenModel(documentation="The Interfaces specifying the set of Operations and Receptions that the EncapsulatedCclassifier offers to its environment via this Port, and which it will handle either directly or by forwarding it to a part of its internal structure. This association is derived according to the value of isConjugated. If isConjugated is false, provided is derived as the union of the sets of Interfaces realized by the type of the port and its supertypes, or directly from the type of the Port if the Port is typed by an Interface. If isConjugated is true, it is derived as the union of the sets of Interfaces used by the type of the Port and its supertypes.")
    !ordered readonly volatile transient derived ref simpleClassifiers.Interface[*] provided;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="port")
    @GenModel(documentation="A Port may be redefined when its containing EncapsulatedClassifier is specialized. The redefining Port may have additional Interfaces to those that are associated with the redefined Port or it may replace an Interface by one of its subtypes.")
    @subsets
    !ordered ref Port[*] redefinedPort;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="port")
    @GenModel(documentation="The Interfaces specifying the set of Operations and Receptions that the EncapsulatedCassifier expects its environment to handle via this port. This association is derived according to the value of isConjugated. If isConjugated is false, required is derived as the union of the sets of Interfaces used by the type of the Port and its supertypes. If isConjugated is true, it is derived as the union of the sets of Interfaces realized by the type of the Port and its supertypes, or directly from the type of the Port if the Port is typed by an Interface.")
    !ordered readonly volatile transient derived ref simpleClassifiers.Interface[*] required;
  }

  @GenModel(documentation="A ConnectableElementTemplateParameter exposes a ConnectableElement as a formal parameter for a template.")
  @duplicates
  class ConnectableElementTemplateParameter extends commonStructure.TemplateParameter {
  }

  @GenModel(documentation="A CollaborationUse is used to specify the application of a pattern specified by a Collaboration to a specific situation.
roleBinding->collect(client)->forAll(ne1, ne2 |
  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and
    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in
      ce1.structuredClassifier = ce2.structuredClassifier)
and
  roleBinding->collect(supplier)->forAll(ne1, ne2 |
  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and
    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in
      ce1.collaboration = ce2.collaboration)
type.collaborationRole->forAll(role | roleBinding->exists(rb | rb.supplier->includes(role)))
type.ownedConnector->forAll(connector |
  let rolesConnectedInCollab : Set(ConnectableElement) = connector.end.role->asSet(),
        relevantBindings : Set(Dependency) = roleBinding->select(rb | rb.supplier->intersection(rolesConnectedInCollab)->notEmpty()),
        boundRoles : Set(ConnectableElement) = relevantBindings->collect(client.oclAsType(ConnectableElement))->asSet(),
        contextClassifier : StructuredClassifier = boundRoles->any(true).structuredClassifier->any(true) in
          contextClassifier.ownedConnector->exists( correspondingConnector | 
              correspondingConnector.end.role->forAll( role | boundRoles->includes(role) )
              and (connector.type->notEmpty() and correspondingConnector.type->notEmpty()) implies connector.type->forAll(conformsTo(correspondingConnector.type)) )
)")
  @Ecore(constraints="client_elements every_role connectors")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(client_elements="roleBinding->collect(client)->forAll(ne1, ne2 |
  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and
    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in
      ce1.structuredClassifier = ce2.structuredClassifier)
and
  roleBinding->collect(supplier)->forAll(ne1, ne2 |
  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and
    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in
      ce1.collaboration = ce2.collaboration)", every_role="type.collaborationRole->forAll(role | roleBinding->exists(rb | rb.supplier->includes(role)))", connectors="type.ownedConnector->forAll(connector |
  let rolesConnectedInCollab : Set(ConnectableElement) = connector.end.role->asSet(),
        relevantBindings : Set(Dependency) = roleBinding->select(rb | rb.supplier->intersection(rolesConnectedInCollab)->notEmpty()),
        boundRoles : Set(ConnectableElement) = relevantBindings->collect(client.oclAsType(ConnectableElement))->asSet(),
        contextClassifier : StructuredClassifier = boundRoles->any(true).structuredClassifier->any(true) in
          contextClassifier.ownedConnector->exists( correspondingConnector | 
              correspondingConnector.end.role->forAll( role | boundRoles->includes(role) )
              and (connector.type->notEmpty() and correspondingConnector.type->notEmpty()) implies connector.type->forAll(conformsTo(correspondingConnector.type)) )
)")
  class CollaborationUse extends commonStructure.NamedElement {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="collaborationUse")
    @GenModel(documentation="A mapping between features of the Collaboration and features of the owning Classifier. This mapping indicates which ConnectableElement of the Classifier plays which role(s) in the Collaboration. A ConnectableElement may be bound to multiple roles in the same CollaborationUse (that is, it may play multiple roles).")
    @subsets
    !ordered val commonStructure.Dependency[*] roleBinding;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="collaborationUse")
    @GenModel(documentation="The Collaboration which is used in this CollaborationUse. The Collaboration defines the cooperation between its roles which are mapped to ConnectableElements relating to the Classifier owning the CollaborationUse.")
    !ordered ref Collaboration[1] type;
  }

  @GenModel(documentation="A Collaboration describes a structure of collaborating elements (roles), each performing a specialized function, which collectively accomplish some desired functionality. ")
  class Collaboration extends StructuredClassifier, simpleClassifiers.BehavioredClassifier {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="collaboration")
    @GenModel(documentation="Represents the participants in the Collaboration.")
    @subsets
    !ordered ref ConnectableElement[*] collaborationRole;
  }

  @GenModel(documentation="StructuredClassifiers may contain an internal structure of connected elements each of which plays a role in the overall Behavior modeled by the StructuredClassifier.")
  abstract class StructuredClassifier extends classification.Classifier {

    @GenModel(documentation="Derivation for StructuredClassifier::/part")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="ownedAttribute->select(isComposite)")
    !ordered op classification.Property[*] part();

    @GenModel(documentation="All features of type ConnectableElement, equivalent to all direct and inherited roles.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="allFeatures()->select(oclIsKindOf(ConnectableElement))->collect(oclAsType(ConnectableElement))->asSet()")
    !ordered op ConnectableElement[*] allRoles();

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="structuredClassifier")
    @GenModel(documentation="The Properties owned by the StructuredClassifier.")
    @subsets
    val classification.Property[*] ownedAttribute;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="structuredClassifier")
    @GenModel(documentation="The connectors owned by the StructuredClassifier.")
    @subsets
    !ordered val Connector[*] ownedConnector;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="structuredClassifier")
    @GenModel(documentation="The Properties specifying instances that the StructuredClassifier owns by composition. This collection is derived, selecting those owned Properties where isComposite is true.")
    !ordered readonly volatile transient derived ref classification.Property[*] part;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="structuredClassifier")
    @GenModel(documentation="The roles that instances may play in this StructuredClassifier.")
    @union
    @subsets
    !ordered readonly volatile transient derived ref ConnectableElement[*] role;
  }

  @GenModel(documentation="A Connector specifies links that enables communication between two or more instances. In contrast to Associations, which specify links between any instance of the associated Classifiers, Connectors specify links between instances playing the connected parts only.
type<>null implies 
  let noOfEnds : Integer = end->size() in 
  (type.memberEnd->size() = noOfEnds) and Sequence{1..noOfEnds}->forAll(i | end->at(i).role.type.conformsTo(type.memberEnd->at(i).type))
structuredClassifier <> null
and
  end->forAll( e | structuredClassifier.allRoles()->includes(e.role)
or
  e.role.oclIsKindOf(Port) and structuredClassifier.allRoles()->includes(e.partWithPort))")
  @Ecore(constraints="types roles")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(types="type<>null implies 
  let noOfEnds : Integer = end->size() in 
  (type.memberEnd->size() = noOfEnds) and Sequence{1..noOfEnds}->forAll(i | end->at(i).role.type.conformsTo(type.memberEnd->at(i).type))", roles="structuredClassifier <> null
and
  end->forAll( e | structuredClassifier.allRoles()->includes(e.role)
or
  e.role.oclIsKindOf(Port) and structuredClassifier.allRoles()->includes(e.partWithPort))")
  class Connector extends classification.Feature {

    @GenModel(documentation="Derivation for Connector::/kind : ConnectorKind")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if end->exists(
		role.oclIsKindOf(Port) 
		and partWithPort->isEmpty()
		and not role.oclAsType(Port).isBehavior)
then ConnectorKind::delegation 
else ConnectorKind::assembly 
endif")
    !ordered op ConnectorKind[1] kind();

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="connector")
    @GenModel(documentation="The set of Behaviors that specify the valid interaction patterns across the Connector.")
    !ordered ref commonBehavior.Behavior[*] contract;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="connector")
    @GenModel(documentation="A Connector has at least two ConnectorEnds, each representing the participation of instances of the Classifiers typing the ConnectableElements attached to the end. The set of ConnectorEnds is ordered.")
    @subsets
    val ConnectorEnd[2..*] end;

    @GenModel(documentation="Indicates the kind of Connector. This is derived: a Connector with one or more ends connected to a Port which is not on a Part and which is not a behavior port is a delegation; otherwise it is an assembly.")
    !ordered readonly volatile transient derived attr ConnectorKind[1] kind;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="connector")
    @GenModel(documentation="A Connector may be redefined when its containing Classifier is specialized. The redefining Connector may have a type that specializes the type of the redefined Connector. The types of the ConnectorEnds of the redefining Connector may specialize the types of the ConnectorEnds of the redefined Connector. The properties of the ConnectorEnds of the redefining Connector may be replaced.")
    @subsets
    !ordered ref Connector[*] redefinedConnector;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="connector")
    @GenModel(documentation="An optional Association that classifies links corresponding to this Connector.")
    !ordered ref Association type;
  }

  @GenModel(documentation="ConnectorKind is an enumeration that defines whether a Connector is an assembly or a delegation.")
  enum ConnectorKind {

    @GenModel(documentation="Indicates that the Connector is an assembly Connector.")
    assembly = 0;

    @GenModel(documentation="Indicates that the Connector is a delegation Connector.")
    delegation = 1;
  }

  @GenModel(documentation="An EncapsulatedClassifier may own Ports to specify typed interaction points.")
  abstract class EncapsulatedClassifier extends StructuredClassifier {

    @GenModel(documentation="Derivation for EncapsulatedClassifier::/ownedPort : Port")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="ownedAttribute->select(oclIsKindOf(Port))->collect(oclAsType(Port))->asOrderedSet()")
    op Port[*] ownedPort();

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="encapsulatedClassifier")
    @GenModel(documentation="The Ports owned by the EncapsulatedClassifier.")
    @subsets
    !ordered readonly volatile transient derived ref Port[*] ownedPort;
  }

  @GenModel(documentation="A Component represents a modular part of a system that encapsulates its contents and whose manifestation is replaceable within its environment.  
nestedClassifier->isEmpty()
nestingClass <> null implies packagedElement->isEmpty()")
  @Ecore(constraints="no_nested_classifiers no_packaged_elements")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(no_nested_classifiers="nestedClassifier->isEmpty()", no_packaged_elements="nestingClass <> null implies packagedElement->isEmpty()")
  class Component extends Class {

    @GenModel(documentation="Derivation for Component::/provided")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="let 	ris : Set(Interface) = allRealizedInterfaces(),
        realizingClassifiers : Set(Classifier) =  self.realization.realizingClassifier->union(self.allParents()->collect(realization.realizingClassifier))->asSet(),
        allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents())->asSet(),
        realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(c.allRealizedInterfaces())),
        ports : Set(Port) = self.ownedPort->union(allParents()->collect(ownedPort))->asSet(),
        providedByPorts : Set(Interface) = ports.provided->asSet()
in     ris->union(realizingClassifierInterfaces) ->union(providedByPorts)->asSet()")
    !ordered op simpleClassifiers.Interface[*] provided();

    @GenModel(documentation="Derivation for Component::/required")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="let 	uis : Set(Interface) = allUsedInterfaces(),
        realizingClassifiers : Set(Classifier) = self.realization.realizingClassifier->union(self.allParents()->collect(realization.realizingClassifier))->asSet(),
        allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents())->asSet(),
        realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(c.allUsedInterfaces())),
        ports : Set(Port) = self.ownedPort->union(allParents()->collect(ownedPort))->asSet(),
        usedByPorts : Set(Interface) = ports.required->asSet()
in	    uis->union(realizingClassifierInterfaces)->union(usedByPorts)->asSet()")
    !ordered op simpleClassifiers.Interface[*] required();

    @GenModel(documentation="If true, the Component is defined at design-time, but at run-time (or execution-time) an object specified by the Component does not exist, that is, the Component is instantiated indirectly, through the instantiation of its realizing Classifiers or parts.")
    !ordered attr types.Boolean[1] isIndirectlyInstantiated = "true";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="component")
    @GenModel(documentation="The set of PackageableElements that a Component owns. In the namespace of a Component, all model elements that are involved in or related to its definition may be owned or imported explicitly. These may include e.g., Classes, Interfaces, Components, Packages, UseCases, Dependencies (e.g., mappings), and Artifacts.")
    @subsets
    !ordered val commonStructure.PackageableElement[*] packagedElement;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="component")
    @GenModel(documentation="The Interfaces that the Component exposes to its environment. These Interfaces may be Realized by the Component or any of its realizingClassifiers, or they may be the Interfaces that are provided by its public Ports.")
    !ordered readonly volatile transient derived ref simpleClassifiers.Interface[*] provided;

    @GenModel(documentation="The set of Realizations owned by the Component. Realizations reference the Classifiers of which the Component is an abstraction; i.e., that realize its behavior.")
    @subsets
    !ordered val ComponentRealization[*]#abstraction realization;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="component")
    @GenModel(documentation="The Interfaces that the Component requires from other Components in its environment in order to be able to offer its full set of provided functionality. These Interfaces may be used by the Component or any of its realizingClassifiers, or they may be the Interfaces that are required by its public Ports.")
    !ordered readonly volatile transient derived ref simpleClassifiers.Interface[*] required;
  }

  @GenModel(documentation="Realization is specialized to (optionally) define the Classifiers that realize the contract offered by a Component in terms of its provided and required Interfaces. The Component forms an abstraction from these various Classifiers.")
  class ComponentRealization extends commonStructure.Realization {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="componentRealization")
    @GenModel(documentation="The Classifiers that are involved in the implementation of the Component that owns this Realization.")
    @subsets
    !ordered ref classification.Classifier[+] realizingClassifier;

    @GenModel(documentation="The Component that owns this ComponentRealization and which is implemented by its realizing Classifiers.")
    @subsets
    !ordered ref Component#realization abstraction;
  }

  @GenModel(documentation="A link is a tuple of values that refer to typed objects.  An Association classifies a set of links, each of which is an instance of the Association.  Each value in the link refers to an instance of the type of the corresponding end of the Association.

parents()->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(p | p.memberEnd->size() = self.memberEnd->size())
Sequence{1..memberEnd->size()}->
	forAll(i | general->select(oclIsKindOf(Association)).oclAsType(Association)->
		forAll(ga | self.memberEnd->at(i).type.conformsTo(ga.memberEnd->at(i).type)))
memberEnd->exists(aggregation <> AggregationKind::none) implies (memberEnd->size() = 2 and memberEnd->exists(aggregation = AggregationKind::none))
memberEnd->size() > 2 implies ownedEnd->includesAll(memberEnd)
memberEnd->forAll(type->notEmpty())")
  @Ecore(constraints="specialized_end_number specialized_end_types binary_associations association_ends ends_must_be_typed")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(specialized_end_number="parents()->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(p | p.memberEnd->size() = self.memberEnd->size())", specialized_end_types="Sequence{1..memberEnd->size()}->
	forAll(i | general->select(oclIsKindOf(Association)).oclAsType(Association)->
		forAll(ga | self.memberEnd->at(i).type.conformsTo(ga.memberEnd->at(i).type)))", binary_associations="memberEnd->exists(aggregation <> AggregationKind::none) implies (memberEnd->size() = 2 and memberEnd->exists(aggregation = AggregationKind::none))", association_ends="memberEnd->size() > 2 implies ownedEnd->includesAll(memberEnd)", ends_must_be_typed="memberEnd->forAll(type->notEmpty())")
  class Association extends classification.Classifier, commonStructure.Relationship {

    @GenModel(documentation="endType is derived from the types of the member ends.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="memberEnd->collect(type)->asSet()")
    !ordered op commonStructure.Type[+] endType();

    @GenModel(documentation="Each end represents participation of instances of the Classifier connected to the end in links of the Association.")
    @subsets
    ref classification.Property[2..*]#association memberEnd;

    @GenModel(documentation="The ends that are owned by the Association itself.")
    @subsets
    val classification.Property[*]#owningAssociation ownedEnd;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="association")
    @GenModel(documentation="The Classifiers that are used as types of the ends of the Association.")
    @subsets
    !ordered readonly volatile transient derived ref commonStructure.Type[+] endType;

    @GenModel(documentation="Specifies whether the Association is derived from other model elements such as other Associations.")
    !ordered attr types.Boolean[1] isDerived = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="association")
    @GenModel(documentation="The navigable ends that are owned by the Association itself.")
    @subsets
    !ordered ref classification.Property[*] navigableOwnedEnd;
  }

}

@"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="SimpleClassifiers")
@Ecore(validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL", invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL")
@namespace(uri="http:///uml/simpleClassifiers.ecore", prefix="uml.simpleClassifiers")
package simpleClassifiers {
  @GenModel(documentation="A DataType is a type whose instances are identified only by their value.")
  class DataType extends classification.Classifier {

    @GenModel(documentation="The Operations owned by the DataType.")
    @subsets
    val classification.Operation[*]#~datatype ownedOperation;

    @GenModel(documentation="The attributes owned by the DataType.")
    @subsets
    val classification.Property[*]#~datatype ownedAttribute;
  }

  @GenModel(documentation="Interfaces declare coherent services that are implemented by BehavioredClassifiers that implement the Interfaces via InterfaceRealizations.
feature->forAll(visibility = VisibilityKind::public)")
  @Ecore(constraints="visibility")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(visibility="feature->forAll(visibility = VisibilityKind::public)")
  class Interface extends classification.Classifier {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="interface")
    @GenModel(documentation="References all the Classifiers that are defined (nested) within the Interface.")
    @subsets
    val classification.Classifier[*] nestedClassifier;

    @GenModel(documentation="The attributes (i.e., the Properties) owned by the Interface.")
    @subsets
    val classification.Property[*]#~interface ownedAttribute;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="interface")
    @GenModel(documentation="Receptions that objects providing this Interface are willing to accept.")
    @subsets
    !ordered val Reception[*] ownedReception;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="interface")
    @GenModel(documentation="References a ProtocolStateMachine specifying the legal sequences of the invocation of the BehavioralFeatures described in the Interface.")
    @subsets
    !ordered val stateMachines.ProtocolStateMachine protocol;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="interface")
    @GenModel(documentation="References all the Interfaces redefined by this Interface.")
    @subsets
    !ordered ref Interface[*] redefinedInterface;

    @GenModel(documentation="The Operations owned by the Interface.")
    @subsets
    val classification.Operation[*]#~interface ownedOperation;
  }

  @GenModel(documentation="A Reception is a declaration stating that a Classifier is prepared to react to the receipt of a Signal.
name = signal.name
signal.ownedAttribute->size() = ownedParameter->size() and
Sequence{1..signal.ownedAttribute->size()}->forAll( i | 
    ownedParameter->at(i).direction = ParameterDirectionKind::_'in' and 
    ownedParameter->at(i).name = signal.ownedAttribute->at(i).name and
    ownedParameter->at(i).type = signal.ownedAttribute->at(i).type and
    ownedParameter->at(i).lowerBound() = signal.ownedAttribute->at(i).lowerBound() and
    ownedParameter->at(i).upperBound() = signal.ownedAttribute->at(i).upperBound()
)")
  @Ecore(constraints="same_name_as_signal same_structure_as_signal")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(same_name_as_signal="name = signal.name", same_structure_as_signal="signal.ownedAttribute->size() = ownedParameter->size() and
Sequence{1..signal.ownedAttribute->size()}->forAll( i | 
    ownedParameter->at(i).direction = ParameterDirectionKind::_'in' and 
    ownedParameter->at(i).name = signal.ownedAttribute->at(i).name and
    ownedParameter->at(i).type = signal.ownedAttribute->at(i).type and
    ownedParameter->at(i).lowerBound() = signal.ownedAttribute->at(i).lowerBound() and
    ownedParameter->at(i).upperBound() = signal.ownedAttribute->at(i).upperBound()
)")
  class Reception extends classification.BehavioralFeature {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="reception")
    @GenModel(documentation="The Signal that this Reception handles.")
    !ordered ref Signal[1] signal;
  }

  @GenModel(documentation="A Signal is a specification of a kind of communication between objects in which a reaction is asynchronously triggered in the receiver without a reply.")
  class Signal extends classification.Classifier {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="owningSignal")
    @GenModel(documentation="The attributes owned by the Signal.")
    @subsets
    val classification.Property[*] ownedAttribute;
  }

  @GenModel(documentation="An Enumeration is a DataType whose values are enumerated in the model as EnumerationLiterals.
ownedAttribute->forAll(isReadOnly)")
  @Ecore(constraints="immutable")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(immutable="ownedAttribute->forAll(isReadOnly)")
  class Enumeration extends DataType {

    @GenModel(documentation="The ordered set of literals owned by this Enumeration.")
    @subsets
    val EnumerationLiteral[*]#enumeration ownedLiteral;
  }

  @GenModel(documentation="An EnumerationLiteral is a user-defined data value for an Enumeration.")
  @duplicates
  class EnumerationLiteral extends classification.InstanceSpecification {

    @GenModel(documentation="Derivation of Enumeration::/classifier")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="enumeration")
    !ordered op Enumeration[1] classifier();

    @GenModel(documentation="The Enumeration that this EnumerationLiteral is a member of.")
    @subsets
    !ordered ref Enumeration[1]#ownedLiteral enumeration;
  }

  @GenModel(documentation="An InterfaceRealization is a specialized realization relationship between a BehavioredClassifier and an Interface. This relationship signifies that the realizing BehavioredClassifier conforms to the contract specified by the Interface.")
  class InterfaceRealization extends commonStructure.Realization {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="interfaceRealization")
    @GenModel(documentation="References the Interface specifying the conformance contract.")
    @subsets
    !ordered ref Interface[1] contract;

    @GenModel(documentation="References the BehavioredClassifier that owns this InterfaceRealization, i.e., the BehavioredClassifier that realizes the Interface to which it refers.")
    @subsets
    !ordered ref BehavioredClassifier[1]#interfaceRealization implementingClassifier;
  }

  @GenModel(documentation="A PrimitiveType defines a predefined DataType, without any substructure. A PrimitiveType may have an algebra and operations defined outside of UML, for example, mathematically.")
  class PrimitiveType extends DataType {
  }

  @GenModel(documentation="A BehavioredClassifier may have InterfaceRealizations, and owns a set of Behaviors one of which may specify the behavior of the BehavioredClassifier itself.
classifierBehavior->notEmpty() implies classifierBehavior.specification->isEmpty()")
  @Ecore(constraints="class_behavior")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(class_behavior="classifierBehavior->notEmpty() implies classifierBehavior.specification->isEmpty()")
  abstract class BehavioredClassifier extends classification.Classifier {

    @GenModel(documentation="The set of InterfaceRealizations owned by the BehavioredClassifier. Interface realizations reference the Interfaces of which the BehavioredClassifier is an implementation.")
    @subsets
    !ordered val InterfaceRealization[*]#implementingClassifier interfaceRealization;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="behavioredClassifier")
    @GenModel(documentation="A Behavior that specifies the behavior of the BehavioredClassifier itself.")
    @subsets
    !ordered ref commonBehavior.Behavior classifierBehavior;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="behavioredClassifier")
    @GenModel(documentation="Behaviors owned by a BehavioredClassifier.")
    @subsets
    !ordered val commonBehavior.Behavior[*] ownedBehavior;
  }

}

@"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="Classification")
@Ecore(validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL", invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL")
@namespace(uri="http:///uml/classification.ecore", prefix="uml.classification")
package classification {
  @GenModel(documentation="A substitution is a relationship between two classifiers signifying that the substituting classifier complies with the contract specified by the contract classifier. This implies that instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected.")
  class Substitution extends commonStructure.Realization {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="substitution")
    @GenModel(documentation="The contract with which the substituting classifier complies.")
    @subsets
    !ordered ref Classifier[1] contract;

    @GenModel(documentation="Instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected.")
    @subsets
    !ordered ref Classifier[1]#substitution substitutingClassifier;
  }

  @GenModel(documentation="A BehavioralFeature is a feature of a Classifier that specifies an aspect of the behavior of its instances.  A BehavioralFeature is implemented (realized) by a Behavior. A BehavioralFeature specifies that a Classifier will respond to a designated request by invoking its implementing method.
isAbstract implies method->isEmpty()")
  @Ecore(constraints="abstract_no_method")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(abstract_no_method="isAbstract implies method->isEmpty()")
  @duplicates
  abstract class BehavioralFeature extends commonStructure.Namespace, Feature {

    @GenModel(documentation="The ownedParameters with direction in and inout.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="ownedParameter->select(direction=ParameterDirectionKind::_'in' or direction=ParameterDirectionKind::inout)")
    op Parameter[*] inputParameters();

    @GenModel(documentation="The ownedParameters with direction out, inout, or return.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="ownedParameter->select(direction=ParameterDirectionKind::out or direction=ParameterDirectionKind::inout or direction=ParameterDirectionKind::return)")
    op Parameter[*] outputParameters();

    @GenModel(documentation="Specifies the semantics of concurrent calls to the same passive instance (i.e., an instance originating from a Class with isActive being false). Active instances control access to their own BehavioralFeatures.")
    !ordered attr CallConcurrencyKind[1] concurrency = "sequential";

    @GenModel(documentation="If true, then the BehavioralFeature does not have an implementation, and one must be supplied by a more specific Classifier. If false, the BehavioralFeature must have an implementation in the Classifier or one must be inherited.")
    !ordered attr types.Boolean[1] isAbstract = "false";

    @GenModel(documentation="A Behavior that implements the BehavioralFeature. There may be at most one Behavior for a particular pairing of a Classifier (as owner of the Behavior) and a BehavioralFeature (as specification of the Behavior).")
    !ordered ref commonBehavior.Behavior[*]#specification method;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="ownerFormalParam")
    @GenModel(documentation="The ordered set of formal Parameters of this BehavioralFeature.")
    @subsets
    val Parameter[*] ownedParameter;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="behavioralFeature")
    @GenModel(documentation="The ParameterSets owned by this BehavioralFeature.")
    @subsets
    !ordered val ParameterSet[*] ownedParameterSet;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="behavioralFeature")
    @GenModel(documentation="The Types representing exceptions that may be raised during an invocation of this BehavioralFeature.")
    !ordered ref commonStructure.Type[*] raisedException;
  }

  @GenModel(documentation="A Feature declares a behavioral or structural characteristic of Classifiers.")
  abstract class Feature extends RedefinableElement {

    @GenModel(documentation="The Classifiers that have this Feature as a feature.")
    @union
    !ordered readonly volatile transient derived ref Classifier#feature featuringClassifier;

    @GenModel(documentation="Specifies whether this Feature characterizes individual instances classified by the Classifier (false) or the Classifier itself (true).")
    !ordered attr types.Boolean[1] isStatic = "false";
  }

  @GenModel(documentation="A RedefinableElement is an element that, when defined in the context of a Classifier, can be redefined more specifically or differently in the context of another Classifier that specializes (directly or indirectly) the context Classifier.
redefinedElement->forAll(re | re.isConsistentWith(self))
redefinedElement->forAll(re | not re.isLeaf)
redefinedElement->forAll(re | self.isRedefinitionContextValid(re))")
  @Ecore(constraints="redefinition_consistent non_leaf_redefinition redefinition_context_valid")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(redefinition_consistent="redefinedElement->forAll(re | re.isConsistentWith(self))", non_leaf_redefinition="redefinedElement->forAll(re | not re.isLeaf)", redefinition_context_valid="redefinedElement->forAll(re | self.isRedefinitionContextValid(re))")
  abstract class RedefinableElement extends commonStructure.NamedElement {

    @GenModel(documentation="The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="false")
    !ordered op types.Boolean[1] isConsistentWith(!ordered RedefinableElement[1] redefiningElement);

    @GenModel(documentation="The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="redefinitionContext->exists(c | c.allParents()->includesAll(redefinedElement.redefinitionContext))")
    !ordered op types.Boolean[1] isRedefinitionContextValid(!ordered RedefinableElement[1] redefinedElement);

    @GenModel(documentation="Indicates whether it is possible to further redefine a RedefinableElement. If the value is true, then it is not possible to further redefine the RedefinableElement.")
    !ordered attr types.Boolean[1] isLeaf = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="redefinableElement")
    @GenModel(documentation="The RedefinableElement that is being redefined by this element.")
    @union
    !ordered readonly volatile transient derived ref RedefinableElement[*] redefinedElement;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="redefinableElement")
    @GenModel(documentation="The contexts that this element may be redefined from.")
    @union
    !ordered readonly volatile transient derived ref Classifier[*] redefinitionContext;
  }

  @GenModel(documentation="CallConcurrencyKind is an Enumeration used to specify the semantics of concurrent calls to a BehavioralFeature.")
  enum CallConcurrencyKind {

    @GenModel(documentation="No concurrency management mechanism is associated with the BehavioralFeature and, therefore, concurrency conflicts may occur. Instances that invoke a BehavioralFeature need to coordinate so that only one invocation to a target on any BehavioralFeature occurs at once.")
    sequential = 0;

    @GenModel(documentation="Multiple invocations of a BehavioralFeature that overlap in time may occur to one instance, but only one is allowed to commence. The others are blocked until the performance of the currently executing BehavioralFeature is complete. It is the responsibility of the system designer to ensure that deadlocks do not occur due to simultaneous blocking.")
    guarded = 1;

    @GenModel(documentation="Multiple invocations of a BehavioralFeature that overlap in time may occur to one instance and all of them may proceed concurrently.")
    concurrent = 2;
  }

  @GenModel(documentation="A Parameter is a specification of an argument used to pass information into or out of an invocation of a BehavioralFeature.  Parameters can be treated as ConnectableElements within Collaborations.
(effect = ParameterEffectKind::delete implies (direction = ParameterDirectionKind::_'in' or direction = ParameterDirectionKind::inout))
and
(effect = ParameterEffectKind::create implies (direction = ParameterDirectionKind::out or direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::return))
isException implies (direction <> ParameterDirectionKind::_'in' and direction <> ParameterDirectionKind::inout)
end->notEmpty() implies collaboration->notEmpty()
(isStream and behavior <> null) implies not behavior.isReentrant
not (isException and isStream)
(type.oclIsKindOf(DataType)) implies (effect = null)")
  @Ecore(constraints="in_and_out not_exception connector_end reentrant_behaviors stream_and_exception object_effect")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(in_and_out="(effect = ParameterEffectKind::delete implies (direction = ParameterDirectionKind::_'in' or direction = ParameterDirectionKind::inout))
and
(effect = ParameterEffectKind::create implies (direction = ParameterDirectionKind::out or direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::return))", not_exception="isException implies (direction <> ParameterDirectionKind::_'in' and direction <> ParameterDirectionKind::inout)", connector_end="end->notEmpty() implies collaboration->notEmpty()", reentrant_behaviors="(isStream and behavior <> null) implies not behavior.isReentrant", stream_and_exception="not (isException and isStream)", object_effect="(type.oclIsKindOf(DataType)) implies (effect = null)")
  class Parameter extends structuredClassifiers.ConnectableElement, commonStructure.MultiplicityElement {

    @GenModel(documentation="Derivation for Parameter::/default")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if self.type = String then defaultValue.stringValue() else null endif")
    !ordered op types.String default();

    @GenModel(documentation="The Operation owning this parameter.")
    !ordered readonly volatile transient ref Operation operation;

    @GenModel(documentation="A String that represents a value to be used when no argument is supplied for the Parameter.")
    !ordered volatile transient derived attr types.String default;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="owningParameter")
    @GenModel(documentation="Specifies a ValueSpecification that represents a value to be used when no argument is supplied for the Parameter.")
    @subsets
    !ordered val values.ValueSpecification defaultValue;

    @GenModel(documentation="Indicates whether a parameter is being sent into or out of a behavioral element.")
    !ordered attr ParameterDirectionKind[1] direction = "in";

    @GenModel(documentation="Specifies the effect that executions of the owner of the Parameter have on objects passed in or out of the parameter.")
    !ordered attr ParameterEffectKind effect;

    @GenModel(documentation="Tells whether an output parameter may emit a value to the exclusion of the other outputs.")
    !ordered attr types.Boolean[1] isException = "false";

    @GenModel(documentation="Tells whether an input parameter may accept values while its behavior is executing, or whether an output parameter may post values while the behavior is executing.")
    !ordered attr types.Boolean[1] isStream = "false";

    @GenModel(documentation="The ParameterSets containing the parameter. See ParameterSet.")
    !ordered ref ParameterSet[*]#parameter parameterSet;
  }

  @GenModel(documentation="A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.
subsettedProperty->notEmpty() implies
  (subsettingContext()->notEmpty() and subsettingContext()->forAll (sc |
    subsettedProperty->forAll(sp |
      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))
isDerivedUnion implies isReadOnly
isComposite and association <> null implies opposite.upperBound() <= 1


(redefinedProperty->notEmpty()) implies
  (redefinitionContext->notEmpty() and
      redefinedProperty->forAll(rp|
        ((redefinitionContext->collect(fc|
          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp)))
subsettedProperty->forAll(sp |
  self.type.conformsTo(sp.type) and
    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies
      self.upperBound() <= sp.upperBound() ))
(self.isAttribute()
and (templateParameterSubstitution->notEmpty())
implies (templateParameterSubstitution->forAll(ts |
    ts.formal.oclIsKindOf(Property)
    and ts.formal.oclAsType(Property).isAttribute())))
isDerivedUnion implies isDerived
deployment->notEmpty() implies owner.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p = self))
subsettedProperty->forAll(sp | sp.name <> name)
(opposite->notEmpty() and owningAssociation->isEmpty()) implies classifier = opposite.type
qualifier->notEmpty() implies association->notEmpty()")
  @Ecore(constraints="subsetting_context_conforms derived_union_is_read_only multiplicity_of_composite redefined_property_inherited subsetting_rules binding_to_attribute derived_union_is_derived deployment_target subsetted_property_names type_of_opposite_end qualified_is_association_end")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(subsetting_context_conforms="subsettedProperty->notEmpty() implies
  (subsettingContext()->notEmpty() and subsettingContext()->forAll (sc |
    subsettedProperty->forAll(sp |
      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))", derived_union_is_read_only="isDerivedUnion implies isReadOnly", multiplicity_of_composite="isComposite and association <> null implies opposite.upperBound() <= 1

", redefined_property_inherited="(redefinedProperty->notEmpty()) implies
  (redefinitionContext->notEmpty() and
      redefinedProperty->forAll(rp|
        ((redefinitionContext->collect(fc|
          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp)))", subsetting_rules="subsettedProperty->forAll(sp |
  self.type.conformsTo(sp.type) and
    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies
      self.upperBound() <= sp.upperBound() ))", binding_to_attribute="(self.isAttribute()
and (templateParameterSubstitution->notEmpty())
implies (templateParameterSubstitution->forAll(ts |
    ts.formal.oclIsKindOf(Property)
    and ts.formal.oclAsType(Property).isAttribute())))", derived_union_is_derived="isDerivedUnion implies isDerived", deployment_target="deployment->notEmpty() implies owner.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p = self))", subsetted_property_names="subsettedProperty->forAll(sp | sp.name <> name)", type_of_opposite_end="(opposite->notEmpty() and owningAssociation->isEmpty()) implies classifier = opposite.type", qualified_is_association_end="qualifier->notEmpty() implies association->notEmpty()")
  @duplicates
  class Property extends StructuralFeature, structuredClassifiers.ConnectableElement, deployments.DeploymentTarget {

    @GenModel(documentation="The query isAttribute() is true if the Property is defined as an attribute of some Classifier.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="not classifier->isEmpty()")
    !ordered op types.Boolean[1] isAttribute();

    @GenModel(documentation="The value of isComposite is true only if aggregation is composite.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="aggregation = AggregationKind::composite")
    !ordered op types.Boolean[1] isComposite();

    @GenModel(documentation="The query isNavigable() indicates whether it is possible to navigate across the property.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="not classifier->isEmpty() or association.navigableOwnedEnd->includes(self)")
    !ordered op types.Boolean[1] isNavigable();

    @GenModel(documentation="If this property is a memberEnd of a binary association, then opposite gives the other end.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if association <> null and association.memberEnd->size() = 2
then
    association.memberEnd->any(e | e <> self)
else
    null
endif")
    !ordered op Property[1] opposite();

    @GenModel(documentation="The query subsettingContext() gives the context for subsetting a Property. It consists, in the case of an attribute, of the corresponding Classifier, and in the case of an association end, all of the Classifiers at the other ends.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if association <> null
then association.memberEnd->excluding(self)->collect(type)->asSet()
else 
  if classifier<>null
  then classifier->asSet()
  else Set{} 
  endif
endif")
    !ordered op commonStructure.Type[*] subsettingContext();

    @GenModel(documentation="The Interface that owns this Property, if any.")
    @subsets
    !ordered ref simpleClassifiers.Interface#ownedAttribute ~interface;

    @GenModel(documentation="Specifies the kind of aggregation that applies to the Property.")
    !ordered attr AggregationKind[1] aggregation = "none";

    @GenModel(documentation="The Association of which this Property is a member, if any.")
    !ordered ref structuredClassifiers.Association#memberEnd association;

    @GenModel(documentation="Designates the optional association end that owns a qualifier attribute.")
    @subsets
    !ordered ref Property#qualifier associationEnd;

    @GenModel(documentation="An optional list of ordered qualifier attributes for the end.")
    @subsets
    val Property[*]#associationEnd qualifier;

    @GenModel(documentation="The Class that owns this Property, if any.")
    @subsets
    !ordered readonly volatile transient ref structuredClassifiers.Class ~class;

    @GenModel(documentation="The DataType that owns this Property, if any.")
    @subsets
    !ordered ref simpleClassifiers.DataType#ownedAttribute ~datatype;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="owningProperty")
    @GenModel(documentation="A ValueSpecification that is evaluated to give a default value for the Property when an instance of the owning Classifier is instantiated.")
    @subsets
    !ordered val values.ValueSpecification defaultValue;

    @GenModel(documentation="If isComposite is true, the object containing the attribute is a container for the object or value contained in the attribute. This is a derived value, indicating whether the aggregation of the Property is composite or not.")
    !ordered volatile transient derived attr types.Boolean[1] isComposite = "false";

    @GenModel(documentation="Specifies whether the Property is derived, i.e., whether its value or values can be computed from other information.")
    !ordered attr types.Boolean[1] isDerived = "false";

    @GenModel(documentation="Specifies whether the property is derived as the union of all of the Properties that are constrained to subset it.")
    !ordered attr types.Boolean[1] isDerivedUnion = "false";

    @"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="isID")
    @GenModel(documentation="True indicates this property can be used to uniquely identify an instance of the containing Class.")
    !ordered attr types.Boolean[1] isId = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="property")
    @GenModel(documentation="In the case where the Property is one end of a binary association this gives the other end.")
    !ordered volatile transient derived ref Property opposite;

    @GenModel(documentation="The owning association of this property, if any.")
    @subsets
    !ordered ref structuredClassifiers.Association#ownedEnd owningAssociation;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="property")
    @GenModel(documentation="The properties that are redefined by this property, if any.")
    @subsets
    !ordered ref Property[*] redefinedProperty;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="property")
    @GenModel(documentation="The properties of which this Property is constrained to be a subset, if any.")
    !ordered ref Property[*] subsettedProperty;
  }

  @GenModel(documentation="An Operation is a BehavioralFeature of a Classifier that specifies the name, type, parameters, and constraints for invoking an associated Behavior. An Operation may invoke both the execution of method behaviors as well as other behavioral responses. Operation specializes TemplateableElement in order to support specification of template operations and bound operations. Operation specializes ParameterableElement to specify that an operation can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.
self.ownedParameter->select(direction = ParameterDirectionKind::return)->size() <= 1
bodyCondition <> null implies isQuery")
  @Ecore(constraints="at_most_one_return only_body_for_query")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(at_most_one_return="self.ownedParameter->select(direction = ParameterDirectionKind::return)->size() <= 1", only_body_for_query="bodyCondition <> null implies isQuery")
  @duplicates
  class Operation extends BehavioralFeature, commonStructure.ParameterableElement, commonStructure.TemplateableElement {

    @GenModel(documentation="If this operation has a return parameter, isOrdered equals the value of isOrdered for that parameter. Otherwise isOrdered is false.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if returnResult()->notEmpty() then returnResult()-> exists(isOrdered) else false endif")
    !ordered op types.Boolean[1] isOrdered();

    @GenModel(documentation="If this operation has a return parameter, isUnique equals the value of isUnique for that parameter. Otherwise isUnique is true.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if returnResult()->notEmpty() then returnResult()->exists(isUnique) else true endif")
    !ordered op types.Boolean[1] isUnique();

    @GenModel(documentation="If this operation has a return parameter, lower equals the value of lower for that parameter. Otherwise lower has no value.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if returnResult()->notEmpty() then returnResult()->any(true).lower else null endif")
    !ordered op types.Integer[1] lower();

    @GenModel(documentation="The query returnResult() returns the set containing the return parameter of the Operation if one exists, otherwise, it returns an empty set")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="ownedParameter->select (direction = ParameterDirectionKind::return)")
    !ordered op Parameter[*] returnResult();

    @GenModel(documentation="If this operation has a return parameter, type equals the value of type for that parameter. Otherwise type has no value.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if returnResult()->notEmpty() then returnResult()->any(true).type else null endif")
    !ordered op commonStructure.Type[1] type();

    @GenModel(documentation="If this operation has a return parameter, upper equals the value of upper for that parameter. Otherwise upper has no value.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if returnResult()->notEmpty() then returnResult()->any(true).upper else null endif")
    !ordered op types.UnlimitedNatural[1] upper();

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="bodyContext")
    @GenModel(documentation="An optional Constraint on the result values of an invocation of this Operation.")
    @subsets
    !ordered ref commonStructure.Constraint bodyCondition;

    @GenModel(documentation="The Class that owns this operation, if any.")
    @subsets
    !ordered ref structuredClassifiers.Class#ownedOperation ~class;

    @GenModel(documentation="The DataType that owns this Operation, if any.")
    @subsets
    !ordered ref simpleClassifiers.DataType#ownedOperation ~datatype;

    @GenModel(documentation="The Interface that owns this Operation, if any.")
    @subsets
    !ordered ref simpleClassifiers.Interface#ownedOperation ~interface;

    @GenModel(documentation="Specifies whether the return parameter is ordered or not, if present.  This information is derived from the return result for this Operation.")
    !ordered readonly volatile transient derived attr types.Boolean[1] isOrdered;

    @GenModel(documentation="Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged (isQuery=true) or whether side effects may occur (isQuery=false).")
    !ordered attr types.Boolean[1] isQuery = "false";

    @GenModel(documentation="Specifies whether the return parameter is unique or not, if present. This information is derived from the return result for this Operation.")
    !ordered readonly volatile transient derived attr types.Boolean[1] isUnique;

    @GenModel(documentation="Specifies the lower multiplicity of the return parameter, if present. This information is derived from the return result for this Operation.")
    !ordered readonly volatile transient derived attr types.Integer lower;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="postContext")
    @GenModel(documentation="An optional set of Constraints specifying the state of the system when the Operation is completed.")
    @subsets
    !ordered ref commonStructure.Constraint[*] postcondition;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="preContext")
    @GenModel(documentation="An optional set of Constraints on the state of the system when the Operation is invoked.")
    @subsets
    !ordered ref commonStructure.Constraint[*] precondition;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="operation")
    @GenModel(documentation="The Operations that are redefined by this Operation.")
    @subsets
    !ordered ref Operation[*] redefinedOperation;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="operation")
    @GenModel(documentation="The return type of the operation, if present. This information is derived from the return result for this Operation.")
    !ordered readonly volatile transient derived ref commonStructure.Type type;

    @GenModel(documentation="The upper multiplicity of the return parameter, if present. This information is derived from the return result for this Operation.")
    !ordered readonly volatile transient derived attr types.UnlimitedNatural upper;
  }

  @GenModel(documentation="An OperationTemplateParameter exposes an Operation as a formal parameter for a template.
default->notEmpty() implies (default.oclIsKindOf(Operation) and (let defaultOp : Operation = default.oclAsType(Operation) in 
    defaultOp.ownedParameter->size() = parameteredElement.ownedParameter->size() and
    Sequence{1.. defaultOp.ownedParameter->size()}->forAll( ix | 
        let p1: Parameter = defaultOp.ownedParameter->at(ix), p2 : Parameter = parameteredElement.ownedParameter->at(ix) in
          p1.type = p2.type and p1.upper = p2.upper and p1.lower = p2.lower and p1.direction = p2.direction and p1.isOrdered = p2.isOrdered and p1.isUnique = p2.isUnique)))")
  @Ecore(constraints="match_default_signature")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(match_default_signature="default->notEmpty() implies (default.oclIsKindOf(Operation) and (let defaultOp : Operation = default.oclAsType(Operation) in 
    defaultOp.ownedParameter->size() = parameteredElement.ownedParameter->size() and
    Sequence{1.. defaultOp.ownedParameter->size()}->forAll( ix | 
        let p1: Parameter = defaultOp.ownedParameter->at(ix), p2 : Parameter = parameteredElement.ownedParameter->at(ix) in
          p1.type = p2.type and p1.upper = p2.upper and p1.lower = p2.lower and p1.direction = p2.direction and p1.isOrdered = p2.isOrdered and p1.isUnique = p2.isUnique)))")
  @duplicates
  class OperationTemplateParameter extends commonStructure.TemplateParameter {
  }

  @GenModel(documentation="A StructuralFeature is a typed feature of a Classifier that specifies the structure of instances of the Classifier.")
  abstract class StructuralFeature extends Feature, commonStructure.TypedElement, commonStructure.MultiplicityElement {

    @GenModel(documentation="If isReadOnly is true, the StructuralFeature may not be written to after initialization.")
    !ordered attr types.Boolean[1] isReadOnly = "false";
  }

  @GenModel(documentation="AggregationKind is an Enumeration for specifying the kind of aggregation of a Property.")
  enum AggregationKind {

    @GenModel(documentation="Indicates that the Property has no aggregation.")
    none = 0;

    @GenModel(documentation="Indicates that the Property has shared aggregation.")
    shared = 1;

    @GenModel(documentation="Indicates that the Property is aggregated compositely, i.e., the composite object has responsibility for the existence and storage of the composed objects (parts).")
    composite = 2;
  }

  @GenModel(documentation="ParameterDirectionKind is an Enumeration that defines literals used to specify direction of parameters.")
  enum ParameterDirectionKind {

    @GenModel(documentation="Indicates that Parameter values are passed in by the caller. ")
    in = 0;

    @GenModel(documentation="Indicates that Parameter values are passed in by the caller and (possibly different) values passed out to the caller.")
    inout = 1;

    @GenModel(documentation="Indicates that Parameter values are passed out to the caller.")
    out = 2;

    @GenModel(documentation="Indicates that Parameter values are passed as return values back to the caller.")
    return = 3;
  }

  @GenModel(documentation="ParameterEffectKind is an Enumeration that indicates the effect of a Behavior on values passed in or out of its parameters.")
  enum ParameterEffectKind {

    @GenModel(documentation="Indicates that the behavior creates values.")
    create = 0;

    @GenModel(documentation="Indicates objects that are values of the parameter have values of their properties, or links in which they participate, or their classifiers retrieved during executions of the behavior.")
    read = 1;

    @GenModel(documentation="Indicates objects that are values of the parameter have values of their properties, or links in which they participate, or their classification changed during executions of the behavior.")
    update = 2;

    @GenModel(documentation="Indicates objects that are values of the parameter do not exist after executions of the behavior are finished.")
    delete = 3;
  }

  @GenModel(documentation="A ParameterSet designates alternative sets of inputs or outputs that a Behavior may use.
parameter->forAll(p1, p2 | self.owner = p1.owner and self.owner = p2.owner and p1.direction = p2.direction)
((parameter->exists(direction = ParameterDirectionKind::_'in')) implies 
    behavioralFeature.ownedParameter->select(p | p.direction = ParameterDirectionKind::_'in' and p.parameterSet->isEmpty())->forAll(isStream))
    and
((parameter->exists(direction = ParameterDirectionKind::out)) implies 
    behavioralFeature.ownedParameter->select(p | p.direction = ParameterDirectionKind::out and p.parameterSet->isEmpty())->forAll(isStream))  

parameter->forAll(parameterSet->forAll(s1, s2 | s1->size() = s2->size() implies s1.parameter->exists(p | not s2.parameter->includes(p))))")
  @Ecore(constraints="same_parameterized_entity input two_parameter_sets")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(same_parameterized_entity="parameter->forAll(p1, p2 | self.owner = p1.owner and self.owner = p2.owner and p1.direction = p2.direction)", input="((parameter->exists(direction = ParameterDirectionKind::_'in')) implies 
    behavioralFeature.ownedParameter->select(p | p.direction = ParameterDirectionKind::_'in' and p.parameterSet->isEmpty())->forAll(isStream))
    and
((parameter->exists(direction = ParameterDirectionKind::out)) implies 
    behavioralFeature.ownedParameter->select(p | p.direction = ParameterDirectionKind::out and p.parameterSet->isEmpty())->forAll(isStream))  
", two_parameter_sets="parameter->forAll(parameterSet->forAll(s1, s2 | s1->size() = s2->size() implies s1.parameter->exists(p | not s2.parameter->includes(p))))")
  class ParameterSet extends commonStructure.NamedElement {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="parameterSet")
    @GenModel(documentation="A constraint that should be satisfied for the owner of the Parameters in an input ParameterSet to start execution using the values provided for those Parameters, or the owner of the Parameters in an output ParameterSet to end execution providing the values for those Parameters, if all preconditions and conditions on input ParameterSets were satisfied.")
    @subsets
    !ordered val commonStructure.Constraint[*] condition;

    @GenModel(documentation="Parameters in the ParameterSet.")
    !ordered ref Parameter[+]#parameterSet parameter;
  }

  @GenModel(documentation="A ClassifierTemplateParameter exposes a Classifier as a formal template parameter.
allowSubstitutable implies constrainingClassifier->notEmpty()
parameteredElement.feature->isEmpty() and (constrainingClassifier->isEmpty() implies  parameteredElement.allParents()->isEmpty())
(not parameteredElement.isAbstract) implies templateParameterSubstitution.actual->forAll(a | not a.oclAsType(Classifier).isAbstract)
 templateParameterSubstitution.actual->forAll(a | a.oclIsKindOf(Classifier))
templateParameterSubstitution.actual->forAll( a |
  let arg : Classifier = a.oclAsType(Classifier) in
    constrainingClassifier->forAll(
      cc |  
         arg = cc or arg.conformsTo(cc) or (allowSubstitutable and arg.isSubstitutableFor(cc))
      )
)
constrainingClassifier->forAll(
     cc |  parameteredElement = cc or parameteredElement.conformsTo(cc) or (allowSubstitutable and parameteredElement.isSubstitutableFor(cc))
)
")
  @Ecore(constraints="has_constraining_classifier parametered_element_no_features matching_abstract actual_is_classifier constraining_classifiers_constrain_args constraining_classifiers_constrain_parametered_element")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(has_constraining_classifier="allowSubstitutable implies constrainingClassifier->notEmpty()", parametered_element_no_features="parameteredElement.feature->isEmpty() and (constrainingClassifier->isEmpty() implies  parameteredElement.allParents()->isEmpty())", matching_abstract="(not parameteredElement.isAbstract) implies templateParameterSubstitution.actual->forAll(a | not a.oclAsType(Classifier).isAbstract)", actual_is_classifier=" templateParameterSubstitution.actual->forAll(a | a.oclIsKindOf(Classifier))", constraining_classifiers_constrain_args="templateParameterSubstitution.actual->forAll( a |
  let arg : Classifier = a.oclAsType(Classifier) in
    constrainingClassifier->forAll(
      cc |  
         arg = cc or arg.conformsTo(cc) or (allowSubstitutable and arg.isSubstitutableFor(cc))
      )
)", constraining_classifiers_constrain_parametered_element="constrainingClassifier->forAll(
     cc |  parameteredElement = cc or parameteredElement.conformsTo(cc) or (allowSubstitutable and parameteredElement.isSubstitutableFor(cc))
)
")
  @duplicates
  class ClassifierTemplateParameter extends commonStructure.TemplateParameter {

    @GenModel(documentation="Constrains the required relationship between an actual parameter and the parameteredElement for this formal parameter.")
    !ordered attr types.Boolean[1] allowSubstitutable = "true";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="classifierTemplateParameter")
    @GenModel(documentation="The classifiers that constrain the argument that can be used for the parameter. If the allowSubstitutable attribute is true, then any Classifier that is compatible with this constraining Classifier can be substituted; otherwise, it must be either this Classifier or one of its specializations. If this property is empty, there are no constraints on the Classifier that can be used as an argument.")
    !ordered ref Classifier[*] constrainingClassifier;
  }

  @GenModel(documentation="A Generalization is a taxonomic relationship between a more general Classifier and a more specific Classifier. Each instance of the specific Classifier is also an instance of the general Classifier. The specific Classifier inherits the features of the more general Classifier. A Generalization is owned by the specific Classifier.")
  class Generalization extends commonStructure.DirectedRelationship {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="generalization")
    @GenModel(documentation="The general classifier in the Generalization relationship.")
    @subsets
    !ordered ref Classifier[1] general;

    @GenModel(documentation="Represents a set of instances of Generalization.  A Generalization may appear in many GeneralizationSets.")
    !ordered ref GeneralizationSet[*]#generalization generalizationSet;

    @GenModel(documentation="Indicates whether the specific Classifier can be used wherever the general Classifier can be used. If true, the execution traces of the specific Classifier shall be a superset of the execution traces of the general Classifier. If false, there is no such constraint on execution traces. If unset, the modeler has not stated whether there is such a constraint or not.")
    !ordered attr types.Boolean isSubstitutable = "true";

    @GenModel(documentation="The specializing Classifier in the Generalization relationship.")
    @subsets
    !ordered ref Classifier[1]#generalization specific;
  }

  @GenModel(documentation="A GeneralizationSet is a PackageableElement whose instances represent sets of Generalization relationships.
generalization->collect(general)->asSet()->size() <= 1
powertype <> null implies generalization->forAll( gen | 
    not (gen.general = powertype) and not gen.general.allParents()->includes(powertype) and not (gen.specific = powertype) and not powertype.allParents()->includes(gen.specific)
  )")
  @Ecore(constraints="generalization_same_classifier maps_to_generalization_set")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(generalization_same_classifier="generalization->collect(general)->asSet()->size() <= 1", maps_to_generalization_set="powertype <> null implies generalization->forAll( gen | 
    not (gen.general = powertype) and not gen.general.allParents()->includes(powertype) and not (gen.specific = powertype) and not powertype.allParents()->includes(gen.specific)
  )")
  class GeneralizationSet extends commonStructure.PackageableElement {

    @GenModel(documentation="Indicates (via the associated Generalizations) whether or not the set of specific Classifiers are covering for a particular general classifier. When isCovering is true, every instance of a particular general Classifier is also an instance of at least one of its specific Classifiers for the GeneralizationSet. When isCovering is false, there are one or more instances of the particular general Classifier that are not instances of at least one of its specific Classifiers defined for the GeneralizationSet.")
    !ordered attr types.Boolean[1] isCovering = "false";

    @GenModel(documentation="Indicates whether or not the set of specific Classifiers in a Generalization relationship have instance in common. If isDisjoint is true, the specific Classifiers for a particular GeneralizationSet have no members in common; that is, their intersection is empty. If isDisjoint is false, the specific Classifiers in a particular GeneralizationSet have one or more members in common; that is, their intersection is not empty.")
    !ordered attr types.Boolean[1] isDisjoint = "false";

    @GenModel(documentation="Designates the Classifier that is defined as the power type for the associated GeneralizationSet, if there is one.")
    !ordered ref Classifier#powertypeExtent powertype;

    @GenModel(documentation="Designates the instances of Generalization that are members of this GeneralizationSet.")
    !ordered ref Generalization[*]#generalizationSet generalization;
  }

  @GenModel(documentation="An InstanceSpecification is a model element that represents an instance in a modeled system. An InstanceSpecification can act as a DeploymentTarget in a Deployment relationship, in the case that it represents an instance of a Node. It can also act as a DeployedArtifact, if it represents an instance of an Artifact.
deploymentForArtifact->notEmpty() implies classifier->exists(oclIsKindOf(Artifact))
classifier->forAll(c | (c.allSlottableFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))
slot->forAll(s | classifier->exists (c | c.allSlottableFeatures()->includes (s.definingFeature)))
deployment->notEmpty() implies classifier->exists(node | node.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p.type = node)))")
  @Ecore(constraints="deployment_artifact structural_feature defining_feature deployment_target")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(deployment_artifact="deploymentForArtifact->notEmpty() implies classifier->exists(oclIsKindOf(Artifact))", structural_feature="classifier->forAll(c | (c.allSlottableFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))", defining_feature="slot->forAll(s | classifier->exists (c | c.allSlottableFeatures()->includes (s.definingFeature)))", deployment_target="deployment->notEmpty() implies classifier->exists(node | node.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p.type = node)))")
  class InstanceSpecification extends deployments.DeploymentTarget, commonStructure.PackageableElement, deployments.DeployedArtifact {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="instanceSpecification")
    @GenModel(documentation="The Classifier or Classifiers of the represented instance. If multiple Classifiers are specified, the instance is classified by all of them.")
    !ordered ref Classifier[*] classifier;

    @GenModel(documentation="A Slot giving the value or values of a StructuralFeature of the instance. An InstanceSpecification can have one Slot per StructuralFeature of its Classifiers, including inherited features. It is not necessary to model a Slot for every StructuralFeature, in which case the InstanceSpecification is a partial description.")
    @subsets
    !ordered val Slot[*]#owningInstance slot;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="owningInstanceSpec")
    @GenModel(documentation="A specification of how to compute, derive, or construct the instance.")
    @subsets
    !ordered val values.ValueSpecification specification;
  }

  @GenModel(documentation="A Slot designates that an entity modeled by an InstanceSpecification has a value or values for a specific StructuralFeature.")
  class Slot extends commonStructure.Element {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="slot")
    @GenModel(documentation="The StructuralFeature that specifies the values that may be held by the Slot.")
    !ordered ref StructuralFeature[1] definingFeature;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="owningSlot")
    @GenModel(documentation="The value or values held by the Slot.")
    @subsets
    val values.ValueSpecification[*] value;

    @GenModel(documentation="The InstanceSpecification that owns this Slot.")
    @subsets
    !ordered ref InstanceSpecification[1]#slot owningInstance;
  }

  @GenModel(documentation="An InstanceValue is a ValueSpecification that identifies an instance.")
  class InstanceValue extends values.ValueSpecification {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="instanceValue")
    @GenModel(documentation="The InstanceSpecification that represents the specified value.")
    !ordered ref InstanceSpecification[1] instance;
  }

  @GenModel(documentation="A RedefinableTemplateSignature supports the addition of formal template parameters in a specialization of a template classifier.
classifier.allParents()->forAll(c | c.ownedTemplateSignature->notEmpty() implies self->closure(extendedSignature)->includes(c.ownedTemplateSignature))")
  @Ecore(constraints="redefines_parents")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(redefines_parents="classifier.allParents()->forAll(c | c.ownedTemplateSignature->notEmpty() implies self->closure(extendedSignature)->includes(c.ownedTemplateSignature))")
  @duplicates
  class RedefinableTemplateSignature extends RedefinableElement, commonStructure.TemplateSignature {

    @GenModel(documentation="Derivation for RedefinableTemplateSignature::/inheritedParameter")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if extendedSignature->isEmpty() then Set{} else extendedSignature.parameter->asSet() endif")
    !ordered op commonStructure.TemplateParameter[*] inheritedParameter();

    @GenModel(documentation="The Classifier that owns this RedefinableTemplateSignature.")
    @redefines
    @subsets
    !ordered readonly volatile transient ref Classifier[1] classifier;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="redefinableTemplateSignature")
    @GenModel(documentation="The signatures extended by this RedefinableTemplateSignature.")
    @subsets
    !ordered ref RedefinableTemplateSignature[*] extendedSignature;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="redefinableTemplateSignature")
    @GenModel(documentation="The formal template parameters of the extended signatures.")
    @subsets
    !ordered readonly volatile transient derived ref commonStructure.TemplateParameter[*] inheritedParameter;
  }

  @GenModel(documentation="A Classifier represents a classification of instances according to their Features.
parents()->forAll(c | self.maySpecializeType(c))
powertypeExtent->forAll( gs | 
  gs.generalization->forAll( gen | 
    not (gen.general = self) and not gen.general.allParents()->includes(self) and not (gen.specific = self) and not self.allParents()->includes(gen.specific) 
  ))
parents()->forAll(not isFinalSpecialization)
not allParents()->includes(self)")
  @Ecore(constraints="specialize_type maps_to_generalization_set non_final_parents no_cycles_in_generalization")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(specialize_type="parents()->forAll(c | self.maySpecializeType(c))", maps_to_generalization_set="powertypeExtent->forAll( gs | 
  gs.generalization->forAll( gen | 
    not (gen.general = self) and not gen.general.allParents()->includes(self) and not (gen.specific = self) and not self.allParents()->includes(gen.specific) 
  ))", non_final_parents="parents()->forAll(not isFinalSpecialization)", no_cycles_in_generalization="not allParents()->includes(self)")
  @duplicates
  abstract class Classifier extends commonStructure.Namespace, RedefinableElement, commonStructure.Type, commonStructure.TemplateableElement {

    @GenModel(documentation="The query allFeatures() gives all of the Features in the namespace of the Classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="member->select(oclIsKindOf(Feature))->collect(oclAsType(Feature))->asSet()")
    !ordered op Feature[*] allFeatures();

    @GenModel(documentation="The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="parents()->union(parents()->collect(allParents())->asSet())")
    !ordered op Classifier[*] allParents();

    @GenModel(documentation="The general Classifiers are the ones referenced by the Generalization relationships.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="parents()")
    !ordered op Classifier[*] general();

    @GenModel(documentation="The query hasVisibilityOf() determines whether a NamedElement is visible in the classifier. Non-private members are visible. It is only called when the argument is something owned by a parent.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="n.visibility <> VisibilityKind::private")
    !ordered op types.Boolean[1] hasVisibilityOf(!ordered commonStructure.NamedElement[1] n);

    @GenModel(documentation="The query inherit() defines how to inherit a set of elements passed as its argument.  It excludes redefined elements from the result.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="inhs->reject(inh |
  inh.oclIsKindOf(RedefinableElement) and
  ownedMember->select(oclIsKindOf(RedefinableElement))->
    select(redefinedElement->includes(inh.oclAsType(RedefinableElement)))
       ->notEmpty())")
    !ordered op commonStructure.NamedElement[*] inherit(!ordered commonStructure.NamedElement[*] inhs);

    @GenModel(documentation="The query inheritableMembers() gives all of the members of a Classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="member->select(m | c.hasVisibilityOf(m))")
    !ordered op commonStructure.NamedElement[*] inheritableMembers(!ordered Classifier[1] c);

    @GenModel(documentation="The inheritedMember association is derived by inheriting the inheritable members of the parents.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="inherit(parents()->collect(inheritableMembers(self))->asSet())")
    !ordered op commonStructure.NamedElement[*] inheritedMember();

    @GenModel(documentation="The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="self.oclIsKindOf(c.oclType())")
    !ordered op types.Boolean[1] maySpecializeType(!ordered Classifier[1] c);

    @GenModel(documentation="The query parents() gives all of the immediate ancestors of a generalized Classifier.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="generalization.general->asSet()")
    !ordered op Classifier[*] parents();

    @GenModel(documentation="The Interfaces directly realized by this Classifier")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="(clientDependency->
  select(oclIsKindOf(Realization) and supplier->forAll(oclIsKindOf(Interface))))->
      collect(supplier.oclAsType(Interface))->asSet()")
    !ordered op simpleClassifiers.Interface[*] directlyRealizedInterfaces();

    @GenModel(documentation="The Interfaces directly used by this Classifier")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="(supplierDependency->
  select(oclIsKindOf(Usage) and client->forAll(oclIsKindOf(Interface))))->
    collect(client.oclAsType(Interface))->asSet()")
    !ordered op simpleClassifiers.Interface[*] directlyUsedInterfaces();

    @GenModel(documentation="The Interfaces realized by this Classifier and all of its generalizations")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="directlyRealizedInterfaces()->union(self.allParents()->collect(directlyRealizedInterfaces()))->asSet()")
    !ordered op simpleClassifiers.Interface[*] allRealizedInterfaces();

    @GenModel(documentation="The Interfaces used by this Classifier and all of its generalizations")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="directlyUsedInterfaces()->union(self.allParents()->collect(directlyUsedInterfaces()))->asSet()")
    !ordered op simpleClassifiers.Interface[*] allUsedInterfaces();

    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="substitution.contract->includes(contract)")
    !ordered op types.Boolean[1] isSubstitutableFor(!ordered Classifier[1] contract);

    @GenModel(documentation="The query allAttributes gives an ordered set of all owned and inherited attributes of the Classifier. All owned attributes appear before any inherited attributes, and the attributes inherited from any more specific parent Classifier appear before those of any more general parent Classifier. However, if the Classifier has multiple immediate parents, then the relative ordering of the sets of attributes from those parents is not defined.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="attribute->asSequence()->union(parents()->asSequence().allAttributes())->select(p | member->includes(p))->asOrderedSet()")
    op Property[*] allAttributes();

    @GenModel(documentation="All StructuralFeatures related to the Classifier that may have Slots, including direct attributes, inherited attributes, private attributes in generalizations, and memberEnds of Associations, but excluding redefined StructuralFeatures.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="member->select(oclIsKindOf(StructuralFeature))->
  collect(oclAsType(StructuralFeature))->
   union(self.inherit(self.allParents()->collect(p | p.attribute)->asSet())->
     collect(oclAsType(StructuralFeature)))->asSet()")
    !ordered op StructuralFeature[*] allSlottableFeatures();

    @GenModel(documentation="The Substitutions owned by this Classifier.")
    @subsets
    !ordered val Substitution[*]#substitutingClassifier substitution;

    @GenModel(documentation="Specifies each Feature directly defined in the classifier. Note that there may be members of the Classifier that are of the type Feature but are not included, e.g., inherited features.")
    @union
    @subsets
    !ordered readonly volatile transient derived ref Feature[*]#featuringClassifier feature;

    @GenModel(documentation="The GeneralizationSet of which this Classifier is a power type.")
    !ordered ref GeneralizationSet[*]#powertype powertypeExtent;

    @GenModel(documentation="The Generalization relationships for this Classifier. These Generalizations navigate to more general Classifiers in the generalization hierarchy.")
    @subsets
    !ordered val Generalization[*]#specific generalization;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="classifier")
    @GenModel(documentation="All of the Properties that are direct (i.e., not inherited or imported) attributes of the Classifier.")
    @union
    @subsets
    readonly volatile transient derived ref Property[*] attribute;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="classifier")
    @GenModel(documentation="The CollaborationUses owned by the Classifier.")
    @subsets
    !ordered val structuredClassifiers.CollaborationUse[*] collaborationUse;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="classifier")
    @GenModel(documentation="The generalizing Classifiers for this Classifier.")
    !ordered volatile transient derived ref Classifier[*] general;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="inheritingClassifier")
    @GenModel(documentation="All elements inherited by this Classifier from its general Classifiers.")
    @subsets
    !ordered readonly volatile transient derived ref commonStructure.NamedElement[*] inheritedMember;

    @GenModel(documentation="If true, the Classifier can only be instantiated by instantiating one of its specializations. An abstract Classifier is intended to be used by other Classifiers e.g., as the target of Associations or Generalizations.")
    !ordered attr types.Boolean[1] isAbstract = "false";

    @GenModel(documentation="If true, the Classifier cannot be specialized.")
    !ordered attr types.Boolean[1] isFinalSpecialization = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="classifier")
    @GenModel(documentation="The UseCases owned by this classifier.")
    @subsets
    !ordered val useCases.UseCase[*] ownedUseCase;

    @GenModel(documentation="The set of UseCases for which this Classifier is the subject.")
    !ordered ref useCases.UseCase[*]#subject useCase;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="classifier")
    @GenModel(documentation="The Classifiers redefined by this Classifier.")
    @subsets
    !ordered ref Classifier[*] redefinedClassifier;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="classifier")
    @GenModel(documentation="A CollaborationUse which indicates the Collaboration that represents this Classifier.")
    @subsets
    !ordered ref structuredClassifiers.CollaborationUse representation;
  }

}

@"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="Deployments")
@Ecore(validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL", invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL")
@namespace(uri="http:///uml/deployments.ecore", prefix="uml.deployments")
package deployments {
  @GenModel(documentation="An artifact is the specification of a physical piece of information that is used or produced by a software development process, or by deployment and operation of a system. Examples of artifacts include model files, source files, scripts, and binary executable files, a table in a database system, a development deliverable, or a word-processing document, a mail message.
An artifact is the source of a deployment to a node.")
  class Artifact extends classification.Classifier, DeployedArtifact {

    @GenModel(documentation="A concrete name that is used to refer to the Artifact in a physical context. Example: file system name, universal resource locator.")
    !ordered attr types.String fileName;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="artifact")
    @GenModel(documentation="The set of model elements that are manifested in the Artifact. That is, these model elements are utilized in the construction (or generation) of the artifact.")
    @subsets
    !ordered val Manifestation[*] manifestation;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="artifact")
    @GenModel(documentation="The Artifacts that are defined (nested) within the Artifact. The association is a specialization of the ownedMember association from Namespace to NamedElement.")
    @subsets
    !ordered val Artifact[*] nestedArtifact;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="artifact")
    @GenModel(documentation="The attributes or association ends defined for the Artifact. The association is a specialization of the ownedMember association.")
    @subsets
    val classification.Property[*] ownedAttribute;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="artifact")
    @GenModel(documentation="The Operations defined for the Artifact. The association is a specialization of the ownedMember association.")
    @subsets
    val classification.Operation[*] ownedOperation;
  }

  @GenModel(documentation="A deployed artifact is an artifact or artifact instance that has been deployed to a deployment target.")
  abstract class DeployedArtifact extends commonStructure.NamedElement {
  }

  @GenModel(documentation="A manifestation is the concrete physical rendering of one or more model elements by an artifact.")
  class Manifestation extends commonStructure.Abstraction {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="manifestation")
    @GenModel(documentation="The model element that is utilized in the manifestation in an Artifact.")
    @subsets
    !ordered ref commonStructure.PackageableElement[1] utilizedElement;
  }

  @GenModel(documentation="A communication path is an association between two deployment targets, through which they are able to exchange signals and messages.
endType->forAll (oclIsKindOf(DeploymentTarget))")
  @Ecore(constraints="association_ends")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(association_ends="endType->forAll (oclIsKindOf(DeploymentTarget))")
  class CommunicationPath extends structuredClassifiers.Association {
  }

  @GenModel(documentation="A deployment is the allocation of an artifact or artifact instance to a deployment target.
A component deployment is the deployment of one or more artifacts or artifact instances to a deployment target, optionally parameterized by a deployment specification. Examples are executables and configuration files.")
  class Deployment extends commonStructure.Dependency {

    @GenModel(documentation="The specification of properties that parameterize the deployment and execution of one or more Artifacts.")
    @subsets
    !ordered val DeploymentSpecification[*]#deployment configuration;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="deploymentForArtifact")
    @GenModel(documentation="The Artifacts that are deployed onto a Node. This association specializes the supplier association.")
    @subsets
    !ordered ref DeployedArtifact[*] deployedArtifact;

    @GenModel(documentation="The DeployedTarget which is the target of a Deployment.")
    @subsets
    !ordered ref DeploymentTarget[1]#deployment location;
  }

  @GenModel(documentation="A deployment specification specifies a set of properties that determine execution parameters of a component artifact that is deployed on a node. A deployment specification can be aimed at a specific type of container. An artifact that reifies or implements deployment specification properties is a deployment descriptor.
deployment->forAll (location.oclIsKindOf(ExecutionEnvironment))
deployment->forAll (location.deployedElement->forAll (oclIsKindOf(Component)))")
  @Ecore(constraints="deployment_target deployed_elements")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(deployment_target="deployment->forAll (location.oclIsKindOf(ExecutionEnvironment))", deployed_elements="deployment->forAll (location.deployedElement->forAll (oclIsKindOf(Component)))")
  class DeploymentSpecification extends Artifact {

    @GenModel(documentation="The location where an Artifact is deployed onto a Node. This is typically a 'directory' or 'memory address.'")
    !ordered attr types.String deploymentLocation;

    @GenModel(documentation="The location where a component Artifact executes. This may be a local or remote location.")
    !ordered attr types.String executionLocation;

    @GenModel(documentation="The deployment with which the DeploymentSpecification is associated.")
    @subsets
    !ordered ref Deployment#configuration deployment;
  }

  @GenModel(documentation="A device is a physical computational resource with processing capability upon which artifacts may be deployed for execution. Devices may be complex (i.e., they may consist of other devices).")
  class Device extends Node {
  }

  @GenModel(documentation="A Node is computational resource upon which artifacts may be deployed for execution. Nodes can be interconnected through communication paths to define network structures.
part->forAll(oclIsKindOf(Node))")
  @Ecore(constraints="internal_structure")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(internal_structure="part->forAll(oclIsKindOf(Node))")
  class Node extends structuredClassifiers.Class, DeploymentTarget {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="node")
    @GenModel(documentation="The Nodes that are defined (nested) within the Node.")
    @subsets
    !ordered val Node[*] nestedNode;
  }

  @GenModel(documentation="An execution environment is a node that offers an execution environment for specific types of components that are deployed on it in the form of executable artifacts.")
  class ExecutionEnvironment extends Node {
  }

  @GenModel(documentation="A deployment target is the location for a deployed artifact.")
  abstract class DeploymentTarget extends commonStructure.NamedElement {

    @GenModel(documentation="Derivation for DeploymentTarget::/deployedElement")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="deployment.deployedArtifact->select(oclIsKindOf(Artifact))->collect(oclAsType(Artifact).manifestation)->collect(utilizedElement)->asSet()")
    !ordered op commonStructure.PackageableElement[*] deployedElement();

    @GenModel(documentation="The set of Deployments for a DeploymentTarget.")
    @subsets
    !ordered val Deployment[*]#location deployment;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="deploymentTarget")
    @GenModel(documentation="The set of elements that are manifested in an Artifact that is involved in Deployment to a DeploymentTarget.")
    !ordered readonly volatile transient derived ref commonStructure.PackageableElement[*] deployedElement;
  }

}

@"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="StateMachines")
@Ecore(validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL", invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL")
@namespace(uri="http:///uml/stateMachines.ecore", prefix="uml.stateMachines")
package stateMachines {
  @GenModel(documentation="A ConnectionPointReference represents a usage (as part of a submachine State) of an entry/exit point Pseudostate defined in the StateMachine referenced by the submachine State.
exit->forAll(kind = PseudostateKind::exitPoint)
entry->forAll(kind = PseudostateKind::entryPoint)")
  @Ecore(constraints="exit_pseudostates entry_pseudostates")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(exit_pseudostates="exit->forAll(kind = PseudostateKind::exitPoint)", entry_pseudostates="entry->forAll(kind = PseudostateKind::entryPoint)")
  class ConnectionPointReference extends Vertex {

    @GenModel(documentation="The State in which the ConnectionPointReference is defined.")
    @subsets
    !ordered ref State#connection state;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="connectionPointReference")
    @GenModel(documentation="The entryPoint Pseudostates corresponding to this connection point.")
    !ordered ref Pseudostate[*] entry;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="connectionPointReference")
    @GenModel(documentation="The exitPoints kind Pseudostates corresponding to this connection point.")
    !ordered ref Pseudostate[*] exit;
  }

  @GenModel(documentation="A Vertex is an abstraction of a node in a StateMachine graph. It can be the source or destination of any number of Transitions.")
  abstract class Vertex extends commonStructure.NamedElement {

    @GenModel(documentation="The operation containingStateMachine() returns the StateMachine in which this Vertex is defined.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if container <> null
then
-- the container is a region
   container.containingStateMachine()
else 
   if (self.oclIsKindOf(Pseudostate)) and ((self.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint) or (self.oclAsType(Pseudostate).kind = PseudostateKind::exitPoint)) then
      self.oclAsType(Pseudostate).stateMachine
   else 
      if (self.oclIsKindOf(ConnectionPointReference)) then
          self.oclAsType(ConnectionPointReference).state.containingStateMachine() -- no other valid cases possible
      else 
          null
      endif
   endif
endif")
    !ordered op StateMachine[1] containingStateMachine();

    @GenModel(documentation="Derivation for Vertex::/incoming.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="Transition.allInstances()->select(target=self)")
    !ordered op Transition[*] incoming();

    @GenModel(documentation="Derivation for Vertex::/outgoing")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="Transition.allInstances()->select(source=self)")
    !ordered op Transition[*] outgoing();

    @GenModel(documentation="This utility operation returns true if the Vertex is contained in the State s (input argument).")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if not s.isComposite() or container->isEmpty() then
	false
else
	if container.state = s then 
		true
	else
		container.state.isContainedInState(s)
	endif
endif")
    !ordered op types.Boolean[1] isContainedInState(!ordered State[1] s);

    @GenModel(documentation="This utility query returns true if the Vertex is contained in the Region r (input argument).")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if (container = r) then
	true
else
	if (r.state->isEmpty()) then
		false
	else
		container.state.isContainedInRegion(r)
	endif
endif")
    !ordered op types.Boolean[1] isContainedInRegion(!ordered Region[1] r);

    @GenModel(documentation="The Region that contains this Vertex.")
    @subsets
    !ordered ref Region#subvertex container;

    @GenModel(documentation="Specifies the Transitions departing from this Vertex.")
    !ordered readonly volatile transient derived ref Transition[*]#source outgoing;

    @GenModel(documentation="Specifies the Transitions entering this Vertex.")
    !ordered readonly volatile transient derived ref Transition[*]#target incoming;
  }

  @GenModel(documentation="A Region is a top-level part of a StateMachine or a composite State, that serves as a container for the Vertices and Transitions of the StateMachine. A StateMachine or composite State may contain multiple Regions representing behaviors that may occur in parallel.
self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->
   select(kind = PseudostateKind::deepHistory)->size() <= 1

subvertex->select(oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->
  select(kind = PseudostateKind::shallowHistory)->size() <= 1

(stateMachine <> null implies state = null) and (state <> null implies stateMachine = null)
self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->
  select(kind = PseudostateKind::initial)->size() <= 1
")
  @Ecore(constraints="deep_history_vertex shallow_history_vertex owned initial_vertex")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(deep_history_vertex="self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->
   select(kind = PseudostateKind::deepHistory)->size() <= 1
", shallow_history_vertex="subvertex->select(oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->
  select(kind = PseudostateKind::shallowHistory)->size() <= 1
", owned="(stateMachine <> null implies state = null) and (state <> null implies stateMachine = null)", initial_vertex="self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->
  select(kind = PseudostateKind::initial)->size() <= 1
")
  @duplicates
  class Region extends commonStructure.Namespace, classification.RedefinableElement {

    @"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="belongsToPSM")
    @GenModel(documentation="The operation belongsToPSM () checks if the Region belongs to a ProtocolStateMachine.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if  stateMachine <> null 
then
  stateMachine.oclIsKindOf(ProtocolStateMachine)
else 
  state <> null  implies  state.container.belongsToPSM()
endif")
    !ordered op types.Boolean[1] belongsToPsm();

    @GenModel(documentation="The operation containingStateMachine() returns the StateMachine in which this Region is defined.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if stateMachine = null 
then
  state.containingStateMachine()
else
  stateMachine
endif")
    !ordered op StateMachine[1] containingStateMachine();

    @GenModel(documentation="The redefinition context of a Region is the nearest containing StateMachine.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="let sm : StateMachine = containingStateMachine() in
if sm._'context' = null or sm.general->notEmpty() then
  sm
else
  sm._'context'
endif")
    !ordered op classification.Classifier[1] redefinitionContext();

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="region")
    @GenModel(documentation="The region of which this region is an extension.")
    @subsets
    !ordered ref Region extendedRegion;

    @GenModel(documentation="The State that owns the Region. If a Region is owned by a State, then it cannot also be owned by a StateMachine.")
    @subsets
    !ordered ref State#region state;

    @GenModel(documentation="The StateMachine that owns the Region. If a Region is owned by a StateMachine, then it cannot also be owned by a State.")
    @subsets
    !ordered ref StateMachine#region stateMachine;

    @GenModel(documentation="The set of Transitions owned by the Region.")
    @subsets
    !ordered val Transition[*]#container transition;

    @GenModel(documentation="The set of Vertices that are owned by this Region.")
    @subsets
    !ordered val Vertex[*]#container subvertex;
  }

  @GenModel(documentation="A State models a situation during which some (usually implicit) invariant condition holds.
connectionPoint->forAll(kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)
isSubmachineState implies connection->notEmpty( )
connectionPoint->notEmpty() implies isComposite
self.isSubmachineState implies (self.connection->forAll (cp |
  cp.entry->forAll (ps | ps.stateMachine = self.submachine) and
  cp.exit->forAll (ps | ps.stateMachine = self.submachine)))
isComposite implies not isSubmachineState")
  @Ecore(constraints="entry_or_exit submachine_states composite_states destinations_or_sources_of_transitions submachine_or_regions")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(entry_or_exit="connectionPoint->forAll(kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)", submachine_states="isSubmachineState implies connection->notEmpty( )", composite_states="connectionPoint->notEmpty() implies isComposite", destinations_or_sources_of_transitions="self.isSubmachineState implies (self.connection->forAll (cp |
  cp.entry->forAll (ps | ps.stateMachine = self.submachine) and
  cp.exit->forAll (ps | ps.stateMachine = self.submachine)))", submachine_or_regions="isComposite implies not isSubmachineState")
  @duplicates
  class State extends commonStructure.Namespace, classification.RedefinableElement, Vertex {

    @GenModel(documentation="A composite State is a State with at least one Region.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="region->notEmpty()")
    !ordered op types.Boolean[1] isComposite();

    @GenModel(documentation="An orthogonal State is a composite state with at least 2 regions.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="region->size () > 1")
    !ordered op types.Boolean[1] isOrthogonal();

    @GenModel(documentation="A simple State is a State without any regions.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="(region->isEmpty()) and not isSubmachineState()")
    !ordered op types.Boolean[1] isSimple();

    @GenModel(documentation="Only submachine State references another StateMachine.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="submachine <> null")
    !ordered op types.Boolean[1] isSubmachineState();

    @GenModel(documentation="The redefinition context of a State is the nearest containing StateMachine.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="let sm : StateMachine = containingStateMachine() in
if sm._'context' = null or sm.general->notEmpty() then
  sm
else
  sm._'context'
endif")
    !ordered op classification.Classifier[1] redefinitionContext();

    @GenModel(documentation="The entry and exit connection points used in conjunction with this (submachine) State, i.e., as targets and sources, respectively, in the Region with the submachine State. A connection point reference references the corresponding definition of a connection point Pseudostate in the StateMachine referenced by the submachine State.")
    @subsets
    !ordered val ConnectionPointReference[*]#state connection;

    @GenModel(documentation="The entry and exit Pseudostates of a composite State. These can only be entry or exit Pseudostates, and they must have different names. They can only be defined for composite States.")
    @subsets
    !ordered val Pseudostate[*]#state connectionPoint;

    @GenModel(documentation="The StateMachine that is to be inserted in place of the (submachine) State.")
    !ordered ref StateMachine#submachineState submachine;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="state")
    @GenModel(documentation="A list of Triggers that are candidates to be retained by the StateMachine if they trigger no Transitions out of the State (not consumed). A deferred Trigger is retained until the StateMachine reaches a State configuration where it is no longer deferred.")
    @subsets
    !ordered val commonBehavior.Trigger[*] deferrableTrigger;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="state")
    @GenModel(documentation="An optional Behavior that is executed while being in the State. The execution starts when this State is entered, and ceases either by itself when done, or when the State is exited, whichever comes first.")
    @subsets
    !ordered val commonBehavior.Behavior doActivity;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="state")
    @GenModel(documentation="An optional Behavior that is executed whenever this State is entered regardless of the Transition taken to reach the State. If defined, entry Behaviors are always executed to completion prior to any internal Behavior or Transitions performed within the State.")
    @subsets
    !ordered val commonBehavior.Behavior entry;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="state")
    @GenModel(documentation="An optional Behavior that is executed whenever this State is exited regardless of which Transition was taken out of the State. If defined, exit Behaviors are always executed to completion only after all internal and transition Behaviors have completed execution.")
    @subsets
    !ordered val commonBehavior.Behavior exit;

    @GenModel(documentation="A state with isComposite=true is said to be a composite State. A composite State is a State that contains at least one Region.")
    !ordered readonly volatile transient derived attr types.Boolean[1] isComposite;

    @GenModel(documentation="A State with isOrthogonal=true is said to be an orthogonal composite State An orthogonal composite State contains two or more Regions.")
    !ordered readonly volatile transient derived attr types.Boolean[1] isOrthogonal;

    @GenModel(documentation="A State with isSimple=true is said to be a simple State A simple State does not have any Regions and it does not refer to any submachine StateMachine.")
    !ordered readonly volatile transient derived attr types.Boolean[1] isSimple;

    @GenModel(documentation="A State with isSubmachineState=true is said to be a submachine State Such a State refers to another StateMachine(submachine).")
    !ordered readonly volatile transient derived attr types.Boolean[1] isSubmachineState;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="state")
    @GenModel(documentation="The State of which this State is a redefinition.")
    @subsets
    !ordered ref State redefinedState;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="owningState")
    @GenModel(documentation="Specifies conditions that are always true when this State is the current State. In ProtocolStateMachines state invariants are additional conditions to the preconditions of the outgoing Transitions, and to the postcondition of the incoming Transitions.")
    @subsets
    !ordered ref commonStructure.Constraint stateInvariant;

    @GenModel(documentation="The Regions owned directly by the State.")
    @subsets
    !ordered val Region[*]#state region;
  }

  @GenModel(documentation="A Pseudostate is an abstraction that encompasses different types of transient Vertices in the StateMachine graph. A StateMachine instance never comes to rest in a Pseudostate, instead, it will exit and enter the Pseudostate within a single run-to-completion step.
(kind = PseudostateKind::fork) implies

-- for any pair of outgoing transitions there exists an orthogonal state which contains the targets of these transitions 
-- such that these targets belong to different regions of that orthogonal state 

outgoing->forAll(t1:Transition, t2:Transition | let contState:State = containingStateMachine().LCAState(t1.target, t2.target) in
	((contState <> null) and (contState.region
		->exists(r1:Region, r2: Region | (r1 <> r2) and t1.target.isContainedInRegion(r1) and t2.target.isContainedInRegion(r2)))))
	
(kind = PseudostateKind::choice) implies (incoming->size() >= 1 and outgoing->size() >= 1)

(kind = PseudostateKind::initial) implies (outgoing.guard = null and outgoing.trigger->isEmpty())
(kind = PseudostateKind::join) implies (outgoing->size() = 1 and incoming->size() >= 2)

(kind = PseudostateKind::junction) implies (incoming->size() >= 1 and outgoing->size() >= 1)

((kind = PseudostateKind::deepHistory) or (kind = PseudostateKind::shallowHistory)) implies (outgoing->size() <= 1)

(kind = PseudostateKind::initial) implies (outgoing->size() <= 1)
(kind = PseudostateKind::fork) implies (incoming->size() = 1 and outgoing->size() >= 2)

(kind = PseudostateKind::join) implies

-- for any pair of incoming transitions there exists an orthogonal state which contains the source vetices of these transitions 
-- such that these source vertices belong to different regions of that orthogonal state 

incoming->forAll(t1:Transition, t2:Transition | let contState:State = containingStateMachine().LCAState(t1.source, t2.source) in
	((contState <> null) and (contState.region
		->exists(r1:Region, r2: Region | (r1 <> r2) and t1.source.isContainedInRegion(r1) and t2.source.isContainedInRegion(r2)))))")
  @Ecore(constraints="transitions_outgoing choice_vertex outgoing_from_initial join_vertex junction_vertex history_vertices initial_vertex fork_vertex transitions_incoming")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(transitions_outgoing="(kind = PseudostateKind::fork) implies

-- for any pair of outgoing transitions there exists an orthogonal state which contains the targets of these transitions 
-- such that these targets belong to different regions of that orthogonal state 

outgoing->forAll(t1:Transition, t2:Transition | let contState:State = containingStateMachine().LCAState(t1.target, t2.target) in
	((contState <> null) and (contState.region
		->exists(r1:Region, r2: Region | (r1 <> r2) and t1.target.isContainedInRegion(r1) and t2.target.isContainedInRegion(r2)))))
	", choice_vertex="(kind = PseudostateKind::choice) implies (incoming->size() >= 1 and outgoing->size() >= 1)
", outgoing_from_initial="(kind = PseudostateKind::initial) implies (outgoing.guard = null and outgoing.trigger->isEmpty())", join_vertex="(kind = PseudostateKind::join) implies (outgoing->size() = 1 and incoming->size() >= 2)
", junction_vertex="(kind = PseudostateKind::junction) implies (incoming->size() >= 1 and outgoing->size() >= 1)
", history_vertices="((kind = PseudostateKind::deepHistory) or (kind = PseudostateKind::shallowHistory)) implies (outgoing->size() <= 1)
", initial_vertex="(kind = PseudostateKind::initial) implies (outgoing->size() <= 1)", fork_vertex="(kind = PseudostateKind::fork) implies (incoming->size() = 1 and outgoing->size() >= 2)
", transitions_incoming="(kind = PseudostateKind::join) implies

-- for any pair of incoming transitions there exists an orthogonal state which contains the source vetices of these transitions 
-- such that these source vertices belong to different regions of that orthogonal state 

incoming->forAll(t1:Transition, t2:Transition | let contState:State = containingStateMachine().LCAState(t1.source, t2.source) in
	((contState <> null) and (contState.region
		->exists(r1:Region, r2: Region | (r1 <> r2) and t1.source.isContainedInRegion(r1) and t2.source.isContainedInRegion(r2)))))")
  class Pseudostate extends Vertex {

    @GenModel(documentation="Determines the precise type of the Pseudostate and can be one of: entryPoint, exitPoint, initial, deepHistory, shallowHistory, join, fork, junction, terminate or choice.")
    !ordered attr PseudostateKind[1] kind = "initial";

    @GenModel(documentation="The StateMachine in which this Pseudostate is defined. This only applies to Pseudostates of the kind entryPoint or exitPoint.")
    @subsets
    !ordered ref StateMachine#connectionPoint stateMachine;

    @GenModel(documentation="The State that owns this Pseudostate and in which it appears.")
    @subsets
    !ordered ref State#connectionPoint state;
  }

  @GenModel(documentation="PseudostateKind is an Enumeration type that is used to differentiate various kinds of Pseudostates.")
  enum PseudostateKind {
    initial = 0;
    deepHistory = 1;
    shallowHistory = 2;
    join = 3;
    fork = 4;
    junction = 5;
    choice = 6;
    entryPoint = 7;
    exitPoint = 8;
    terminate = 9;
  }

  @GenModel(documentation="StateMachines can be used to express event-driven behaviors of parts of a system. Behavior is modeled as a traversal of a graph of Vertices interconnected by one or more joined Transition arcs that are triggered by the dispatching of successive Event occurrences. During this traversal, the StateMachine may execute a sequence of Behaviors associated with various elements of the StateMachine.
connectionPoint->forAll (kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)
_'context' <> null implies not _'context'.oclIsKindOf(Interface)
specification <> null implies connectionPoint->isEmpty()
specification <> null implies ( _'context' <> null and specification.featuringClassifier->exists(c | c = _'context'))")
  @Ecore(constraints="connection_points classifier_context method context_classifier")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(connection_points="connectionPoint->forAll (kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)", classifier_context="_'context' <> null implies not _'context'.oclIsKindOf(Interface)", method="specification <> null implies connectionPoint->isEmpty()", context_classifier="specification <> null implies ( _'context' <> null and specification.featuringClassifier->exists(c | c = _'context'))")
  @duplicates
  class StateMachine extends commonBehavior.Behavior {

    @"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="LCA")
    @GenModel(documentation="The operation LCA(s1,s2) returns the Region that is the least common ancestor of Vertices s1 and s2, based on the StateMachine containment hierarchy.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if ancestor(s1, s2) then 
    s2.container
else
	if ancestor(s2, s1) then
	    s1.container 
	else 
	    LCA(s1.container.state, s2.container.state)
	endif
endif")
    !ordered op Region[1] lca(!ordered Vertex[1] s1, !ordered Vertex[1] s2);

    @GenModel(documentation="The query ancestor(s1, s2) checks whether Vertex s2 is an ancestor of Vertex s1.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if (s2 = s1) then 
	true 
else 
	if s1.container.stateMachine->notEmpty() then 
	    true
	else 
	    if s2.container.stateMachine->notEmpty() then 
	        false
	    else
	        ancestor(s1, s2.container.state)
	     endif
	 endif
endif")
    !ordered op types.Boolean[1] ancestor(!ordered Vertex[1] s1, !ordered Vertex[1] s2);

    @"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="LCAState")
    @GenModel(documentation="This utility funciton is like the LCA, except that it returns the nearest composite State that contains both input Vertices.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if v2.oclIsTypeOf(State) and ancestor(v1, v2) then
	v2.oclAsType(State)
else if v1.oclIsTypeOf(State) and ancestor(v2, v1) then
	v1.oclAsType(State)
else if (v1.container.state->isEmpty() or v2.container.state->isEmpty()) then 
	null.oclAsType(State)
else LCAState(v1.container.state, v2.container.state)
endif endif endif")
    !ordered op State[1] lcaState(!ordered Vertex[1] v1, !ordered Vertex[1] v2);

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="stateMachine")
    @GenModel(documentation="The StateMachines of which this is an extension.")
    @redefines
    !ordered ref StateMachine[*] extendedStateMachine;

    @GenModel(documentation="The Regions owned directly by the StateMachine.")
    @subsets
    !ordered val Region[+]#stateMachine region;

    @GenModel(documentation="References the submachine(s) in case of a submachine State. Multiple machines are referenced in case of a concurrent State.")
    !ordered ref State[*]#submachine submachineState;

    @GenModel(documentation="The connection points defined for this StateMachine. They represent the interface of the StateMachine when used as part of submachine State")
    @subsets
    !ordered val Pseudostate[*]#stateMachine connectionPoint;
  }

  @GenModel(documentation="A Transition represents an arc between exactly one source Vertex and exactly one Target vertex (the source and targets may be the same Vertex). It may form part of a compound transition, which takes the StateMachine from one steady State configuration to another, representing the full response of the StateMachine to an occurrence of an Event that triggered it.
(kind = TransitionKind::external) implies
	not (source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint)
(target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (guard = null and trigger->isEmpty())
(kind = TransitionKind::internal) implies
		(source.oclIsKindOf (State) and source = target)
source.oclIsKindOf(Pseudostate) and (source.oclAsType(Pseudostate).kind <> PseudostateKind::initial) implies trigger->isEmpty()
(target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (source.oclIsKindOf(State))
(source.oclIsKindOf(Pseudostate) and  source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (target.oclIsKindOf(State))
(kind = TransitionKind::local) implies
		((source.oclIsKindOf (State) and source.oclAsType(State).isComposite) or
		(source.oclIsKindOf (Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint))
(source.oclIsKindOf(Pseudostate) and container.stateMachine->notEmpty()) implies
	trigger->isEmpty()

(source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (guard = null and trigger->isEmpty())")
  @Ecore(constraints="state_is_external join_segment_guards state_is_internal outgoing_pseudostates join_segment_state fork_segment_state state_is_local initial_transition fork_segment_guards")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(state_is_external="(kind = TransitionKind::external) implies
	not (source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint)", join_segment_guards="(target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (guard = null and trigger->isEmpty())", state_is_internal="(kind = TransitionKind::internal) implies
		(source.oclIsKindOf (State) and source = target)", outgoing_pseudostates="source.oclIsKindOf(Pseudostate) and (source.oclAsType(Pseudostate).kind <> PseudostateKind::initial) implies trigger->isEmpty()", join_segment_state="(target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (source.oclIsKindOf(State))", fork_segment_state="(source.oclIsKindOf(Pseudostate) and  source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (target.oclIsKindOf(State))", state_is_local="(kind = TransitionKind::local) implies
		((source.oclIsKindOf (State) and source.oclAsType(State).isComposite) or
		(source.oclIsKindOf (Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint))", initial_transition="(source.oclIsKindOf(Pseudostate) and container.stateMachine->notEmpty()) implies
	trigger->isEmpty()
", fork_segment_guards="(source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (guard = null and trigger->isEmpty())")
  @duplicates
  class Transition extends commonStructure.Namespace, classification.RedefinableElement {

    @GenModel(documentation="The query containingStateMachine() returns the StateMachine that contains the Transition either directly or transitively.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="container.containingStateMachine()")
    !ordered op StateMachine[1] containingStateMachine();

    @GenModel(documentation="The redefinition context of a Transition is the nearest containing StateMachine.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="let sm : StateMachine = containingStateMachine() in
if sm._'context' = null or sm.general->notEmpty() then
  sm
else
  sm._'context'
endif")
    !ordered op classification.Classifier[1] redefinitionContext();

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="transition")
    @GenModel(documentation="Specifies an optional behavior to be performed when the Transition fires.")
    @subsets
    !ordered val commonBehavior.Behavior effect;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="transition")
    @GenModel(documentation="A guard is a Constraint that provides a fine-grained control over the firing of the Transition. The guard is evaluated when an Event occurrence is dispatched by the StateMachine. If the guard is true at that time, the Transition may be enabled, otherwise, it is disabled. Guards should be pure expressions without side effects. Guard expressions with side effects are ill formed.")
    @subsets
    !ordered ref commonStructure.Constraint guard;

    @GenModel(documentation="Indicates the precise type of the Transition.")
    !ordered attr TransitionKind[1] kind = "external";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="transition")
    @GenModel(documentation="The Transition that is redefined by this Transition.")
    @subsets
    !ordered ref Transition redefinedTransition;

    @GenModel(documentation="Designates the originating Vertex (State or Pseudostate) of the Transition.")
    !ordered volatile transient derived ref Vertex[1]#outgoing source;

    @GenModel(documentation="Designates the target Vertex that is reached when the Transition is taken.")
    !ordered volatile transient derived ref Vertex[1]#incoming target;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="transition")
    @GenModel(documentation="Specifies the Triggers that may fire the transition.")
    @subsets
    !ordered val commonBehavior.Trigger[*] trigger;

    @GenModel(documentation="Designates the Region that owns this Transition.")
    @subsets
    !ordered ref Region[1]#transition container;
  }

  @GenModel(documentation="TransitionKind is an Enumeration type used to differentiate the various kinds of Transitions.")
  enum TransitionKind {

    @GenModel(documentation="Implies that the Transition, if triggered, occurs without exiting or entering the source State (i.e., it does not cause a state change). This means that the entry or exit condition of the source State will not be invoked. An internal Transition can be taken even if the SateMachine is in one or more Regions nested within the associated State.")
    internal = 0;

    @GenModel(documentation="Implies that the Transition, if triggered, will not exit the composite (source) State, but it will exit and re-enter any state within the composite State that is in the current state configuration.")
    local = 1;

    @GenModel(documentation="Implies that the Transition, if triggered, will exit the composite (source) State.")
    external = 2;
  }

  @GenModel(documentation="A special kind of State, which, when entered, signifies that the enclosing Region has completed. If the enclosing Region is directly contained in a StateMachine and all other Regions in that StateMachine also are completed, then it means that the entire StateMachine behavior is completed.
exit->isEmpty()
outgoing->size() = 0
region->size() = 0
submachine->isEmpty()
entry->isEmpty()
doActivity->isEmpty()")
  @Ecore(constraints="no_exit_behavior no_outgoing_transitions no_regions cannot_reference_submachine no_entry_behavior no_state_behavior")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(no_exit_behavior="exit->isEmpty()", no_outgoing_transitions="outgoing->size() = 0", no_regions="region->size() = 0", cannot_reference_submachine="submachine->isEmpty()", no_entry_behavior="entry->isEmpty()", no_state_behavior="doActivity->isEmpty()")
  class FinalState extends State {
  }

  @GenModel(documentation="A ProtocolStateMachine can be redefined into a more specific ProtocolStateMachine or into behavioral StateMachine. ProtocolConformance declares that the specific ProtocolStateMachine specifies a protocol that conforms to the general ProtocolStateMachine or that the specific behavioral StateMachine abides by the protocol of the general ProtocolStateMachine.")
  class ProtocolConformance extends commonStructure.DirectedRelationship {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="protocolConformance")
    @GenModel(documentation="Specifies the ProtocolStateMachine to which the specific ProtocolStateMachine conforms.")
    @subsets
    !ordered ref ProtocolStateMachine[1] generalMachine;

    @GenModel(documentation="Specifies the ProtocolStateMachine which conforms to the general ProtocolStateMachine.")
    @subsets
    !ordered ref ProtocolStateMachine[1]#conformance specificMachine;
  }

  @GenModel(documentation="A ProtocolTransition specifies a legal Transition for an Operation. Transitions of ProtocolStateMachines have the following information: a pre-condition (guard), a Trigger, and a post-condition. Every ProtocolTransition is associated with at most one BehavioralFeature belonging to the context Classifier of the ProtocolStateMachine.
if (referred()->notEmpty() and containingStateMachine()._'context'->notEmpty()) then 
    containingStateMachine()._'context'.oclAsType(BehavioredClassifier).allFeatures()->includesAll(referred())
else true endif
effect = null
container.belongsToPSM()")
  @Ecore(constraints="refers_to_operation associated_actions belongs_to_psm")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(refers_to_operation="if (referred()->notEmpty() and containingStateMachine()._'context'->notEmpty()) then 
    containingStateMachine()._'context'.oclAsType(BehavioredClassifier).allFeatures()->includesAll(referred())
else true endif", associated_actions="effect = null", belongs_to_psm="container.belongsToPSM()")
  class ProtocolTransition extends Transition {

    @GenModel(documentation="Derivation for ProtocolTransition::/referred")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="trigger->collect(event)->select(oclIsKindOf(CallEvent))->collect(oclAsType(CallEvent).operation)->asSet()")
    !ordered op classification.Operation[*] referred();

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="owningTransition")
    @GenModel(documentation="Specifies the post condition of the Transition which is the Condition that should be obtained once the Transition is triggered. This post condition is part of the post condition of the Operation connected to the Transition.")
    @subsets
    !ordered ref commonStructure.Constraint postCondition;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="protocolTransition")
    @GenModel(documentation="Specifies the precondition of the Transition. It specifies the Condition that should be verified before triggering the Transition. This guard condition added to the source State will be evaluated as part of the precondition of the Operation referred by the Transition if any.")
    @subsets
    !ordered ref commonStructure.Constraint preCondition;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="protocolTransition")
    @GenModel(documentation="This association refers to the associated Operation. It is derived from the Operation of the CallEvent Trigger when applicable.")
    !ordered readonly volatile transient derived ref classification.Operation[*] referred;
  }

  @GenModel(documentation="A ProtocolStateMachine is always defined in the context of a Classifier. It specifies which BehavioralFeatures of the Classifier can be called in which State and under which conditions, thus specifying the allowed invocation sequences on the Classifier's BehavioralFeatures. A ProtocolStateMachine specifies the possible and permitted Transitions on the instances of its context Classifier, together with the BehavioralFeatures that carry the Transitions. In this manner, an instance lifecycle can be specified for a Classifier, by defining the order in which the BehavioralFeatures can be activated and the States through which an instance progresses during its existence.
_'context' <> null and specification = null
region->forAll (r | r.subvertex->forAll (v | v.oclIsKindOf(Pseudostate) implies
((v.oclAsType(Pseudostate).kind <>  PseudostateKind::deepHistory) and (v.oclAsType(Pseudostate).kind <> PseudostateKind::shallowHistory))))

region->forAll(r | r.subvertex->forAll(v | v.oclIsKindOf(State) implies
(v.oclAsType(State).entry->isEmpty() and v.oclAsType(State).exit->isEmpty() and v.oclAsType(State).doActivity->isEmpty())))

region->forAll(r | r.transition->forAll(t | t.oclIsTypeOf(ProtocolTransition)))")
  @Ecore(constraints="classifier_context deep_or_shallow_history entry_exit_do protocol_transitions")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(classifier_context="_'context' <> null and specification = null", deep_or_shallow_history="region->forAll (r | r.subvertex->forAll (v | v.oclIsKindOf(Pseudostate) implies
((v.oclAsType(Pseudostate).kind <>  PseudostateKind::deepHistory) and (v.oclAsType(Pseudostate).kind <> PseudostateKind::shallowHistory))))
", entry_exit_do="region->forAll(r | r.subvertex->forAll(v | v.oclIsKindOf(State) implies
(v.oclAsType(State).entry->isEmpty() and v.oclAsType(State).exit->isEmpty() and v.oclAsType(State).doActivity->isEmpty())))
", protocol_transitions="region->forAll(r | r.transition->forAll(t | t.oclIsTypeOf(ProtocolTransition)))")
  class ProtocolStateMachine extends StateMachine {

    @GenModel(documentation="Conformance between ProtocolStateMachine ")
    @subsets
    !ordered val ProtocolConformance[*]#specificMachine conformance;
  }

}

@"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="UseCases")
@Ecore(validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL", invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL")
@namespace(uri="http:///uml/useCases.ecore", prefix="uml.useCases")
package useCases {
  @GenModel(documentation="An Actor specifies a role played by a user or any other system that interacts with the subject.
Association.allInstances()->forAll( a |
  a.memberEnd->collect(type)->includes(self) implies
  (
    a.memberEnd->size() = 2 and
    let actorEnd : Property = a.memberEnd->any(type = self) in
      actorEnd.opposite.class.oclIsKindOf(UseCase) or
      ( actorEnd.opposite.class.oclIsKindOf(Class) and not
         actorEnd.opposite.class.oclIsKindOf(Behavior))
      )
  )
name->notEmpty()")
  @Ecore(constraints="associations must_have_name")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(associations="Association.allInstances()->forAll( a |
  a.memberEnd->collect(type)->includes(self) implies
  (
    a.memberEnd->size() = 2 and
    let actorEnd : Property = a.memberEnd->any(type = self) in
      actorEnd.opposite.class.oclIsKindOf(UseCase) or
      ( actorEnd.opposite.class.oclIsKindOf(Class) and not
         actorEnd.opposite.class.oclIsKindOf(Behavior))
      )
  )", must_have_name="name->notEmpty()")
  class Actor extends simpleClassifiers.BehavioredClassifier {
  }

  @GenModel(documentation="A relationship from an extending UseCase to an extended UseCase that specifies how and when the behavior defined in the extending UseCase can be inserted into the behavior defined in the extended UseCase.
extensionLocation->forAll (xp | extendedCase.extensionPoint->includes(xp))")
  @Ecore(constraints="extension_points")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(extension_points="extensionLocation->forAll (xp | extendedCase.extensionPoint->includes(xp))")
  class Extend extends commonStructure.NamedElement, commonStructure.DirectedRelationship {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="extend")
    @GenModel(documentation="References the condition that must hold when the first ExtensionPoint is reached for the extension to take place. If no constraint is associated with the Extend relationship, the extension is unconditional.")
    @subsets
    !ordered val commonStructure.Constraint condition;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="extend")
    @GenModel(documentation="The UseCase that is being extended.")
    @subsets
    !ordered ref UseCase[1] extendedCase;

    @GenModel(documentation="The UseCase that represents the extension and owns the Extend relationship.")
    @subsets
    !ordered ref UseCase[1]#extend extension;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="extension")
    @GenModel(documentation="An ordered list of ExtensionPoints belonging to the extended UseCase, specifying where the respective behavioral fragments of the extending UseCase are to be inserted. The first fragment in the extending UseCase is associated with the first extension point in the list, the second fragment with the second point, and so on. Note that, in most practical cases, the extending UseCase has just a single behavior fragment, so that the list of ExtensionPoints is trivial.")
    ref ExtensionPoint[+] extensionLocation;
  }

  @GenModel(documentation="An ExtensionPoint identifies a point in the behavior of a UseCase where that behavior can be extended by the behavior of some other (extending) UseCase, as specified by an Extend relationship.
name->notEmpty ()")
  @Ecore(constraints="must_have_name")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(must_have_name="name->notEmpty ()")
  class ExtensionPoint extends classification.RedefinableElement {

    @GenModel(documentation="The UseCase that owns this ExtensionPoint.")
    @subsets
    !ordered ref UseCase[1]#extensionPoint useCase;
  }

  @GenModel(documentation="An Include relationship specifies that a UseCase contains the behavior defined in another UseCase.")
  class Include extends commonStructure.NamedElement, commonStructure.DirectedRelationship {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="include")
    @GenModel(documentation="The UseCase that is to be included.")
    @subsets
    !ordered ref UseCase[1] addition;

    @GenModel(documentation="The UseCase which includes the addition and owns the Include relationship.")
    @subsets
    !ordered ref UseCase[1]#include includingCase;
  }

  @GenModel(documentation="A UseCase specifies a set of actions performed by its subjects, which yields an observable result that is of value for one or more Actors or other stakeholders of each subject.
Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies a.memberEnd->size() = 2)
Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies 
   (
   let usecases: Set(UseCase) = a.memberEnd.type->select(oclIsKindOf(UseCase))->collect(oclAsType(UseCase))->asSet() in
   usecases->size() > 1 implies usecases->collect(subject)->size() > 1
   )
)
not allIncludedUseCases()->includes(self)
name -> notEmpty ()")
  @Ecore(constraints="binary_associations no_association_to_use_case cannot_include_self must_have_name")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(binary_associations="Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies a.memberEnd->size() = 2)", no_association_to_use_case="Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies 
   (
   let usecases: Set(UseCase) = a.memberEnd.type->select(oclIsKindOf(UseCase))->collect(oclAsType(UseCase))->asSet() in
   usecases->size() > 1 implies usecases->collect(subject)->size() > 1
   )
)", cannot_include_self="not allIncludedUseCases()->includes(self)", must_have_name="name -> notEmpty ()")
  class UseCase extends simpleClassifiers.BehavioredClassifier {

    @GenModel(documentation="The query allIncludedUseCases() returns the transitive closure of all UseCases (directly or indirectly) included by this UseCase.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="self.include.addition->union(self.include.addition->collect(uc | uc.allIncludedUseCases()))->asSet()")
    !ordered op UseCase[*] allIncludedUseCases();

    @GenModel(documentation="The Extend relationships owned by this UseCase.")
    @subsets
    !ordered val Extend[*]#extension extend;

    @GenModel(documentation="The ExtensionPoints owned by this UseCase.")
    @subsets
    !ordered val ExtensionPoint[*]#useCase extensionPoint;

    @GenModel(documentation="The Include relationships owned by this UseCase.")
    @subsets
    !ordered val Include[*]#includingCase include;

    @GenModel(documentation="The subjects to which this UseCase applies. Each subject or its parts realize all the UseCases that apply to it.")
    !ordered ref classification.Classifier[*]#useCase subject;
  }

}

@"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="Actions")
@Ecore(validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL", invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL")
@namespace(uri="http:///uml/actions.ecore", prefix="uml.actions")
package actions {
  @GenModel(documentation="A ValueSpecificationAction is an Action that evaluates a ValueSpecification and provides a result.
result.is(1,1)
value.type.conformsTo(result.type)")
  @Ecore(constraints="multiplicity compatible_type")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(multiplicity="result.is(1,1)", compatible_type="value.type.conformsTo(result.type)")
  class ValueSpecificationAction extends Action {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="valueSpecificationAction")
    @GenModel(documentation="The OutputPin on which the result value is placed.")
    @subsets
    !ordered val OutputPin[1] result;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="valueSpecificationAction")
    @GenModel(documentation="The ValueSpecification to be evaluated.")
    @subsets
    !ordered val values.ValueSpecification[1] value;
  }

  @GenModel(documentation="An Action is the fundamental unit of executable functionality. The execution of an Action represents some transformation or processing in the modeled system. Actions provide the ExecutableNodes within Activities and may also be used within Interactions.")
  abstract class Action extends activities.ExecutableNode {

    @GenModel(documentation="The derivation for the context property.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="let behavior: Behavior = self.containingBehavior() in
if behavior=null then null
else if behavior._'context' = null then behavior
else behavior._'context'
endif
endif")
    !ordered op classification.Classifier context();

    @GenModel(documentation="Return this Action and all Actions contained directly or indirectly in it. By default only the Action itself is returned, but the operation is overridden for StructuredActivityNodes.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="self->asSet()")
    !ordered op Action[*] allActions();

    @GenModel(documentation="Returns all the ActivityNodes directly or indirectly owned by this Action. This includes at least all the Pins of the Action.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="input.oclAsType(Pin)->asSet()->union(output->asSet())")
    !ordered op activities.ActivityNode[*] allOwnedNodes();

    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if inStructuredNode<>null then inStructuredNode.containingBehavior() 
else if activity<>null then activity
else interaction 
endif
endif")
    !ordered op commonBehavior.Behavior containingBehavior();

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="action")
    @GenModel(documentation="The context Classifier of the Behavior that contains this Action, or the Behavior itself if it has no context.")
    !ordered readonly volatile transient derived ref classification.Classifier context;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="action")
    @GenModel(documentation="The ordered set of InputPins representing the inputs to the Action.")
    @union
    @subsets
    readonly volatile transient derived ref InputPin[*] input;

    @GenModel(documentation="If true, the Action can begin a new, concurrent execution, even if there is already another execution of the Action ongoing. If false, the Action cannot begin a new execution until any previous execution has completed.")
    !ordered attr types.Boolean[1] isLocallyReentrant = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="action")
    @GenModel(documentation="A Constraint that must be satisfied when execution of the Action is completed.")
    @subsets
    !ordered val commonStructure.Constraint[*] localPostcondition;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="action")
    @GenModel(documentation="A Constraint that must be satisfied when execution of the Action is started.")
    @subsets
    !ordered val commonStructure.Constraint[*] localPrecondition;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="action")
    @GenModel(documentation="The ordered set of OutputPins representing outputs from the Action.")
    @union
    @subsets
    readonly volatile transient derived ref OutputPin[*] output;
  }

  @GenModel(documentation="An InputPin is a Pin that holds input values to be consumed by an Action.
outgoing->notEmpty() implies
	action<>null and
	action.oclIsKindOf(StructuredActivityNode) and
	action.oclAsType(StructuredActivityNode).allOwnedNodes()->includesAll(outgoing.target)")
  @Ecore(constraints="outgoing_edges_structured_only")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(outgoing_edges_structured_only="outgoing->notEmpty() implies
	action<>null and
	action.oclIsKindOf(StructuredActivityNode) and
	action.oclAsType(StructuredActivityNode).allOwnedNodes()->includesAll(outgoing.target)")
  class InputPin extends Pin {
  }

  @GenModel(documentation="A Pin is an ObjectNode and MultiplicityElement that provides input values to an Action or accepts output values from an Action.
isControl implies isControlType
not isUnique")
  @Ecore(constraints="control_pins not_unique")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(control_pins="isControl implies isControlType", not_unique="not isUnique")
  abstract class Pin extends activities.ObjectNode, commonStructure.MultiplicityElement {

    @GenModel(documentation="Indicates whether the Pin provides data to the Action or just controls how the Action executes.")
    !ordered attr types.Boolean[1] isControl = "false";
  }

  @GenModel(documentation="An OutputPin is a Pin that holds output values produced by an Action.
incoming->notEmpty() implies
	action<>null and
	action.oclIsKindOf(StructuredActivityNode) and
	action.oclAsType(StructuredActivityNode).allOwnedNodes()->includesAll(incoming.source)")
  @Ecore(constraints="incoming_edges_structured_only")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(incoming_edges_structured_only="incoming->notEmpty() implies
	action<>null and
	action.oclIsKindOf(StructuredActivityNode) and
	action.oclAsType(StructuredActivityNode).allOwnedNodes()->includesAll(incoming.source)")
  class OutputPin extends Pin {
  }

  @GenModel(documentation="VariableAction is an abstract class for Actions that operate on a specified Variable.
variable.isAccessibleBy(self)")
  @Ecore(constraints="scope_of_variable")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(scope_of_variable="variable.isAccessibleBy(self)")
  abstract class VariableAction extends Action {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="variableAction")
    @GenModel(documentation="The Variable to be read or written.")
    !ordered ref activities.Variable[1] variable;
  }

  @GenModel(documentation="WriteLinkAction is an abstract class for LinkActions that create and destroy links.
endData.end->exists(end |
  end.type=_'context' or
  end.visibility=VisibilityKind::public or 
  end.visibility=VisibilityKind::protected and
  endData.end->exists(other | 
    other<>end and _'context'.conformsTo(other.type.oclAsType(Classifier))))
")
  @Ecore(constraints="allow_access")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(allow_access="endData.end->exists(end |
  end.type=_'context' or
  end.visibility=VisibilityKind::public or 
  end.visibility=VisibilityKind::protected and
  endData.end->exists(other | 
    other<>end and _'context'.conformsTo(other.type.oclAsType(Classifier))))
")
  abstract class WriteLinkAction extends LinkAction {
  }

  @GenModel(documentation="LinkAction is an abstract class for all Actions that identify the links to be acted on using LinkEndData.
inputValue->asBag()=endData.allPins()
endData.end = self.association().memberEnd->asBag()
endData->forAll(not end.isStatic)")
  @Ecore(constraints="same_pins same_association not_static")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(same_pins="inputValue->asBag()=endData.allPins()", same_association="endData.end = self.association().memberEnd->asBag()", not_static="endData->forAll(not end.isStatic)")
  abstract class LinkAction extends Action {

    @GenModel(documentation="Returns the Association acted on by this LinkAction.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="endData->asSequence()->first().end.association")
    !ordered op structuredClassifiers.Association[1] association();

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="linkAction")
    @GenModel(documentation="The LinkEndData identifying the values on the ends of the links acting on by this LinkAction.")
    @subsets
    !ordered val LinkEndData[2..*] endData;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="linkAction")
    @GenModel(documentation="InputPins used by the LinkEndData of the LinkAction.")
    @subsets
    !ordered val InputPin[+] inputValue;
  }

  @GenModel(documentation="LinkEndData is an Element that identifies on end of a link to be read or written by a LinkAction. As a link (that is not a link object) cannot be passed as a runtime value to or from an Action, it is instead identified by its end objects and qualifier values, if any. A LinkEndData instance provides these values for a single Association end.
value<>null implies value.type.conformsTo(end.type)
value<>null implies value.is(1,1)
value->excludesAll(qualifier.value)
end.association <> null
end.qualifier->includesAll(qualifier.qualifier)")
  @Ecore(constraints="same_type multiplicity end_object_input_pin property_is_association_end qualifiers")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(same_type="value<>null implies value.type.conformsTo(end.type)", multiplicity="value<>null implies value.is(1,1)", end_object_input_pin="value->excludesAll(qualifier.value)", property_is_association_end="end.association <> null", qualifiers="end.qualifier->includesAll(qualifier.qualifier)")
  class LinkEndData extends commonStructure.Element {

    @GenModel(documentation="Returns all the InputPins referenced by this LinkEndData. By default this includes the value and qualifier InputPins, but subclasses may override the operation to add other InputPins.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="value->asBag()->union(qualifier.value)")
    !unique !ordered op InputPin[*] allPins();

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="linkEndData")
    @GenModel(documentation="The Association end for which this LinkEndData specifies values.")
    !ordered ref classification.Property[1] end;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="linkEndData")
    @GenModel(documentation="A set of QualifierValues used to provide values for the qualifiers of the end.")
    @subsets
    !ordered val QualifierValue[*] qualifier;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="linkEndData")
    @GenModel(documentation="The InputPin that provides the specified value for the given end. This InputPin is omitted if the LinkEndData specifies the \"open\" end for a ReadLinkAction.")
    !ordered ref InputPin value;
  }

  @GenModel(documentation="A QualifierValue is an Element that is used as part of LinkEndData to provide the value for a single qualifier of the end given by the LinkEndData.
value.is(1,1)
value.type.conformsTo(qualifier.type)
linkEndData.end.qualifier->includes(qualifier)")
  @Ecore(constraints="multiplicity_of_qualifier type_of_qualifier qualifier_attribute")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(multiplicity_of_qualifier="value.is(1,1)", type_of_qualifier="value.type.conformsTo(qualifier.type)", qualifier_attribute="linkEndData.end.qualifier->includes(qualifier)")
  class QualifierValue extends commonStructure.Element {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="qualifierValue")
    @GenModel(documentation="The qualifier Property for which the value is to be specified.")
    !ordered ref classification.Property[1] qualifier;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="qualifierValue")
    @GenModel(documentation="The InputPin from which the specified value for the qualifier is taken.")
    !ordered ref InputPin[1] value;
  }

  @GenModel(documentation="WriteStructuralFeatureAction is an abstract class for StructuralFeatureActions that change StructuralFeature values.
result <> null implies result.is(1,1)
value <> null implies value.type.conformsTo(structuralFeature.type)
value<>null implies value.is(1,1)
result <> null implies result.type = object.type")
  @Ecore(constraints="multiplicity_of_result type_of_value multiplicity_of_value type_of_result")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(multiplicity_of_result="result <> null implies result.is(1,1)", type_of_value="value <> null implies value.type.conformsTo(structuralFeature.type)", multiplicity_of_value="value<>null implies value.is(1,1)", type_of_result="result <> null implies result.type = object.type")
  abstract class WriteStructuralFeatureAction extends StructuralFeatureAction {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="writeStructuralFeatureAction")
    @GenModel(documentation="The OutputPin on which is put the input object as modified by the WriteStructuralFeatureAction.")
    @subsets
    !ordered val OutputPin result;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="writeStructuralFeatureAction")
    @GenModel(documentation="The InputPin that provides the value to be added or removed from the StructuralFeature.")
    @subsets
    !ordered val InputPin value;
  }

  @GenModel(documentation="StructuralFeatureAction is an abstract class for all Actions that operate on StructuralFeatures.
object.is(1,1)
object.type.oclAsType(Classifier).allFeatures()->includes(structuralFeature) or
	object.type.conformsTo(structuralFeature.oclAsType(Property).opposite.type)
structuralFeature.visibility = VisibilityKind::public or
_'context'.allFeatures()->includes(structuralFeature) or
structuralFeature.visibility=VisibilityKind::protected and
_'context'.conformsTo(structuralFeature.oclAsType(Property).opposite.type.oclAsType(Classifier))

not structuralFeature.isStatic
structuralFeature.featuringClassifier->size() = 1")
  @Ecore(constraints="multiplicity object_type visibility not_static one_featuring_classifier")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(multiplicity="object.is(1,1)", object_type="object.type.oclAsType(Classifier).allFeatures()->includes(structuralFeature) or
	object.type.conformsTo(structuralFeature.oclAsType(Property).opposite.type)", visibility="structuralFeature.visibility = VisibilityKind::public or
_'context'.allFeatures()->includes(structuralFeature) or
structuralFeature.visibility=VisibilityKind::protected and
_'context'.conformsTo(structuralFeature.oclAsType(Property).opposite.type.oclAsType(Classifier))
", not_static="not structuralFeature.isStatic", one_featuring_classifier="structuralFeature.featuringClassifier->size() = 1")
  abstract class StructuralFeatureAction extends Action {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="structuralFeatureAction")
    @GenModel(documentation="The InputPin from which the object whose StructuralFeature is to be read or written is obtained.")
    @subsets
    !ordered val InputPin[1] object;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="structuralFeatureAction")
    @GenModel(documentation="The StructuralFeature to be read or written.")
    !ordered ref classification.StructuralFeature[1] structuralFeature;
  }

  @GenModel(documentation="WriteVariableAction is an abstract class for VariableActions that change Variable values.
value <> null implies value.type.conformsTo(variable.type)
value<>null implies value.is(1,1)")
  @Ecore(constraints="value_type multiplicity")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(value_type="value <> null implies value.type.conformsTo(variable.type)", multiplicity="value<>null implies value.is(1,1)")
  abstract class WriteVariableAction extends VariableAction {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="writeVariableAction")
    @GenModel(documentation="The InputPin that gives the value to be added or removed from the Variable.")
    @subsets
    !ordered val InputPin value;
  }

  @GenModel(documentation="ExpansionKind is an enumeration type used to specify how an ExpansionRegion executes its contents.")
  enum ExpansionKind {

    @GenModel(documentation="The content of the ExpansionRegion is executed concurrently for the elements of the input collections.")
    parallel = 0;

    @GenModel(documentation="The content of the ExpansionRegion is executed iteratively for the elements of the input collections, in the order of the input elements, if the collections are ordered.")
    iterative = 1;

    @GenModel(documentation="A stream of input collection elements flows into a single execution of the content of the ExpansionRegion, in the order of the collection elements if the input collections are ordered.")
    stream = 2;
  }

  @GenModel(documentation="An AcceptCallAction is an AcceptEventAction that handles the receipt of a synchronous call request. In addition to the values from the Operation input parameters, the Action produces an output that is needed later to supply the information to the ReplyAction necessary to return control to the caller. An AcceptCallAction is for synchronous calls. If it is used to handle an asynchronous call, execution of the subsequent ReplyAction will complete immediately with no effect.
let parameter: OrderedSet(Parameter) = trigger.event->asSequence()->first().oclAsType(CallEvent).operation.inputParameters() in
result->size() = parameter->size() and
Sequence{1..result->size()}->forAll(i | 
	parameter->at(i).type.conformsTo(result->at(i).type) and 
	parameter->at(i).isOrdered = result->at(i).isOrdered and
	parameter->at(i).compatibleWith(result->at(i)))
trigger->size()=1 and
trigger->asSequence()->first().event.oclIsKindOf(CallEvent)

isUnmarshall = true")
  @Ecore(constraints="result_pins trigger_call_event unmarshall")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(result_pins="let parameter: OrderedSet(Parameter) = trigger.event->asSequence()->first().oclAsType(CallEvent).operation.inputParameters() in
result->size() = parameter->size() and
Sequence{1..result->size()}->forAll(i | 
	parameter->at(i).type.conformsTo(result->at(i).type) and 
	parameter->at(i).isOrdered = result->at(i).isOrdered and
	parameter->at(i).compatibleWith(result->at(i)))", trigger_call_event="trigger->size()=1 and
trigger->asSequence()->first().event.oclIsKindOf(CallEvent)
", unmarshall="isUnmarshall = true")
  class AcceptCallAction extends AcceptEventAction {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="acceptCallAction")
    @GenModel(documentation="An OutputPin where a value is placed containing sufficient information to perform a subsequent ReplyAction and return control to the caller. The contents of this value are opaque. It can be passed and copied but it cannot be manipulated by the model.")
    @subsets
    !ordered val OutputPin[1] returnInformation;
  }

  @GenModel(documentation="An AcceptEventAction is an Action that waits for the occurrence of one or more specific Events.
not isUnmarshall and trigger->exists(event.oclIsKindOf(SignalEvent) or event.oclIsKindOf(TimeEvent)) implies 
	output->size() = 1 and output->first().is(1,1)
input->size() = 0
(self.oclIsTypeOf(AcceptEventAction) and
   (trigger->forAll(event.oclIsKindOf(ChangeEvent) or  
                             event.oclIsKindOf(CallEvent))))
implies output->size() = 0
isUnmarshall and self.oclIsTypeOf(AcceptEventAction) implies
	trigger->size()=1 and
	trigger->asSequence()->first().event.oclIsKindOf(SignalEvent) and
	let attribute: OrderedSet(Property) = trigger->asSequence()->first().event.oclAsType(SignalEvent).signal.allAttributes() in
	attribute->size()>0 and result->size() = attribute->size() and
	Sequence{1..result->size()}->forAll(i | 
		result->at(i).type = attribute->at(i).type and 
		result->at(i).isOrdered = attribute->at(i).isOrdered and
		result->at(i).includesMultiplicity(attribute->at(i)))
not isUnmarshall implies 
	result->isEmpty() or
	let type: Type = result->first().type in
	type=null or 
		(trigger->forAll(event.oclIsKindOf(SignalEvent)) and 
		 trigger.event.oclAsType(SignalEvent).signal->forAll(s | s.conformsTo(type)))")
  @Ecore(constraints="one_output_pin no_input_pins no_output_pins unmarshall_signal_events conforming_type")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(one_output_pin="not isUnmarshall and trigger->exists(event.oclIsKindOf(SignalEvent) or event.oclIsKindOf(TimeEvent)) implies 
	output->size() = 1 and output->first().is(1,1)", no_input_pins="input->size() = 0", no_output_pins="(self.oclIsTypeOf(AcceptEventAction) and
   (trigger->forAll(event.oclIsKindOf(ChangeEvent) or  
                             event.oclIsKindOf(CallEvent))))
implies output->size() = 0", unmarshall_signal_events="isUnmarshall and self.oclIsTypeOf(AcceptEventAction) implies
	trigger->size()=1 and
	trigger->asSequence()->first().event.oclIsKindOf(SignalEvent) and
	let attribute: OrderedSet(Property) = trigger->asSequence()->first().event.oclAsType(SignalEvent).signal.allAttributes() in
	attribute->size()>0 and result->size() = attribute->size() and
	Sequence{1..result->size()}->forAll(i | 
		result->at(i).type = attribute->at(i).type and 
		result->at(i).isOrdered = attribute->at(i).isOrdered and
		result->at(i).includesMultiplicity(attribute->at(i)))", conforming_type="not isUnmarshall implies 
	result->isEmpty() or
	let type: Type = result->first().type in
	type=null or 
		(trigger->forAll(event.oclIsKindOf(SignalEvent)) and 
		 trigger.event.oclAsType(SignalEvent).signal->forAll(s | s.conformsTo(type)))")
  class AcceptEventAction extends Action {

    @GenModel(documentation="Indicates whether there is a single OutputPin for a SignalEvent occurrence, or multiple OutputPins for attribute values of the instance of the Signal associated with a SignalEvent occurrence.")
    !ordered attr types.Boolean[1] isUnmarshall = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="acceptEventAction")
    @GenModel(documentation="OutputPins holding the values received from an Event occurrence.")
    @subsets
    val OutputPin[*] result;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="acceptEventAction")
    @GenModel(documentation="The Triggers specifying the Events of which the AcceptEventAction waits for occurrences.")
    @subsets
    !ordered val commonBehavior.Trigger[+] trigger;
  }

  @GenModel(documentation="An ActionInputPin is a kind of InputPin that executes an Action to determine the values to input to another Action.
fromAction.input->forAll(oclIsKindOf(ActionInputPin))
fromAction.output->size() = 1
fromAction.incoming->union(outgoing)->isEmpty() and
fromAction.input.incoming->isEmpty() and
fromAction.output.outgoing->isEmpty()")
  @Ecore(constraints="input_pin one_output_pin no_control_or_object_flow")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(input_pin="fromAction.input->forAll(oclIsKindOf(ActionInputPin))", one_output_pin="fromAction.output->size() = 1", no_control_or_object_flow="fromAction.incoming->union(outgoing)->isEmpty() and
fromAction.input.incoming->isEmpty() and
fromAction.output.outgoing->isEmpty()")
  class ActionInputPin extends InputPin {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="actionInputPin")
    @GenModel(documentation="The Action used to provide the values of the ActionInputPin.")
    @subsets
    !ordered val Action[1] fromAction;
  }

  @GenModel(documentation="An AddStructuralFeatureValueAction is a WriteStructuralFeatureAction for adding values to a StructuralFeature.
value<>null
if not structuralFeature.isOrdered then insertAt = null
else 
  not isReplaceAll implies
  	insertAt<>null and 
  	insertAt->forAll(type=UnlimitedNatural and is(1,1.oclAsType(UnlimitedNatural)))
endif
")
  @Ecore(constraints="required_value insertAt_pin")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(required_value="value<>null", insertAt_pin="if not structuralFeature.isOrdered then insertAt = null
else 
  not isReplaceAll implies
  	insertAt<>null and 
  	insertAt->forAll(type=UnlimitedNatural and is(1,1.oclAsType(UnlimitedNatural)))
endif
")
  class AddStructuralFeatureValueAction extends WriteStructuralFeatureAction {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="addStructuralFeatureValueAction")
    @GenModel(documentation="The InputPin that gives the position at which to insert the value in an ordered StructuralFeature. The type of the insertAt InputPin is UnlimitedNatural, but the value cannot be zero. It is omitted for unordered StructuralFeatures.")
    @subsets
    !ordered val InputPin insertAt;

    @GenModel(documentation="Specifies whether existing values of the StructuralFeature should be removed before adding the new value.")
    !ordered attr types.Boolean[1] isReplaceAll = "false";
  }

  @GenModel(documentation="An AddVariableValueAction is a WriteVariableAction for adding values to a Variable.
value <> null
if not variable.isOrdered then insertAt = null
else 
  not isReplaceAll implies
  	insertAt<>null and 
  	insertAt->forAll(type=UnlimitedNatural and is(1,1.oclAsType(UnlimitedNatural)))
endif
")
  @Ecore(constraints="required_value insertAt_pin")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(required_value="value <> null", insertAt_pin="if not variable.isOrdered then insertAt = null
else 
  not isReplaceAll implies
  	insertAt<>null and 
  	insertAt->forAll(type=UnlimitedNatural and is(1,1.oclAsType(UnlimitedNatural)))
endif
")
  class AddVariableValueAction extends WriteVariableAction {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="addVariableValueAction")
    @GenModel(documentation="The InputPin that gives the position at which to insert a new value or move an existing value in ordered Variables. The type of the insertAt InputPin is UnlimitedNatural, but the value cannot be zero. It is omitted for unordered Variables.")
    @subsets
    !ordered val InputPin insertAt;

    @GenModel(documentation="Specifies whether existing values of the Variable should be removed before adding the new value.")
    !ordered attr types.Boolean[1] isReplaceAll = "false";
  }

  @GenModel(documentation="A BroadcastSignalAction is an InvocationAction that transmits a Signal instance to all the potential target objects in the system. Values from the argument InputPins are used to provide values for the attributes of the Signal. The requestor continues execution immediately after the Signal instances are sent out and cannot receive reply values.
argument->size() = signal.allAttributes()->size()
let attribute: OrderedSet(Property) = signal.allAttributes() in
Sequence{1..argument->size()}->forAll(i | 
	argument->at(i).type.conformsTo(attribute->at(i).type) and 
	argument->at(i).isOrdered = attribute->at(i).isOrdered and
	argument->at(i).compatibleWith(attribute->at(i)))
onPort=null")
  @Ecore(constraints="number_of_arguments type_ordering_multiplicity no_onport")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(number_of_arguments="argument->size() = signal.allAttributes()->size()", type_ordering_multiplicity="let attribute: OrderedSet(Property) = signal.allAttributes() in
Sequence{1..argument->size()}->forAll(i | 
	argument->at(i).type.conformsTo(attribute->at(i).type) and 
	argument->at(i).isOrdered = attribute->at(i).isOrdered and
	argument->at(i).compatibleWith(attribute->at(i)))", no_onport="onPort=null")
  class BroadcastSignalAction extends InvocationAction {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="broadcastSignalAction")
    @GenModel(documentation="The Signal whose instances are to be sent.")
    !ordered ref simpleClassifiers.Signal[1] signal;
  }

  @GenModel(documentation="InvocationAction is an abstract class for the various actions that request Behavior invocation.
")
  abstract class InvocationAction extends Action {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="invocationAction")
    @GenModel(documentation="The InputPins that provide the argument values passed in the invocation request.")
    @subsets
    val InputPin[*] argument;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="invocationAction")
    @GenModel(documentation="For CallOperationActions, SendSignalActions, and SendObjectActions, an optional Port of the target object through which the invocation request is sent.")
    !ordered ref structuredClassifiers.Port onPort;
  }

  @GenModel(documentation="CallAction is an abstract class for Actions that invoke a Behavior with given argument values and (if the invocation is synchronous) receive reply values.
let parameter: OrderedSet(Parameter) = self.inputParameters() in
argument->size() = parameter->size() and
Sequence{1..argument->size()}->forAll(i | 
	argument->at(i).type.conformsTo(parameter->at(i).type) and 
	argument->at(i).isOrdered = parameter->at(i).isOrdered and
	argument->at(i).compatibleWith(parameter->at(i)))
let parameter: OrderedSet(Parameter) = self.outputParameters() in
result->size() = parameter->size() and
Sequence{1..result->size()}->forAll(i | 
	parameter->at(i).type.conformsTo(result->at(i).type) and 
	parameter->at(i).isOrdered = result->at(i).isOrdered and
	parameter->at(i).compatibleWith(result->at(i)))
result->notEmpty() implies isSynchronous")
  @Ecore(constraints="argument_pins result_pins synchronous_call")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(argument_pins="let parameter: OrderedSet(Parameter) = self.inputParameters() in
argument->size() = parameter->size() and
Sequence{1..argument->size()}->forAll(i | 
	argument->at(i).type.conformsTo(parameter->at(i).type) and 
	argument->at(i).isOrdered = parameter->at(i).isOrdered and
	argument->at(i).compatibleWith(parameter->at(i)))", result_pins="let parameter: OrderedSet(Parameter) = self.outputParameters() in
result->size() = parameter->size() and
Sequence{1..result->size()}->forAll(i | 
	parameter->at(i).type.conformsTo(result->at(i).type) and 
	parameter->at(i).isOrdered = result->at(i).isOrdered and
	parameter->at(i).compatibleWith(result->at(i)))", synchronous_call="result->notEmpty() implies isSynchronous")
  abstract class CallAction extends InvocationAction {

    @GenModel(documentation="Return the in and inout ownedParameters of the Behavior or Operation being called. (This operation is abstract and should be overridden by subclasses of CallAction.)")
    op classification.Parameter[*] inputParameters();

    @GenModel(documentation="Return the inout, out and return ownedParameters of the Behavior or Operation being called. (This operation is abstract and should be overridden by subclasses of CallAction.)")
    op classification.Parameter[*] outputParameters();

    @GenModel(documentation="If true, the call is synchronous and the caller waits for completion of the invoked Behavior. If false, the call is asynchronous and the caller proceeds immediately and cannot receive return values.")
    !ordered attr types.Boolean[1] isSynchronous = "true";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="callAction")
    @GenModel(documentation="The OutputPins on which the reply values from the invocation are placed (if the call is synchronous).")
    @subsets
    val OutputPin[*] result;
  }

  @GenModel(documentation="A CallBehaviorAction is a CallAction that invokes a Behavior directly. The argument values of the CallBehaviorAction are passed on the input Parameters of the invoked Behavior. If the call is synchronous, the execution of the CallBehaviorAction waits until the execution of the invoked Behavior completes and the values of output Parameters of the Behavior are placed on the result OutputPins. If the call is asynchronous, the CallBehaviorAction completes immediately and no results values can be provided.
onPort=null")
  @Ecore(constraints="no_onport")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(no_onport="onPort=null")
  @duplicates
  class CallBehaviorAction extends CallAction {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="callBehaviorAction")
    @GenModel(documentation="The Behavior being invoked.")
    !ordered ref commonBehavior.Behavior[1] behavior;
  }

  @GenModel(documentation="A CallOperationAction is a CallAction that transmits an Operation call request to the target object, where it may cause the invocation of associated Behavior. The argument values of the CallOperationAction are passed on the input Parameters of the Operation. If call is synchronous, the execution of the CallOperationAction waits until the execution of the invoked Operation completes and the values of output Parameters of the Operation are placed on the result OutputPins. If the call is asynchronous, the CallOperationAction completes immediately and no results values can be provided.
if onPort=null then  target.type.oclAsType(Classifier).allFeatures()->includes(operation)
else target.type.oclAsType(Classifier).allFeatures()->includes(onPort) and onPort.provided->union(onPort.required).allFeatures()->includes(operation)
endif")
  @Ecore(constraints="type_target_pin")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(type_target_pin="if onPort=null then  target.type.oclAsType(Classifier).allFeatures()->includes(operation)
else target.type.oclAsType(Classifier).allFeatures()->includes(onPort) and onPort.provided->union(onPort.required).allFeatures()->includes(operation)
endif")
  @duplicates
  class CallOperationAction extends CallAction {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="callOperationAction")
    @GenModel(documentation="The Operation being invoked.")
    !ordered ref classification.Operation[1] operation;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="callOperationAction")
    @GenModel(documentation="The InputPin that provides the target object to which the Operation call request is sent.")
    @subsets
    !ordered val InputPin[1] target;
  }

  @GenModel(documentation="A Clause is an Element that represents a single branch of a ConditionalNode, including a test and a body section. The body section is executed only if (but not necessarily if) the test section evaluates to true.
_'body'.oclAsType(Action).allActions().output->includesAll(bodyOutput)
test.oclAsType(Action).allActions().output->includes(decider) and
decider.type = Boolean and
decider.is(1,1)
test->intersection(_'body')->isEmpty()")
  @Ecore(constraints="body_output_pins decider_output test_and_body")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body_output_pins="_'body'.oclAsType(Action).allActions().output->includesAll(bodyOutput)", decider_output="test.oclAsType(Action).allActions().output->includes(decider) and
decider.type = Boolean and
decider.is(1,1)", test_and_body="test->intersection(_'body')->isEmpty()")
  class Clause extends commonStructure.Element {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="clause")
    @GenModel(documentation="The set of ExecutableNodes that are executed if the test evaluates to true and the Clause is chosen over other Clauses within the ConditionalNode that also have tests that evaluate to true.")
    !ordered ref activities.ExecutableNode[*] body;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="clause")
    @GenModel(documentation="The OutputPins on Actions within the body section whose values are moved to the result OutputPins of the containing ConditionalNode after execution of the body.")
    ref OutputPin[*] bodyOutput;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="clause")
    @GenModel(documentation="An OutputPin on an Action in the test section whose Boolean value determines the result of the test.")
    !ordered ref OutputPin[1] decider;

    @GenModel(documentation="A set of Clauses whose tests must all evaluate to false before this Clause can evaluate its test.")
    !ordered ref Clause[*]#successorClause predecessorClause;

    @GenModel(documentation="A set of Clauses that may not evaluate their tests unless the test for this Clause evaluates to false.")
    !ordered ref Clause[*]#predecessorClause successorClause;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="clause")
    @GenModel(documentation="The set of ExecutableNodes that are executed in order to provide a test result for the Clause.")
    !ordered ref activities.ExecutableNode[+] test;
  }

  @GenModel(documentation="A ClearAssociationAction is an Action that destroys all links of an Association in which a particular object participates.
object.is(1,1)
association.memberEnd->exists(self.object.type.conformsTo(type))")
  @Ecore(constraints="multiplicity same_type")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(multiplicity="object.is(1,1)", same_type="association.memberEnd->exists(self.object.type.conformsTo(type))")
  class ClearAssociationAction extends Action {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="clearAssociationAction")
    @GenModel(documentation="The Association to be cleared.")
    !ordered ref structuredClassifiers.Association[1] association;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="clearAssociationAction")
    @GenModel(documentation="The InputPin that gives the object whose participation in the Association is to be cleared.")
    @subsets
    !ordered val InputPin[1] object;
  }

  @GenModel(documentation="A ClearStructuralFeatureAction is a StructuralFeatureAction that removes all values of a StructuralFeature.
result<>null implies result.type = object.type
result<>null implies result.is(1,1)")
  @Ecore(constraints="type_of_result multiplicity_of_result")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(type_of_result="result<>null implies result.type = object.type", multiplicity_of_result="result<>null implies result.is(1,1)")
  class ClearStructuralFeatureAction extends StructuralFeatureAction {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="clearStructuralFeatureAction")
    @GenModel(documentation="The OutputPin on which is put the input object as modified by the ClearStructuralFeatureAction.")
    @subsets
    !ordered val OutputPin result;
  }

  @GenModel(documentation="A ClearVariableAction is a VariableAction that removes all values of a Variable.")
  class ClearVariableAction extends VariableAction {
  }

  @GenModel(documentation="A ConditionalNode is a StructuredActivityNode that chooses one among some number of alternative collections of ExecutableNodes to execute.
result.incoming->isEmpty()
input->isEmpty()
node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->forAll(n | 
	self.clause->select(test->union(_'body')->includes(n))->size()=1)
clause->forAll(
	bodyOutput->size()=self.result->size() and
	Sequence{1..self.result->size()}->forAll(i |
		bodyOutput->at(i).type.conformsTo(result->at(i).type) and
		bodyOutput->at(i).isOrdered = result->at(i).isOrdered and
		bodyOutput->at(i).isUnique = result->at(i).isUnique and
		bodyOutput->at(i).compatibleWith(result->at(i))))
clause.test->union(clause._'body') = node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)
clause->closure(predecessorClause)->intersection(clause)->isEmpty()")
  @Ecore(constraints="result_no_incoming no_input_pins one_clause_with_executable_node matching_output_pins executable_nodes clause_no_predecessor")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(result_no_incoming="result.incoming->isEmpty()", no_input_pins="input->isEmpty()", one_clause_with_executable_node="node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->forAll(n | 
	self.clause->select(test->union(_'body')->includes(n))->size()=1)", matching_output_pins="clause->forAll(
	bodyOutput->size()=self.result->size() and
	Sequence{1..self.result->size()}->forAll(i |
		bodyOutput->at(i).type.conformsTo(result->at(i).type) and
		bodyOutput->at(i).isOrdered = result->at(i).isOrdered and
		bodyOutput->at(i).isUnique = result->at(i).isUnique and
		bodyOutput->at(i).compatibleWith(result->at(i))))", executable_nodes="clause.test->union(clause._'body') = node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)", clause_no_predecessor="clause->closure(predecessorClause)->intersection(clause)->isEmpty()")
  @duplicates
  class ConditionalNode extends StructuredActivityNode {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="conditionalNode")
    @GenModel(documentation="The set of Clauses composing the ConditionalNode.")
    @subsets
    !ordered val Clause[+] clause;

    @GenModel(documentation="If true, the modeler asserts that the test for at least one Clause of the ConditionalNode will succeed.")
    !ordered attr types.Boolean[1] isAssured = "false";

    @GenModel(documentation="If true, the modeler asserts that the test for at most one Clause of the ConditionalNode will succeed.")
    !ordered attr types.Boolean[1] isDeterminate = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="conditionalNode")
    @GenModel(documentation="The OutputPins that onto which are moved values from the bodyOutputs of the Clause selected for execution.")
    @redefines
    val OutputPin[*] result;
  }

  @GenModel(documentation="A CreateLinkAction is a WriteLinkAction for creating links.
not self.association().isAbstract")
  @Ecore(constraints="association_not_abstract")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(association_not_abstract="not self.association().isAbstract")
  @duplicates
  class CreateLinkAction extends WriteLinkAction {
  }

  @GenModel(documentation="LinkEndCreationData is LinkEndData used to provide values for one end of a link to be created by a CreateLinkAction.
if  not end.isOrdered
then insertAt = null
else
	not isReplaceAll=false implies
	insertAt <> null and insertAt->forAll(type=UnlimitedNatural and is(1,1))
endif
")
  @Ecore(constraints="insertAt_pin")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(insertAt_pin="if  not end.isOrdered
then insertAt = null
else
	not isReplaceAll=false implies
	insertAt <> null and insertAt->forAll(type=UnlimitedNatural and is(1,1))
endif
")
  @duplicates
  class LinkEndCreationData extends LinkEndData {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="linkEndCreationData")
    @GenModel(documentation="For ordered Association ends, the InputPin that provides the position where the new link should be inserted or where an existing link should be moved to. The type of the insertAt InputPin is UnlimitedNatural, but the input cannot be zero. It is omitted for Association ends that are not ordered.")
    !ordered ref InputPin insertAt;

    @GenModel(documentation="Specifies whether the existing links emanating from the object on this end should be destroyed before creating a new link.")
    !ordered attr types.Boolean[1] isReplaceAll = "false";
  }

  @GenModel(documentation="A CreateLinkObjectAction is a CreateLinkAction for creating link objects (AssociationClasse instances).
result.is(1,1)
result.type = association()
self.association().oclIsKindOf(AssociationClass)")
  @Ecore(constraints="multiplicity type_of_result association_class")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(multiplicity="result.is(1,1)", type_of_result="result.type = association()", association_class="self.association().oclIsKindOf(AssociationClass)")
  class CreateLinkObjectAction extends CreateLinkAction {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="createLinkObjectAction")
    @GenModel(documentation="The output pin on which the newly created link object is placed.")
    @subsets
    !ordered val OutputPin[1] result;
  }

  @GenModel(documentation="A CreateObjectAction is an Action that creates an instance of the specified Classifier.
not classifier.isAbstract 
result.is(1,1)
not classifier.oclIsKindOf(AssociationClass)
result.type = classifier")
  @Ecore(constraints="classifier_not_abstract multiplicity classifier_not_association_class same_type")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(classifier_not_abstract="not classifier.isAbstract ", multiplicity="result.is(1,1)", classifier_not_association_class="not classifier.oclIsKindOf(AssociationClass)", same_type="result.type = classifier")
  class CreateObjectAction extends Action {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="createObjectAction")
    @GenModel(documentation="The Classifier to be instantiated.")
    !ordered ref classification.Classifier[1] classifier;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="createObjectAction")
    @GenModel(documentation="The OutputPin on which the newly created object is placed.")
    @subsets
    !ordered val OutputPin[1] result;
  }

  @GenModel(documentation="A DestroyLinkAction is a WriteLinkAction that destroys links (including link objects).")
  @duplicates
  class DestroyLinkAction extends WriteLinkAction {
  }

  @GenModel(documentation="LinkEndDestructionData is LinkEndData used to provide values for one end of a link to be destroyed by a DestroyLinkAction.
if  not end.isOrdered or end.isUnique or isDestroyDuplicates
then destroyAt = null
else
	destroyAt <> null and 
	destroyAt->forAll(type=UnlimitedNatural and is(1,1))
endif
")
  @Ecore(constraints="destroyAt_pin")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(destroyAt_pin="if  not end.isOrdered or end.isUnique or isDestroyDuplicates
then destroyAt = null
else
	destroyAt <> null and 
	destroyAt->forAll(type=UnlimitedNatural and is(1,1))
endif
")
  @duplicates
  class LinkEndDestructionData extends LinkEndData {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="linkEndDestructionData")
    @GenModel(documentation="The InputPin that provides the position of an existing link to be destroyed in an ordered, nonunique Association end. The type of the destroyAt InputPin is UnlimitedNatural, but the value cannot be zero or unlimited.")
    !ordered ref InputPin destroyAt;

    @GenModel(documentation="Specifies whether to destroy duplicates of the value in nonunique Association ends.")
    !ordered attr types.Boolean[1] isDestroyDuplicates = "false";
  }

  @GenModel(documentation="A DestroyObjectAction is an Action that destroys objects.
target.is(1,1)
target.type= null")
  @Ecore(constraints="multiplicity no_type")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(multiplicity="target.is(1,1)", no_type="target.type= null")
  class DestroyObjectAction extends Action {

    @GenModel(documentation="Specifies whether links in which the object participates are destroyed along with the object.")
    !ordered attr types.Boolean[1] isDestroyLinks = "false";

    @GenModel(documentation="Specifies whether objects owned by the object (via composition) are destroyed along with the object.")
    !ordered attr types.Boolean[1] isDestroyOwnedObjects = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="destroyObjectAction")
    @GenModel(documentation="The InputPin providing the object to be destroyed.")
    @subsets
    !ordered val InputPin[1] target;
  }

  @GenModel(documentation="An ExpansionNode is an ObjectNode used to indicate a collection input or output for an ExpansionRegion. A collection input of an ExpansionRegion contains a collection that is broken into its individual elements inside the region, whose content is executed once per element. A collection output of an ExpansionRegion combines individual elements produced by the execution of the region into a collection for use outside the region.
regionAsInput->notEmpty() xor regionAsOutput->notEmpty()")
  @Ecore(constraints="region_as_input_or_output")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(region_as_input_or_output="regionAsInput->notEmpty() xor regionAsOutput->notEmpty()")
  class ExpansionNode extends activities.ObjectNode {

    @GenModel(documentation="The ExpansionRegion for which the ExpansionNode is an input.")
    !ordered ref ExpansionRegion#inputElement regionAsInput;

    @GenModel(documentation="The ExpansionRegion for which the ExpansionNode is an output.")
    !ordered ref ExpansionRegion#outputElement regionAsOutput;
  }

  @GenModel(documentation="An ExpansionRegion is a StructuredActivityNode that executes its content multiple times corresponding to elements of input collection(s).")
  class ExpansionRegion extends StructuredActivityNode {

    @GenModel(documentation="The mode in which the ExpansionRegion executes its contents. If parallel, executions are concurrent. If iterative, executions are sequential. If stream, a stream of values flows into a single execution.")
    !ordered attr ExpansionKind[1] mode = "iterative";

    @GenModel(documentation="The ExpansionNodes that form the output collections of the ExpansionRegion.")
    !ordered ref ExpansionNode[*]#regionAsOutput outputElement;

    @GenModel(documentation="The ExpansionNodes that hold the input collections for the ExpansionRegion.")
    !ordered ref ExpansionNode[+]#regionAsInput inputElement;
  }

  @GenModel(documentation="A LoopNode is a StructuredActivityNode that represents an iterative loop with setup, test, and body sections.
result.incoming->isEmpty()
loopVariableInput.outgoing->isEmpty()
setupPart->union(test)->union(bodyPart)=node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->asSet()
bodyPart.oclAsType(Action).allActions().output->includesAll(bodyOutput)
setupPart->intersection(test)->isEmpty() and
setupPart->intersection(bodyPart)->isEmpty() and
test->intersection(bodyPart)->isEmpty()
bodyOutput->size()=loopVariable->size() and
Sequence{1..loopVariable->size()}->forAll(i |
	bodyOutput->at(i).type.conformsTo(loopVariable->at(i).type) and
	bodyOutput->at(i).isOrdered = loopVariable->at(i).isOrdered and
	bodyOutput->at(i).isUnique = loopVariable->at(i).isUnique and
	loopVariable->at(i).includesMultiplicity(bodyOutput->at(i)))
loopVariableInput->size()=loopVariable->size() and
loopVariableInput.type=loopVariable.type and
loopVariableInput.isUnique=loopVariable.isUnique and
loopVariableInput.lower=loopVariable.lower and
loopVariableInput.upper=loopVariable.upper
result->size()=loopVariable->size() and
result.type=loopVariable.type and
result.isUnique=loopVariable.isUnique and
result.lower=loopVariable.lower and
result.upper=loopVariable.upper
allOwnedNodes()->includesAll(loopVariable.outgoing.target)")
  @Ecore(constraints="result_no_incoming input_edges executable_nodes body_output_pins setup_test_and_body matching_output_pins matching_loop_variables matching_result_pins loop_variable_outgoing")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(result_no_incoming="result.incoming->isEmpty()", input_edges="loopVariableInput.outgoing->isEmpty()", executable_nodes="setupPart->union(test)->union(bodyPart)=node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->asSet()", body_output_pins="bodyPart.oclAsType(Action).allActions().output->includesAll(bodyOutput)", setup_test_and_body="setupPart->intersection(test)->isEmpty() and
setupPart->intersection(bodyPart)->isEmpty() and
test->intersection(bodyPart)->isEmpty()", matching_output_pins="bodyOutput->size()=loopVariable->size() and
Sequence{1..loopVariable->size()}->forAll(i |
	bodyOutput->at(i).type.conformsTo(loopVariable->at(i).type) and
	bodyOutput->at(i).isOrdered = loopVariable->at(i).isOrdered and
	bodyOutput->at(i).isUnique = loopVariable->at(i).isUnique and
	loopVariable->at(i).includesMultiplicity(bodyOutput->at(i)))", matching_loop_variables="loopVariableInput->size()=loopVariable->size() and
loopVariableInput.type=loopVariable.type and
loopVariableInput.isUnique=loopVariable.isUnique and
loopVariableInput.lower=loopVariable.lower and
loopVariableInput.upper=loopVariable.upper", matching_result_pins="result->size()=loopVariable->size() and
result.type=loopVariable.type and
result.isUnique=loopVariable.isUnique and
result.lower=loopVariable.lower and
result.upper=loopVariable.upper", loop_variable_outgoing="allOwnedNodes()->includesAll(loopVariable.outgoing.target)")
  @duplicates
  class LoopNode extends StructuredActivityNode {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="loopNode")
    @GenModel(documentation="The OutputPins on Actions within the bodyPart, the values of which are moved to the loopVariable OutputPins after the completion of each execution of the bodyPart, before the next iteration of the loop begins or before the loop exits.")
    ref OutputPin[*] bodyOutput;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="loopNode")
    @GenModel(documentation="The set of ExecutableNodes that perform the repetitive computations of the loop. The bodyPart is executed as long as the test section produces a true value.")
    !ordered ref activities.ExecutableNode[*] bodyPart;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="loopNode")
    @GenModel(documentation="An OutputPin on an Action in the test section whose Boolean value determines whether to continue executing the loop bodyPart.")
    !ordered ref OutputPin[1] decider;

    @GenModel(documentation="If true, the test is performed before the first execution of the bodyPart. If false, the bodyPart is executed once before the test is performed.")
    !ordered attr types.Boolean[1] isTestedFirst = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="loopNode")
    @GenModel(documentation="A list of OutputPins that hold the values of the loop variables during an execution of the loop. When the test fails, the values are moved to the result OutputPins of the loop.")
    @subsets
    val OutputPin[*] loopVariable;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="loopNode")
    @GenModel(documentation="A list of InputPins whose values are moved into the loopVariable Pins before the first iteration of the loop.")
    @redefines
    val InputPin[*] loopVariableInput;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="loopNode")
    @GenModel(documentation="A list of OutputPins that receive the loopVariable values after the last iteration of the loop and constitute the output of the LoopNode.")
    @redefines
    val OutputPin[*] result;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="loopNode")
    @GenModel(documentation="The set of ExecutableNodes executed before the first iteration of the loop, in order to initialize values or perform other setup computations.")
    !ordered ref activities.ExecutableNode[*] setupPart;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="loopNode")
    @GenModel(documentation="The set of ExecutableNodes executed in order to provide the test result for the loop.")
    !ordered ref activities.ExecutableNode[+] test;
  }

  @GenModel(documentation="An OpaqueAction is an Action whose functionality is not specified within UML.
language->notEmpty() implies (_'body'->size() = language->size())")
  @Ecore(constraints="language_body_size")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(language_body_size="language->notEmpty() implies (_'body'->size() = language->size())")
  class OpaqueAction extends Action {

    @GenModel(documentation="Provides a textual specification of the functionality of the Action, in one or more languages other than UML.")
    !unique attr types.String[*] body;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="opaqueAction")
    @GenModel(documentation="The InputPins providing inputs to the OpaqueAction.")
    @subsets
    !ordered val InputPin[*] inputValue;

    @GenModel(documentation="If provided, a specification of the language used for each of the body Strings.")
    attr types.String[*] language;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="opaqueAction")
    @GenModel(documentation="The OutputPins on which the OpaqueAction provides outputs.")
    @subsets
    !ordered val OutputPin[*] outputValue;
  }

  @GenModel(documentation="A RaiseExceptionAction is an Action that causes an exception to occur. The input value becomes the exception object.")
  class RaiseExceptionAction extends Action {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="raiseExceptionAction")
    @GenModel(documentation="An InputPin whose value becomes the exception object.")
    @subsets
    !ordered val InputPin[1] exception;
  }

  @GenModel(documentation="A ReadExtentAction is an Action that retrieves the current instances of a Classifier.
result.type = classifier
result.is(0,*)")
  @Ecore(constraints="type_is_classifier multiplicity_of_result")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(type_is_classifier="result.type = classifier", multiplicity_of_result="result.is(0,*)")
  class ReadExtentAction extends Action {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="readExtentAction")
    @GenModel(documentation="The Classifier whose instances are to be retrieved.")
    !ordered ref classification.Classifier[1] classifier;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="readExtentAction")
    @GenModel(documentation="The OutputPin on which the Classifier instances are placed.")
    @subsets
    !ordered val OutputPin[1] result;
  }

  @GenModel(documentation="A ReadIsClassifiedObjectAction is an Action that determines whether an object is classified by a given Classifier.
object.type = null
result.is(1,1)
result.type = Boolean
object.is(1,1)")
  @Ecore(constraints="no_type multiplicity_of_output boolean_result multiplicity_of_input")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(no_type="object.type = null", multiplicity_of_output="result.is(1,1)", boolean_result="result.type = Boolean", multiplicity_of_input="object.is(1,1)")
  class ReadIsClassifiedObjectAction extends Action {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="readIsClassifiedObjectAction")
    @GenModel(documentation="The Classifier against which the classification of the input object is tested.")
    !ordered ref classification.Classifier[1] classifier;

    @GenModel(documentation="Indicates whether the input object must be directly classified by the given Classifier or whether it may also be an instance of a specialization of the given Classifier.")
    !ordered attr types.Boolean[1] isDirect = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="readIsClassifiedObjectAction")
    @GenModel(documentation="The InputPin that holds the object whose classification is to be tested.")
    @subsets
    !ordered val InputPin[1] object;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="readIsClassifiedObjectAction")
    @GenModel(documentation="The OutputPin that holds the Boolean result of the test.")
    @subsets
    !ordered val OutputPin[1] result;
  }

  @GenModel(documentation="A ReadLinkAction is a LinkAction that navigates across an Association to retrieve the objects on one end.
self.openEnd()->forAll(type=result.type and isOrdered=result.isOrdered)

self.openEnd()->first().compatibleWith(result)

let openEnd : Property = self.openEnd()->first() in
  openEnd.visibility = VisibilityKind::public or 
  endData->exists(oed | 
    oed.end<>openEnd and 
    (_'context' = oed.end.type or 
      (openEnd.visibility = VisibilityKind::protected and 
        _'context'.conformsTo(oed.end.type.oclAsType(Classifier)))))

self.openEnd()->size() = 1
self.openEnd()->first().isNavigable()
")
  @Ecore(constraints="type_and_ordering compatible_multiplicity visibility one_open_end navigable_open_end")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(type_and_ordering="self.openEnd()->forAll(type=result.type and isOrdered=result.isOrdered)
", compatible_multiplicity="self.openEnd()->first().compatibleWith(result)
", visibility="let openEnd : Property = self.openEnd()->first() in
  openEnd.visibility = VisibilityKind::public or 
  endData->exists(oed | 
    oed.end<>openEnd and 
    (_'context' = oed.end.type or 
      (openEnd.visibility = VisibilityKind::protected and 
        _'context'.conformsTo(oed.end.type.oclAsType(Classifier)))))
", one_open_end="self.openEnd()->size() = 1", navigable_open_end="self.openEnd()->first().isNavigable()
")
  class ReadLinkAction extends LinkAction {

    @GenModel(documentation="Returns the ends corresponding to endData with no value InputPin. (A well-formed ReadLinkAction is constrained to have only one of these.)")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="endData->select(value=null).end->asOrderedSet()")
    op classification.Property[*] openEnd();

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="readLinkAction")
    @GenModel(documentation="The OutputPin on which the objects retrieved from the \"open\" end of those links whose values on other ends are given by the endData.")
    @subsets
    !ordered val OutputPin[1] result;
  }

  @GenModel(documentation="A ReadLinkObjectEndAction is an Action that retrieves an end object from a link object.
end.association <> null
object.is(1,1)
end.association.memberEnd->forAll(e | not e.isStatic)
result.type = end.type
result.is(1,1)
object.type = end.association
end.association.oclIsKindOf(AssociationClass)")
  @Ecore(constraints="property multiplicity_of_object ends_of_association type_of_result multiplicity_of_result type_of_object association_of_association")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(property="end.association <> null", multiplicity_of_object="object.is(1,1)", ends_of_association="end.association.memberEnd->forAll(e | not e.isStatic)", type_of_result="result.type = end.type", multiplicity_of_result="result.is(1,1)", type_of_object="object.type = end.association", association_of_association="end.association.oclIsKindOf(AssociationClass)")
  class ReadLinkObjectEndAction extends Action {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="readLinkObjectEndAction")
    @GenModel(documentation="The Association end to be read.")
    !ordered ref classification.Property[1] end;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="readLinkObjectEndAction")
    @GenModel(documentation="The input pin from which the link object is obtained.")
    @subsets
    !ordered val InputPin[1] object;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="readLinkObjectEndAction")
    @GenModel(documentation="The OutputPin where the result value is placed.")
    @subsets
    !ordered val OutputPin[1] result;
  }

  @GenModel(documentation="A ReadLinkObjectEndQualifierAction is an Action that retrieves a qualifier end value from a link object.
object.is(1,1)
object.type = qualifier.associationEnd.association
qualifier.is(1,1)
qualifier.associationEnd.association.memberEnd->forAll(e | not e.isStatic)
result.is(1,1)
result.type = qualifier.type
qualifier.associationEnd.association.oclIsKindOf(AssociationClass)
qualifier.associationEnd <> null")
  @Ecore(constraints="multiplicity_of_object type_of_object multiplicity_of_qualifier ends_of_association multiplicity_of_result same_type association_of_association qualifier_attribute")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(multiplicity_of_object="object.is(1,1)", type_of_object="object.type = qualifier.associationEnd.association", multiplicity_of_qualifier="qualifier.is(1,1)", ends_of_association="qualifier.associationEnd.association.memberEnd->forAll(e | not e.isStatic)", multiplicity_of_result="result.is(1,1)", same_type="result.type = qualifier.type", association_of_association="qualifier.associationEnd.association.oclIsKindOf(AssociationClass)", qualifier_attribute="qualifier.associationEnd <> null")
  class ReadLinkObjectEndQualifierAction extends Action {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="readLinkObjectEndQualifierAction")
    @GenModel(documentation="The InputPin from which the link object is obtained.")
    @subsets
    !ordered val InputPin[1] object;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="readLinkObjectEndQualifierAction")
    @GenModel(documentation="The qualifier Property to be read.")
    !ordered ref classification.Property[1] qualifier;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="readLinkObjectEndQualifierAction")
    @GenModel(documentation="The OutputPin where the result value is placed.")
    @subsets
    !ordered val OutputPin[1] result;
  }

  @GenModel(documentation="A ReadSelfAction is an Action that retrieves the context object of the Behavior execution within which the ReadSelfAction execution is taking place.
_'context' <> null
result.is(1,1)
let behavior: Behavior = self.containingBehavior() in
behavior.specification<>null implies not behavior.specification.isStatic
result.type = _'context'")
  @Ecore(constraints="contained multiplicity not_static type")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(contained="_'context' <> null", multiplicity="result.is(1,1)", not_static="let behavior: Behavior = self.containingBehavior() in
behavior.specification<>null implies not behavior.specification.isStatic", type="result.type = _'context'")
  class ReadSelfAction extends Action {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="readSelfAction")
    @GenModel(documentation="The OutputPin on which the context object is placed.")
    @subsets
    !ordered val OutputPin[1] result;
  }

  @GenModel(documentation="A ReadStructuralFeatureAction is a StructuralFeatureAction that retrieves the values of a StructuralFeature.
structuralFeature.compatibleWith(result)
result.type =structuralFeature.type and 
result.isOrdered = structuralFeature.isOrdered
")
  @Ecore(constraints="multiplicity type_and_ordering")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(multiplicity="structuralFeature.compatibleWith(result)", type_and_ordering="result.type =structuralFeature.type and 
result.isOrdered = structuralFeature.isOrdered
")
  class ReadStructuralFeatureAction extends StructuralFeatureAction {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="readStructuralFeatureAction")
    @GenModel(documentation="The OutputPin on which the result values are placed.")
    @subsets
    !ordered val OutputPin[1] result;
  }

  @GenModel(documentation="A ReadVariableAction is a VariableAction that retrieves the values of a Variable.
result.type =variable.type and 
result.isOrdered = variable.isOrdered

variable.compatibleWith(result)")
  @Ecore(constraints="type_and_ordering compatible_multiplicity")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(type_and_ordering="result.type =variable.type and 
result.isOrdered = variable.isOrdered
", compatible_multiplicity="variable.compatibleWith(result)")
  class ReadVariableAction extends VariableAction {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="readVariableAction")
    @GenModel(documentation="The OutputPin on which the result values are placed.")
    @subsets
    !ordered val OutputPin[1] result;
  }

  @GenModel(documentation="A ReclassifyObjectAction is an Action that changes the Classifiers that classify an object.
object.type = null
not newClassifier->exists(isAbstract)
object.is(1,1)")
  @Ecore(constraints="input_pin classifier_not_abstract multiplicity")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(input_pin="object.type = null", classifier_not_abstract="not newClassifier->exists(isAbstract)", multiplicity="object.is(1,1)")
  class ReclassifyObjectAction extends Action {

    @GenModel(documentation="Specifies whether existing Classifiers should be removed before adding the new Classifiers.")
    !ordered attr types.Boolean[1] isReplaceAll = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="reclassifyObjectAction")
    @GenModel(documentation="A set of Classifiers to be added to the Classifiers of the given object.")
    !ordered ref classification.Classifier[*] newClassifier;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="reclassifyObjectAction")
    @GenModel(documentation="The InputPin that holds the object to be reclassified.")
    @subsets
    !ordered val InputPin[1] object;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="reclassifyObjectAction")
    @GenModel(documentation="A set of Classifiers to be removed from the Classifiers of the given object.")
    !ordered ref classification.Classifier[*] oldClassifier;
  }

  @GenModel(documentation="A ReduceAction is an Action that reduces a collection to a single value by repeatedly combining the elements of the collection using a reducer Behavior.
let inputs: OrderedSet(Parameter) = reducer.inputParameters() in
let outputs: OrderedSet(Parameter) = reducer.outputParameters() in
inputs->size()=2 and outputs->size()=1 and
inputs.type->forAll(t | 
	outputs.type->forAll(conformsTo(t)) and 
	-- Note that the following only checks the case when the collection is via multiple tokens.
	collection.upperBound()>1 implies collection.type.conformsTo(t))
reducer.outputParameters().type->forAll(conformsTo(result.type))")
  @Ecore(constraints="reducer_inputs_output input_type_is_collection output_types_are_compatible")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(reducer_inputs_output="let inputs: OrderedSet(Parameter) = reducer.inputParameters() in
let outputs: OrderedSet(Parameter) = reducer.outputParameters() in
inputs->size()=2 and outputs->size()=1 and
inputs.type->forAll(t | 
	outputs.type->forAll(conformsTo(t)) and 
	-- Note that the following only checks the case when the collection is via multiple tokens.
	collection.upperBound()>1 implies collection.type.conformsTo(t))", output_types_are_compatible="reducer.outputParameters().type->forAll(conformsTo(result.type))")
  class ReduceAction extends Action {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="reduceAction")
    @GenModel(documentation="The InputPin that provides the collection to be reduced.")
    @subsets
    !ordered val InputPin[1] collection;

    @GenModel(documentation="Indicates whether the order of the input collection should determine the order in which the reducer Behavior is applied to its elements.")
    !ordered attr types.Boolean[1] isOrdered = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="reduceAction")
    @GenModel(documentation="A Behavior that is repreatedly applied to two elements of the input collection to produce a value that is of the same type as elements of the collection.")
    !ordered ref commonBehavior.Behavior[1] reducer;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="reduceAction")
    @GenModel(documentation="The output pin on which the result value is placed.")
    @subsets
    !ordered val OutputPin[1] result;
  }

  @GenModel(documentation="A RemoveStructuralFeatureValueAction is a WriteStructuralFeatureAction that removes values from a StructuralFeature.
if structuralFeature.isOrdered and not structuralFeature.isUnique and  not isRemoveDuplicates then
  value = null and
  removeAt <> null and
  removeAt.type = UnlimitedNatural and
  removeAt.is(1,1)
else
  removeAt = null and value <> null
endif")
  @Ecore(constraints="removeAt_and_value")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(removeAt_and_value="if structuralFeature.isOrdered and not structuralFeature.isUnique and  not isRemoveDuplicates then
  value = null and
  removeAt <> null and
  removeAt.type = UnlimitedNatural and
  removeAt.is(1,1)
else
  removeAt = null and value <> null
endif")
  class RemoveStructuralFeatureValueAction extends WriteStructuralFeatureAction {

    @GenModel(documentation="Specifies whether to remove duplicates of the value in nonunique StructuralFeatures.")
    !ordered attr types.Boolean[1] isRemoveDuplicates = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="removeStructuralFeatureValueAction")
    @GenModel(documentation="An InputPin that provides the position of an existing value to remove in ordered, nonunique structural features. The type of the removeAt InputPin is UnlimitedNatural, but the value cannot be zero or unlimited.")
    @subsets
    !ordered val InputPin removeAt;
  }

  @GenModel(documentation="A RemoveVariableValueAction is a WriteVariableAction that removes values from a Variables.
if  variable.isOrdered and not variable.isUnique and not isRemoveDuplicates then 
  value = null and
  removeAt <> null and
  removeAt.type = UnlimitedNatural and
  removeAt.is(1,1)
else
  removeAt = null and value <> null
endif")
  @Ecore(constraints="removeAt_and_value")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(removeAt_and_value="if  variable.isOrdered and not variable.isUnique and not isRemoveDuplicates then 
  value = null and
  removeAt <> null and
  removeAt.type = UnlimitedNatural and
  removeAt.is(1,1)
else
  removeAt = null and value <> null
endif")
  class RemoveVariableValueAction extends WriteVariableAction {

    @GenModel(documentation="Specifies whether to remove duplicates of the value in nonunique Variables.")
    !ordered attr types.Boolean[1] isRemoveDuplicates = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="removeVariableValueAction")
    @GenModel(documentation="An InputPin that provides the position of an existing value to remove in ordered, nonunique Variables. The type of the removeAt InputPin is UnlimitedNatural, but the value cannot be zero or unlimited.")
    @subsets
    !ordered val InputPin removeAt;
  }

  @GenModel(documentation="A ReplyAction is an Action that accepts a set of reply values and a value containing return information produced by a previous AcceptCallAction. The ReplyAction returns the values to the caller of the previous call, completing execution of the call.
let parameter:OrderedSet(Parameter) = replyToCall.event.oclAsType(CallEvent).operation.outputParameters() in
replyValue->size()=parameter->size() and
Sequence{1..replyValue->size()}->forAll(i |
	replyValue->at(i).type.conformsTo(parameter->at(i).type) and
	replyValue->at(i).isOrdered=parameter->at(i).isOrdered and
	replyValue->at(i).compatibleWith(parameter->at(i)))
replyToCall.event.oclIsKindOf(CallEvent)")
  @Ecore(constraints="pins_match_parameter event_on_reply_to_call_trigger")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(pins_match_parameter="let parameter:OrderedSet(Parameter) = replyToCall.event.oclAsType(CallEvent).operation.outputParameters() in
replyValue->size()=parameter->size() and
Sequence{1..replyValue->size()}->forAll(i |
	replyValue->at(i).type.conformsTo(parameter->at(i).type) and
	replyValue->at(i).isOrdered=parameter->at(i).isOrdered and
	replyValue->at(i).compatibleWith(parameter->at(i)))", event_on_reply_to_call_trigger="replyToCall.event.oclIsKindOf(CallEvent)")
  class ReplyAction extends Action {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="replyAction")
    @GenModel(documentation="The Trigger specifying the Operation whose call is being replied to.")
    !ordered ref commonBehavior.Trigger[1] replyToCall;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="replyAction")
    @GenModel(documentation="A list of InputPins providing the values for the output (inout, out, and return) Parameters of the Operation. These values are returned to the caller.")
    @subsets
    val InputPin[*] replyValue;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="replyAction")
    @GenModel(documentation="An InputPin that holds the return information value produced by an earlier AcceptCallAction.")
    @subsets
    !ordered val InputPin[1] returnInformation;
  }

  @GenModel(documentation="A SendObjectAction is an InvocationAction that transmits an input object to the target object, which is handled as a request message by the target object. The requestor continues execution immediately after the object is sent out and cannot receive reply values.
onPort<>null implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)")
  @Ecore(constraints="type_target_pin")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(type_target_pin="onPort<>null implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)")
  class SendObjectAction extends InvocationAction {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="sendObjectAction")
    @GenModel(documentation="The request object, which is transmitted to the target object. The object may be copied in transmission, so identity might not be preserved.")
    @redefines
    !ordered val InputPin[1] request;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="sendObjectAction")
    @GenModel(documentation="The target object to which the object is sent.")
    @subsets
    !ordered val InputPin[1] target;
  }

  @GenModel(documentation="A SendSignalAction is an InvocationAction that creates a Signal instance and transmits it to the target object. Values from the argument InputPins are used to provide values for the attributes of the Signal. The requestor continues execution immediately after the Signal instance is sent out and cannot receive reply values.
let attribute: OrderedSet(Property) = signal.allAttributes() in
Sequence{1..argument->size()}->forAll(i | 
	argument->at(i).type.conformsTo(attribute->at(i).type) and 
	argument->at(i).isOrdered = attribute->at(i).isOrdered and
	argument->at(i).compatibleWith(attribute->at(i)))
argument->size()=signal.allAttributes()->size()
not onPort->isEmpty() implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)
")
  @Ecore(constraints="type_ordering_multiplicity number_order type_target_pin")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(type_ordering_multiplicity="let attribute: OrderedSet(Property) = signal.allAttributes() in
Sequence{1..argument->size()}->forAll(i | 
	argument->at(i).type.conformsTo(attribute->at(i).type) and 
	argument->at(i).isOrdered = attribute->at(i).isOrdered and
	argument->at(i).compatibleWith(attribute->at(i)))", number_order="argument->size()=signal.allAttributes()->size()", type_target_pin="not onPort->isEmpty() implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)
")
  class SendSignalAction extends InvocationAction {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="sendSignalAction")
    @GenModel(documentation="The Signal whose instance is transmitted to the target.")
    !ordered ref simpleClassifiers.Signal[1] signal;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="sendSignalAction")
    @GenModel(documentation="The InputPin that provides the target object to which the Signal instance is sent.")
    @subsets
    !ordered val InputPin[1] target;
  }

  @GenModel(documentation="A SequenceNode is a StructuredActivityNode that executes a sequence of ExecutableNodes in order.")
  class SequenceNode extends StructuredActivityNode {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="sequenceNode")
    @GenModel(documentation="The ordered set of ExecutableNodes to be sequenced.")
    @redefines
    val activities.ExecutableNode[*] executableNode;
  }

  @GenModel(documentation="A StartClassifierBehaviorAction is an Action that starts the classifierBehavior of the input object.
object.is(1,1)
object.type->notEmpty() implies 
   (object.type.oclIsKindOf(BehavioredClassifier) and object.type.oclAsType(BehavioredClassifier).classifierBehavior<>null)")
  @Ecore(constraints="multiplicity type_has_classifier")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(multiplicity="object.is(1,1)", type_has_classifier="object.type->notEmpty() implies 
   (object.type.oclIsKindOf(BehavioredClassifier) and object.type.oclAsType(BehavioredClassifier).classifierBehavior<>null)")
  class StartClassifierBehaviorAction extends Action {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="startClassifierBehaviorAction")
    @GenModel(documentation="The InputPin that holds the object whose classifierBehavior is to be started.")
    @subsets
    !ordered val InputPin[1] object;
  }

  @GenModel(documentation="A StartObjectBehaviorAction is an InvocationAction that starts the execution either of a directly instantiated Behavior or of the classifierBehavior of an object. Argument values may be supplied for the input Parameters of the Behavior. If the Behavior is invoked synchronously, then output values may be obtained for output Parameters.
object.is(1,1)
self.behavior()<>null
onPort->isEmpty()")
  @Ecore(constraints="multiplicity_of_object type_of_object no_onport")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(multiplicity_of_object="object.is(1,1)", type_of_object="self.behavior()<>null", no_onport="onPort->isEmpty()")
  @duplicates
  class StartObjectBehaviorAction extends CallAction {

    @GenModel(documentation="If the type of the object InputPin is a Behavior, then that Behavior. Otherwise, if the type of the object InputPin is a BehavioredClassifier, then the classifierBehavior of that BehavioredClassifier.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if object.type.oclIsKindOf(Behavior) then
  object.type.oclAsType(Behavior)
else if object.type.oclIsKindOf(BehavioredClassifier) then
  object.type.oclAsType(BehavioredClassifier).classifierBehavior
else
  null
endif
endif")
    !ordered op commonBehavior.Behavior behavior();

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="startObjectBehaviorAction")
    @GenModel(documentation="An InputPin that holds the object that is either a Behavior to be started or has a classifierBehavior to be started.")
    @subsets
    !ordered val InputPin[1] object;
  }

  @GenModel(documentation="A TestIdentityAction is an Action that tests if two values are identical objects.
first.is(1,1) and second.is(1,1)

first.type= null and second.type = null

result.type=Boolean")
  @Ecore(constraints="multiplicity no_type result_is_boolean")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(multiplicity="first.is(1,1) and second.is(1,1)
", no_type="first.type= null and second.type = null
", result_is_boolean="result.type=Boolean")
  class TestIdentityAction extends Action {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="testIdentityAction")
    @GenModel(documentation="The InputPin on which the first input object is placed.")
    @subsets
    !ordered val InputPin[1] first;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="testIdentityAction")
    @GenModel(documentation="The OutputPin whose Boolean value indicates whether the two input objects are identical.")
    @subsets
    !ordered val OutputPin[1] result;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="testIdentityAction")
    @GenModel(documentation="The OutputPin on which the second input object is placed.")
    @subsets
    !ordered val InputPin[1] second;
  }

  @GenModel(documentation="An UnmarshallAction is an Action that retrieves the values of the StructuralFeatures of an object and places them on OutputPins. 
unmarshallType.allAttributes()->size() >= 1
unmarshallType.allAttributes()->size() = result->size()
let attribute:OrderedSet(Property) = unmarshallType.allAttributes() in
Sequence{1..result->size()}->forAll(i | 
	attribute->at(i).type.conformsTo(result->at(i).type) and
	attribute->at(i).isOrdered=result->at(i).isOrdered and
	attribute->at(i).compatibleWith(result->at(i)))
object.is(1,1)
object.type.conformsTo(unmarshallType)")
  @Ecore(constraints="structural_feature number_of_result type_ordering_and_multiplicity multiplicity_of_object object_type")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(structural_feature="unmarshallType.allAttributes()->size() >= 1", number_of_result="unmarshallType.allAttributes()->size() = result->size()", type_ordering_and_multiplicity="let attribute:OrderedSet(Property) = unmarshallType.allAttributes() in
Sequence{1..result->size()}->forAll(i | 
	attribute->at(i).type.conformsTo(result->at(i).type) and
	attribute->at(i).isOrdered=result->at(i).isOrdered and
	attribute->at(i).compatibleWith(result->at(i)))", multiplicity_of_object="object.is(1,1)", object_type="object.type.conformsTo(unmarshallType)")
  class UnmarshallAction extends Action {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="unmarshallAction")
    @GenModel(documentation="The InputPin that gives the object to be unmarshalled.")
    @subsets
    !ordered val InputPin[1] object;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="unmarshallAction")
    @GenModel(documentation="The OutputPins on which are placed the values of the StructuralFeatures of the input object.")
    @subsets
    val OutputPin[+] result;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="unmarshallAction")
    @GenModel(documentation="The type of the object to be unmarshalled.")
    !ordered ref classification.Classifier[1] unmarshallType;
  }

  @GenModel(documentation="A ValuePin is an InputPin that provides a value by evaluating a ValueSpecification.
incoming->isEmpty()
value.type.conformsTo(type)")
  @Ecore(constraints="no_incoming_edges compatible_type")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(no_incoming_edges="incoming->isEmpty()", compatible_type="value.type.conformsTo(type)")
  class ValuePin extends InputPin {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="valuePin")
    @GenModel(documentation="The ValueSpecification that is evaluated to obtain the value that the ValuePin will provide.")
    @subsets
    !ordered val values.ValueSpecification[1] value;
  }

  @GenModel(documentation="A StructuredActivityNode is an Action that is also an ActivityGroup and whose behavior is specified by the ActivityNodes and ActivityEdges it so contains. Unlike other kinds of ActivityGroup, a StructuredActivityNode owns the ActivityNodes and ActivityEdges it contains, and so a node or edge can only be directly contained in one StructuredActivityNode, though StructuredActivityNodes may be nested.
output.outgoing.target->excludesAll(allOwnedNodes()-input)
edge=self.sourceNodes().outgoing->intersection(self.allOwnedNodes().incoming)->
	union(self.targetNodes().incoming->intersection(self.allOwnedNodes().outgoing))->asSet()
input.incoming.source->excludesAll(allOwnedNodes()-output)")
  @Ecore(constraints="output_pin_edges edges input_pin_edges")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(output_pin_edges="output.outgoing.target->excludesAll(allOwnedNodes()-input)", edges="edge=self.sourceNodes().outgoing->intersection(self.allOwnedNodes().incoming)->
	union(self.targetNodes().incoming->intersection(self.allOwnedNodes().outgoing))->asSet()", input_pin_edges="input.incoming.source->excludesAll(allOwnedNodes()-output)")
  @duplicates
  class StructuredActivityNode extends Action, commonStructure.Namespace, activities.ActivityGroup {

    @GenModel(documentation="Return those ActivityNodes contained immediately within the StructuredActivityNode that may act as sources of edges owned by the StructuredActivityNode.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="node->union(input.oclAsType(ActivityNode)->asSet())->
  union(node->select(oclIsKindOf(Action)).oclAsType(Action).output)->asSet()")
    !ordered op activities.ActivityNode[*] sourceNodes();

    @GenModel(documentation="Return those ActivityNodes contained immediately within the StructuredActivityNode that may act as targets of edges owned by the StructuredActivityNode.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="node->union(output.oclAsType(ActivityNode)->asSet())->
  union(node->select(oclIsKindOf(Action)).oclAsType(Action).input)->asSet()")
    !ordered op activities.ActivityNode[*] targetNodes();

    @GenModel(documentation="The Variables defined in the scope of the StructuredActivityNode.")
    @subsets
    !ordered val activities.Variable[*]#scope variable;

    @GenModel(documentation="The ActivityEdges immediately contained in the StructuredActivityNode.")
    @subsets
    !ordered val activities.ActivityEdge[*]#inStructuredNode edge;

    @GenModel(documentation="If true, then any object used by an Action within the StructuredActivityNode cannot be accessed by any Action outside the node until the StructuredActivityNode as a whole completes. Any concurrent Actions that would result in accessing such objects are required to have their execution deferred until the completion of the StructuredActivityNode.
")
    !ordered attr types.Boolean[1] mustIsolate = "false";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="structuredActivityNode")
    @GenModel(documentation="The InputPins owned by the StructuredActivityNode.")
    @subsets
    !ordered val InputPin[*] structuredNodeInput;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="structuredActivityNode")
    @GenModel(documentation="The OutputPins owned by the StructuredActivityNode.")
    @subsets
    !ordered val OutputPin[*] structuredNodeOutput;

    @GenModel(documentation="The ActivityNodes immediately contained in the StructuredActivityNode.")
    @subsets
    !ordered val activities.ActivityNode[*]#inStructuredNode node;
  }

}

@"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="Interactions")
@Ecore(validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL", invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL")
@namespace(uri="http:///uml/interactions.ecore", prefix="uml.interactions")
package interactions {
  @GenModel(documentation="An ActionExecutionSpecification is a kind of ExecutionSpecification representing the execution of an Action.
(enclosingInteraction->notEmpty() or enclosingOperand.combinedFragment->notEmpty()) and
let parentInteraction : Set(Interaction) = enclosingInteraction.oclAsType(Interaction)->asSet()->union(
enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->
collect(enclosingInteraction).oclAsType(Interaction)->asSet()) in
(parentInteraction->size() = 1) and self.action.interaction->asSet() = parentInteraction")
  @Ecore(constraints="action_referenced")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(action_referenced="(enclosingInteraction->notEmpty() or enclosingOperand.combinedFragment->notEmpty()) and
let parentInteraction : Set(Interaction) = enclosingInteraction.oclAsType(Interaction)->asSet()->union(
enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->
collect(enclosingInteraction).oclAsType(Interaction)->asSet()) in
(parentInteraction->size() = 1) and self.action.interaction->asSet() = parentInteraction")
  class ActionExecutionSpecification extends ExecutionSpecification {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="actionExecutionSpecification")
    @GenModel(documentation="Action whose execution is occurring.")
    !ordered ref actions.Action[1] action;
  }

  @GenModel(documentation="An ExecutionSpecification is a specification of the execution of a unit of Behavior or Action within the Lifeline. The duration of an ExecutionSpecification is represented by two OccurrenceSpecifications, the start OccurrenceSpecification and the finish OccurrenceSpecification.
start.covered = finish.covered")
  @Ecore(constraints="same_lifeline")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(same_lifeline="start.covered = finish.covered")
  abstract class ExecutionSpecification extends InteractionFragment {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="executionSpecification")
    @GenModel(documentation="References the OccurrenceSpecification that designates the finish of the Action or Behavior.")
    !ordered ref OccurrenceSpecification[1] finish;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="executionSpecification")
    @GenModel(documentation="References the OccurrenceSpecification that designates the start of the Action or Behavior.")
    !ordered ref OccurrenceSpecification[1] start;
  }

  @GenModel(documentation="InteractionFragment is an abstract notion of the most general interaction unit. An InteractionFragment is a piece of an Interaction. Each InteractionFragment is conceptually like an Interaction by itself.")
  abstract class InteractionFragment extends commonStructure.NamedElement {

    @GenModel(documentation="References the Lifelines that the InteractionFragment involves.")
    !ordered ref Lifeline[*]#coveredBy covered;

    @GenModel(documentation="The Interaction enclosing this InteractionFragment.")
    @subsets
    !ordered ref Interaction#fragment enclosingInteraction;

    @GenModel(documentation="The operand enclosing this InteractionFragment (they may nest recursively).")
    @subsets
    !ordered ref InteractionOperand#fragment enclosingOperand;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="interactionFragment")
    @GenModel(documentation="The general ordering relationships contained in this fragment.")
    @subsets
    !ordered val GeneralOrdering[*] generalOrdering;
  }

  @GenModel(documentation="A Lifeline represents an individual participant in the Interaction. While parts and structural features may have multiplicity greater than 1, Lifelines represent only one interacting entity.
 self.selector->notEmpty() = (self.represents.oclIsKindOf(MultiplicityElement) and self.represents.oclAsType(MultiplicityElement).isMultivalued())
let intUses : Set(InteractionUse) = interaction.interactionUse  in 
intUses->forAll
( iuse : InteractionUse | 
let usingInteraction : Set(Interaction)  = iuse.enclosingInteraction->asSet()
->union(
iuse.enclosingOperand.combinedFragment->asSet()->closure(enclosingOperand.combinedFragment).enclosingInteraction->asSet()
               ) 
in
let peerUses : Set(InteractionUse) = usingInteraction.fragment->select(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)->asSet()
->union(
usingInteraction.fragment->select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)->asSet()
->closure(operand.fragment->select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)).operand.fragment->
select(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)->asSet()
               )->excluding(iuse)
 in
peerUses->forAll( peerUse : InteractionUse |
 peerUse.refersTo.lifeline->forAll( l : Lifeline | (l.represents = self.represents and 
 ( self.selector.oclIsKindOf(LiteralString) implies
  l.selector.oclIsKindOf(LiteralString) and 
  self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )
  and 
( self.selector.oclIsKindOf(LiteralInteger) implies
  l.selector.oclIsKindOf(LiteralInteger) and 
  self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value )
)  
implies
 usingInteraction.lifeline->select(represents = self.represents and
 ( self.selector.oclIsKindOf(LiteralString) implies
  l.selector.oclIsKindOf(LiteralString) and 
  self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )
and 
( self.selector.oclIsKindOf(LiteralInteger) implies
  l.selector.oclIsKindOf(LiteralInteger) and 
  self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value )
)
                                                )
                    )
)
represents.namespace->closure(namespace)->includes(interaction._'context')
self.selector->notEmpty() implies 
self.selector.oclIsKindOf(LiteralInteger) or 
self.selector.oclIsKindOf(LiteralString)")
  @Ecore(constraints="selector_specified interaction_uses_share_lifeline same_classifier selector_int_or_string")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(selector_specified=" self.selector->notEmpty() = (self.represents.oclIsKindOf(MultiplicityElement) and self.represents.oclAsType(MultiplicityElement).isMultivalued())", interaction_uses_share_lifeline="let intUses : Set(InteractionUse) = interaction.interactionUse  in 
intUses->forAll
( iuse : InteractionUse | 
let usingInteraction : Set(Interaction)  = iuse.enclosingInteraction->asSet()
->union(
iuse.enclosingOperand.combinedFragment->asSet()->closure(enclosingOperand.combinedFragment).enclosingInteraction->asSet()
               ) 
in
let peerUses : Set(InteractionUse) = usingInteraction.fragment->select(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)->asSet()
->union(
usingInteraction.fragment->select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)->asSet()
->closure(operand.fragment->select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)).operand.fragment->
select(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)->asSet()
               )->excluding(iuse)
 in
peerUses->forAll( peerUse : InteractionUse |
 peerUse.refersTo.lifeline->forAll( l : Lifeline | (l.represents = self.represents and 
 ( self.selector.oclIsKindOf(LiteralString) implies
  l.selector.oclIsKindOf(LiteralString) and 
  self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )
  and 
( self.selector.oclIsKindOf(LiteralInteger) implies
  l.selector.oclIsKindOf(LiteralInteger) and 
  self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value )
)  
implies
 usingInteraction.lifeline->select(represents = self.represents and
 ( self.selector.oclIsKindOf(LiteralString) implies
  l.selector.oclIsKindOf(LiteralString) and 
  self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )
and 
( self.selector.oclIsKindOf(LiteralInteger) implies
  l.selector.oclIsKindOf(LiteralInteger) and 
  self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value )
)
                                                )
                    )
)", same_classifier="represents.namespace->closure(namespace)->includes(interaction._'context')", selector_int_or_string="self.selector->notEmpty() implies 
self.selector.oclIsKindOf(LiteralInteger) or 
self.selector.oclIsKindOf(LiteralString)")
  class Lifeline extends commonStructure.NamedElement {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="lifeline")
    @GenModel(documentation="References the Interaction that represents the decomposition.")
    !ordered ref PartDecomposition decomposedAs;

    @GenModel(documentation="References the Interaction enclosing this Lifeline.")
    @subsets
    !ordered ref Interaction[1]#lifeline interaction;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="lifeline")
    @GenModel(documentation="References the ConnectableElement within the classifier that contains the enclosing interaction.")
    !ordered ref structuredClassifiers.ConnectableElement represents;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="lifeline")
    @GenModel(documentation="If the referenced ConnectableElement is multivalued, then this specifies the specific individual part within that set.")
    @subsets
    !ordered val values.ValueSpecification selector;

    @GenModel(documentation="References the InteractionFragments in which this Lifeline takes part.")
    !ordered ref InteractionFragment[*]#covered coveredBy;
  }

  @GenModel(documentation="A PartDecomposition is a description of the internal Interactions of one Lifeline relative to an Interaction.")
  @Ecore(constraints="commutativity_of_decomposition assume parts_of_internal_structures")
  class PartDecomposition extends InteractionUse {
  }

  @GenModel(documentation="An InteractionUse refers to an Interaction. The InteractionUse is a shorthand for copying the contents of the referenced Interaction where the InteractionUse is. To be accurate the copying must take into account substituting parameters with arguments and connect the formal Gates with the actual ones.
actualGate->notEmpty() implies 
refersTo.formalGate->forAll( fg : Gate | self.actualGate->select(matches(fg))->size()=1) and
self.actualGate->forAll(ag : Gate | refersTo.formalGate->select(matches(ag))->size()=1)
returnValueRecipient->asSet()->notEmpty() implies
let covCE : Set(ConnectableElement) = covered.represents->asSet() in 
covCE->notEmpty() and let classes:Set(Classifier) = covCE.type.oclIsKindOf(Classifier).oclAsType(Classifier)->asSet() in 
let allProps : Set(Property) = classes.attribute->union(classes.allParents().attribute)->asSet() in 
allProps->includes(returnValueRecipient)
returnValue.type->asSequence()->notEmpty() implies returnValue.type->asSequence()->first() = returnValueRecipient.type->asSequence()->first()

let parentInteraction : Set(Interaction) = enclosingInteraction->asSet()->
union(enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->
collect(enclosingInteraction).oclAsType(Interaction)->asSet()) in
parentInteraction->size()=1 and let refInteraction : Interaction = refersTo in
parentInteraction.covered-> forAll(intLifeline : Lifeline | refInteraction.covered->
forAll( refLifeline : Lifeline | refLifeline.represents = intLifeline.represents and 
(
( refLifeline.selector.oclIsKindOf(LiteralString) implies
  intLifeline.selector.oclIsKindOf(LiteralString) and 
  refLifeline.selector.oclAsType(LiteralString).value = intLifeline.selector.oclAsType(LiteralString).value ) and
( refLifeline.selector.oclIsKindOf(LiteralInteger) implies
  intLifeline.selector.oclIsKindOf(LiteralInteger) and 
  refLifeline.selector.oclAsType(LiteralInteger).value = intLifeline.selector.oclAsType(LiteralInteger).value )
)
 implies self.covered->asSet()->includes(intLifeline)))")
  @Ecore(constraints="gates_match arguments_are_constants returnValueRecipient_coverage arguments_correspond_to_parameters returnValue_type_recipient_correspondence all_lifelines")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(gates_match="actualGate->notEmpty() implies 
refersTo.formalGate->forAll( fg : Gate | self.actualGate->select(matches(fg))->size()=1) and
self.actualGate->forAll(ag : Gate | refersTo.formalGate->select(matches(ag))->size()=1)", returnValueRecipient_coverage="returnValueRecipient->asSet()->notEmpty() implies
let covCE : Set(ConnectableElement) = covered.represents->asSet() in 
covCE->notEmpty() and let classes:Set(Classifier) = covCE.type.oclIsKindOf(Classifier).oclAsType(Classifier)->asSet() in 
let allProps : Set(Property) = classes.attribute->union(classes.allParents().attribute)->asSet() in 
allProps->includes(returnValueRecipient)", returnValue_type_recipient_correspondence="returnValue.type->asSequence()->notEmpty() implies returnValue.type->asSequence()->first() = returnValueRecipient.type->asSequence()->first()
", all_lifelines="let parentInteraction : Set(Interaction) = enclosingInteraction->asSet()->
union(enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->
collect(enclosingInteraction).oclAsType(Interaction)->asSet()) in
parentInteraction->size()=1 and let refInteraction : Interaction = refersTo in
parentInteraction.covered-> forAll(intLifeline : Lifeline | refInteraction.covered->
forAll( refLifeline : Lifeline | refLifeline.represents = intLifeline.represents and 
(
( refLifeline.selector.oclIsKindOf(LiteralString) implies
  intLifeline.selector.oclIsKindOf(LiteralString) and 
  refLifeline.selector.oclAsType(LiteralString).value = intLifeline.selector.oclAsType(LiteralString).value ) and
( refLifeline.selector.oclIsKindOf(LiteralInteger) implies
  intLifeline.selector.oclIsKindOf(LiteralInteger) and 
  refLifeline.selector.oclAsType(LiteralInteger).value = intLifeline.selector.oclAsType(LiteralInteger).value )
)
 implies self.covered->asSet()->includes(intLifeline)))")
  class InteractionUse extends InteractionFragment {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="interactionUse")
    @GenModel(documentation="The actual gates of the InteractionUse.")
    @subsets
    !ordered val Gate[*] actualGate;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="interactionUse")
    @GenModel(documentation="The actual arguments of the Interaction.")
    @subsets
    val values.ValueSpecification[*] argument;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="interactionUse")
    @GenModel(documentation="Refers to the Interaction that defines its meaning.")
    !ordered ref Interaction[1] refersTo;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="interactionUse")
    @GenModel(documentation="The value of the executed Interaction.")
    @subsets
    !ordered val values.ValueSpecification returnValue;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="interactionUse")
    @GenModel(documentation="The recipient of the return value.")
    !ordered ref classification.Property returnValueRecipient;
  }

  @GenModel(documentation="A Gate is a MessageEnd which serves as a connection point for relating a Message which has a MessageEnd (sendEvent / receiveEvent) outside an InteractionFragment with another Message which has a MessageEnd (receiveEvent / sendEvent)  inside that InteractionFragment.
interactionUse->notEmpty() implies interactionUse.refersTo.formalGate->select(matches(self))->size()=1
isInsideCF() implies combinedFragment.cfragmentGate->select(isOutsideCF() and matches(self))->size()=1
isOutsideCF() implies
 if self.combinedFragment.interactionOperator->asOrderedSet()->first() = InteractionOperatorKind::alt
 then self.combinedFragment.operand->forAll(op : InteractionOperand |
 self.combinedFragment.cfragmentGate->select(isInsideCF() and 
 oppositeEnd().enclosingFragment()->includes(self.combinedFragment) and matches(self))->size()=1)
 else  self.combinedFragment.cfragmentGate->select(isInsideCF() and matches(self))->size()=1
 endif
isFormal() implies interaction.formalGate->select(getName() = self.getName())->size()=1
isActual() implies interactionUse.actualGate->select(getName() = self.getName())->size()=1
isOutsideCF() implies combinedFragment.cfragmentGate->select(getName() = self.getName())->size()=1
isInsideCF() implies
let selfOperand : InteractionOperand = self.getOperand() in
  combinedFragment.cfragmentGate->select(isInsideCF() and getName() = self.getName())->select(getOperand() = selfOperand)->size()=1")
  @Ecore(constraints="actual_gate_matched inside_cf_matched outside_cf_matched formal_gate_distinguishable actual_gate_distinguishable outside_cf_gate_distinguishable inside_cf_gate_distinguishable")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(actual_gate_matched="interactionUse->notEmpty() implies interactionUse.refersTo.formalGate->select(matches(self))->size()=1", inside_cf_matched="isInsideCF() implies combinedFragment.cfragmentGate->select(isOutsideCF() and matches(self))->size()=1", outside_cf_matched="isOutsideCF() implies
 if self.combinedFragment.interactionOperator->asOrderedSet()->first() = InteractionOperatorKind::alt
 then self.combinedFragment.operand->forAll(op : InteractionOperand |
 self.combinedFragment.cfragmentGate->select(isInsideCF() and 
 oppositeEnd().enclosingFragment()->includes(self.combinedFragment) and matches(self))->size()=1)
 else  self.combinedFragment.cfragmentGate->select(isInsideCF() and matches(self))->size()=1
 endif", formal_gate_distinguishable="isFormal() implies interaction.formalGate->select(getName() = self.getName())->size()=1", actual_gate_distinguishable="isActual() implies interactionUse.actualGate->select(getName() = self.getName())->size()=1", outside_cf_gate_distinguishable="isOutsideCF() implies combinedFragment.cfragmentGate->select(getName() = self.getName())->size()=1", inside_cf_gate_distinguishable="isInsideCF() implies
let selfOperand : InteractionOperand = self.getOperand() in
  combinedFragment.cfragmentGate->select(isInsideCF() and getName() = self.getName())->select(getOperand() = selfOperand)->size()=1")
  @duplicates
  class Gate extends MessageEnd {

    @"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="isOutsideCF")
    @GenModel(documentation="This query returns true if this Gate is attached to the boundary of a CombinedFragment, and its other end (if present)  is outside of the same CombinedFragment.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="self.oppositeEnd()-> notEmpty() and combinedFragment->notEmpty() implies
let oppEnd : MessageEnd = self.oppositeEnd()->asOrderedSet()->first() in
if oppEnd.oclIsKindOf(MessageOccurrenceSpecification) 
then let oppMOS : MessageOccurrenceSpecification = oppEnd.oclAsType(MessageOccurrenceSpecification)
in  self.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->
     union(self.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)->asSet()) =
     oppMOS.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->
     union(oppMOS.enclosingOperand.oclAsType(InteractionFragment)->asSet())
else let oppGate : Gate = oppEnd.oclAsType(Gate) 
in self.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->
     union(self.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)->asSet()) =
     oppGate.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->
     union(oppGate.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)->asSet())
endif")
    !ordered op types.Boolean[1] isOutsideCf();

    @"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="isInsideCF")
    @GenModel(documentation="This query returns true if this Gate is attached to the boundary of a CombinedFragment, and its other end (if present) is inside of an InteractionOperator of the same CombinedFragment.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="self.oppositeEnd()-> notEmpty() and combinedFragment->notEmpty() implies
let oppEnd : MessageEnd = self.oppositeEnd()->asOrderedSet()->first() in
if oppEnd.oclIsKindOf(MessageOccurrenceSpecification)
then let oppMOS : MessageOccurrenceSpecification
= oppEnd.oclAsType(MessageOccurrenceSpecification)
in combinedFragment = oppMOS.enclosingOperand.combinedFragment
else let oppGate : Gate = oppEnd.oclAsType(Gate)
in combinedFragment = oppGate.combinedFragment.enclosingOperand.combinedFragment
endif")
    !ordered op types.Boolean[1] isInsideCf();

    @GenModel(documentation="This query returns true value if this Gate is an actualGate of an InteractionUse.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="interactionUse->notEmpty()")
    !ordered op types.Boolean[1] isActual();

    @GenModel(documentation="This query returns true if this Gate is a formalGate of an Interaction.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="interaction->notEmpty()")
    !ordered op types.Boolean[1] isFormal();

    @GenModel(documentation="This query returns the name of the gate, either the explicit name (.name) or the constructed name ('out_\" or 'in_' concatenated in front of .message.name) if the explicit name is not present.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if name->notEmpty() then name->asOrderedSet()->first()
else  if isActual() or isOutsideCF() 
  then if isSend() 
    then 'out_'.concat(self.message.name->asOrderedSet()->first())
    else 'in_'.concat(self.message.name->asOrderedSet()->first())
    endif
  else if isSend()
    then 'in_'.concat(self.message.name->asOrderedSet()->first())
    else 'out_'.concat(self.message.name->asOrderedSet()->first())
    endif
  endif
endif")
    !ordered op types.String[1] getName();

    @GenModel(documentation="This query returns true if the name of this Gate matches the name of the in parameter Gate, and the messages for the two Gates correspond. The Message for one Gate (say A) corresponds to the Message for another Gate (say B) if (A and B have the same name value) and (if A is a sendEvent then B is a receiveEvent) and (if A is a receiveEvent then B is a sendEvent) and (A and B have the same messageSort value) and (A and B have the same signature value).")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="self.getName() = gateToMatch.getName() and 
self.message.messageSort = gateToMatch.message.messageSort and
self.message.name = gateToMatch.message.name and
self.message.sendEvent->includes(self) implies gateToMatch.message.receiveEvent->includes(gateToMatch)  and
self.message.receiveEvent->includes(self) implies gateToMatch.message.sendEvent->includes(gateToMatch) and
self.message.signature = gateToMatch.message.signature")
    !ordered op types.Boolean[1] matches(!ordered Gate[1] gateToMatch);

    @GenModel(documentation="If the Gate is an inside Combined Fragment Gate, this operation returns the InteractionOperand that the opposite end of this Gate is included within.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if isInsideCF() then
  let oppEnd : MessageEnd = self.oppositeEnd()->asOrderedSet()->first() in
    if oppEnd.oclIsKindOf(MessageOccurrenceSpecification)
    then let oppMOS : MessageOccurrenceSpecification = oppEnd.oclAsType(MessageOccurrenceSpecification)
        in oppMOS.enclosingOperand->asOrderedSet()->first()
    else let oppGate : Gate = oppEnd.oclAsType(Gate)
        in oppGate.combinedFragment.enclosingOperand->asOrderedSet()->first()
    endif
  else null
endif")
    !ordered op InteractionOperand[1] getOperand();
  }

  @GenModel(documentation="MessageEnd is an abstract specialization of NamedElement that represents what can occur at the end of a Message.")
  abstract class MessageEnd extends commonStructure.NamedElement {

    @GenModel(documentation="This query returns a set including the MessageEnd (if exists) at the opposite end of the Message for this MessageEnd.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="message->asSet().messageEnd->asSet()->excluding(self)")
    !ordered op MessageEnd[*] oppositeEnd();

    @GenModel(documentation="This query returns value true if this MessageEnd is a sendEvent.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="message.sendEvent->asSet()->includes(self)")
    !ordered op types.Boolean[1] isSend();

    @GenModel(documentation="This query returns value true if this MessageEnd is a receiveEvent.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="message.receiveEvent->asSet()->includes(self)")
    !ordered op types.Boolean[1] isReceive();

    @GenModel(documentation="This query returns a set including the enclosing InteractionFragment this MessageEnd is enclosed within.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="if self->select(oclIsKindOf(Gate))->notEmpty() 
then -- it is a Gate
let endGate : Gate = 
  self->select(oclIsKindOf(Gate)).oclAsType(Gate)->asOrderedSet()->first()
  in
  if endGate.isOutsideCF() 
  then endGate.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->
     union(endGate.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)->asSet())
  else if endGate.isInsideCF() 
    then endGate.combinedFragment.oclAsType(InteractionFragment)->asSet()
    else if endGate.isFormal() 
      then endGate.interaction.oclAsType(InteractionFragment)->asSet()
      else if endGate.isActual() 
        then endGate.interactionUse.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->
     union(endGate.interactionUse.enclosingOperand.oclAsType(InteractionFragment)->asSet())
        else null
        endif
      endif
    endif
  endif
else -- it is a MessageOccurrenceSpecification
let endMOS : MessageOccurrenceSpecification  = 
  self->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first() 
  in
  if endMOS.enclosingInteraction->notEmpty() 
  then endMOS.enclosingInteraction.oclAsType(InteractionFragment)->asSet()
  else endMOS.enclosingOperand.oclAsType(InteractionFragment)->asSet()
  endif
endif")
    !ordered op InteractionFragment[*] enclosingFragment();

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="messageEnd")
    @GenModel(documentation="References a Message.")
    !ordered ref Message message;
  }

  @GenModel(documentation="A Message defines a particular communication between Lifelines of an Interaction.
receiveEvent.oclIsKindOf(MessageOccurrenceSpecification)
implies
let f :  Lifeline = sendEvent->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first().covered in
f = receiveEvent->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first().covered  implies
f.events->indexOf(sendEvent.oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first() ) < 
f.events->indexOf(receiveEvent.oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first() )
sendEvent->notEmpty() and receiveEvent->notEmpty() implies
let sendEnclosingFrag : Set(InteractionFragment) = 
sendEvent->asOrderedSet()->first().enclosingFragment()
in 
let receiveEnclosingFrag : Set(InteractionFragment) = 
receiveEvent->asOrderedSet()->first().enclosingFragment()
in  sendEnclosingFrag = receiveEnclosingFrag
(messageSort = MessageSort::asynchSignal ) and signature.oclIsKindOf(Signal) implies
   let signalAttributes : OrderedSet(Property) = signature.oclAsType(Signal).inheritedMember()->
             select(n:NamedElement | n.oclIsTypeOf(Property))->collect(oclAsType(Property))->asOrderedSet()
   in signalAttributes->size() = self.argument->size()
   and self.argument->forAll( o: ValueSpecification |
          not (o.oclIsKindOf(Expression)
          and o.oclAsType(Expression).symbol->size()=0
          and o.oclAsType(Expression).operand->isEmpty() ) implies
              let p : Property = signalAttributes->at(self.argument->indexOf(o))
              in o.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))

signature->notEmpty() implies 
((signature.oclIsKindOf(Operation) and 
(messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall or messageSort = MessageSort::reply) 
) or (signature.oclIsKindOf(Signal)  and messageSort = MessageSort::asynchSignal )
 ) and name = signature.name
(messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall) and signature.oclIsKindOf(Operation)  implies 
 let requestParms : OrderedSet(Parameter) = signature.oclAsType(Operation).ownedParameter->
 select(direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::_'in'  )
in requestParms->size() = self.argument->size() and
self.argument->forAll( o: ValueSpecification | 
not (o.oclIsKindOf(Expression) and o.oclAsType(Expression).symbol->size()=0 and o.oclAsType(Expression).operand->isEmpty() ) implies 
let p : Parameter = requestParms->at(self.argument->indexOf(o)) in
o.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier))
)
(messageSort = MessageSort::reply) and signature.oclIsKindOf(Operation) implies 
 let replyParms : OrderedSet(Parameter) = signature.oclAsType(Operation).ownedParameter->
select(direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::out or direction = ParameterDirectionKind::return)
in replyParms->size() = self.argument->size() and
self.argument->forAll( o: ValueSpecification | o.oclIsKindOf(Expression) and let e : Expression = o.oclAsType(Expression) in
e.operand->notEmpty()  implies 
let p : Parameter = replyParms->at(self.argument->indexOf(o)) in
e.operand->asSequence()->first().type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier))
)")
  @Ecore(constraints="sending_receiving_message_event arguments cannot_cross_boundaries signature_is_signal occurrence_specifications signature_refer_to signature_is_operation_request signature_is_operation_reply")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(sending_receiving_message_event="receiveEvent.oclIsKindOf(MessageOccurrenceSpecification)
implies
let f :  Lifeline = sendEvent->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first().covered in
f = receiveEvent->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first().covered  implies
f.events->indexOf(sendEvent.oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first() ) < 
f.events->indexOf(receiveEvent.oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first() )", cannot_cross_boundaries="sendEvent->notEmpty() and receiveEvent->notEmpty() implies
let sendEnclosingFrag : Set(InteractionFragment) = 
sendEvent->asOrderedSet()->first().enclosingFragment()
in 
let receiveEnclosingFrag : Set(InteractionFragment) = 
receiveEvent->asOrderedSet()->first().enclosingFragment()
in  sendEnclosingFrag = receiveEnclosingFrag", signature_is_signal="(messageSort = MessageSort::asynchSignal ) and signature.oclIsKindOf(Signal) implies
   let signalAttributes : OrderedSet(Property) = signature.oclAsType(Signal).inheritedMember()->
             select(n:NamedElement | n.oclIsTypeOf(Property))->collect(oclAsType(Property))->asOrderedSet()
   in signalAttributes->size() = self.argument->size()
   and self.argument->forAll( o: ValueSpecification |
          not (o.oclIsKindOf(Expression)
          and o.oclAsType(Expression).symbol->size()=0
          and o.oclAsType(Expression).operand->isEmpty() ) implies
              let p : Property = signalAttributes->at(self.argument->indexOf(o))
              in o.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))
", signature_refer_to="signature->notEmpty() implies 
((signature.oclIsKindOf(Operation) and 
(messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall or messageSort = MessageSort::reply) 
) or (signature.oclIsKindOf(Signal)  and messageSort = MessageSort::asynchSignal )
 ) and name = signature.name", signature_is_operation_request="(messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall) and signature.oclIsKindOf(Operation)  implies 
 let requestParms : OrderedSet(Parameter) = signature.oclAsType(Operation).ownedParameter->
 select(direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::_'in'  )
in requestParms->size() = self.argument->size() and
self.argument->forAll( o: ValueSpecification | 
not (o.oclIsKindOf(Expression) and o.oclAsType(Expression).symbol->size()=0 and o.oclAsType(Expression).operand->isEmpty() ) implies 
let p : Parameter = requestParms->at(self.argument->indexOf(o)) in
o.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier))
)", signature_is_operation_reply="(messageSort = MessageSort::reply) and signature.oclIsKindOf(Operation) implies 
 let replyParms : OrderedSet(Parameter) = signature.oclAsType(Operation).ownedParameter->
select(direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::out or direction = ParameterDirectionKind::return)
in replyParms->size() = self.argument->size() and
self.argument->forAll( o: ValueSpecification | o.oclIsKindOf(Expression) and let e : Expression = o.oclAsType(Expression) in
e.operand->notEmpty()  implies 
let p : Parameter = replyParms->at(self.argument->indexOf(o)) in
e.operand->asSequence()->first().type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier))
)")
  @duplicates
  class Message extends commonStructure.NamedElement {

    @GenModel(documentation="This query returns the MessageKind value for this Message.")
    @"http://www.eclipse.org/emf/2002/Ecore/OCL"(body="messageKind")
    !ordered op MessageKind[1] messageKind();

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="message")
    @GenModel(documentation="The arguments of the Message.")
    @subsets
    val values.ValueSpecification[*] argument;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="message")
    @GenModel(documentation="The Connector on which this Message is sent.")
    !ordered ref structuredClassifiers.Connector connector;

    @GenModel(documentation="The enclosing Interaction owning the Message.")
    @subsets
    !ordered ref Interaction[1]#message interaction;

    @GenModel(documentation="The derived kind of the Message (complete, lost, found, or unknown).")
    !ordered readonly volatile transient derived attr MessageKind[1] messageKind;

    @GenModel(documentation="The sort of communication reflected by the Message.")
    !ordered attr MessageSort[1] messageSort = "synchCall";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="endMessage")
    @GenModel(documentation="References the Receiving of the Message.")
    !ordered ref MessageEnd receiveEvent;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="endMessage")
    @GenModel(documentation="References the Sending of the Message.")
    !ordered ref MessageEnd sendEvent;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="message")
    @GenModel(documentation="The signature of the Message is the specification of its content. It refers either an Operation or a Signal.")
    !ordered ref commonStructure.NamedElement signature;
  }

  @GenModel(documentation="An Interaction is a unit of Behavior that focuses on the observable exchange of information between connectable elements.
enclosingInteraction->isEmpty()")
  @Ecore(constraints="not_contained")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(not_contained="enclosingInteraction->isEmpty()")
  class Interaction extends commonBehavior.Behavior, InteractionFragment {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="interaction")
    @GenModel(documentation="Actions owned by the Interaction.")
    @subsets
    !ordered val actions.Action[*] action;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="interaction")
    @GenModel(documentation="Specifies the gates that form the message interface between this Interaction and any InteractionUses which reference it.")
    @subsets
    !ordered val Gate[*] formalGate;

    @GenModel(documentation="The ordered set of fragments in the Interaction.")
    @subsets
    val InteractionFragment[*]#enclosingInteraction fragment;

    @GenModel(documentation="Specifies the participants in this Interaction.")
    @subsets
    !ordered val Lifeline[*]#interaction lifeline;

    @GenModel(documentation="The Messages contained in this Interaction.")
    @subsets
    !ordered val Message[*]#interaction message;
  }

  @GenModel(documentation="This is an enumerated type that identifies the type of Message.")
  enum MessageKind {

    @GenModel(documentation="sendEvent and receiveEvent are present")
    complete = 0;

    @GenModel(documentation="sendEvent present and receiveEvent absent")
    lost = 1;

    @GenModel(documentation="sendEvent absent and receiveEvent present")
    found = 2;

    @GenModel(documentation="sendEvent and receiveEvent absent (should not appear)")
    unknown = 3;
  }

  @GenModel(documentation="This is an enumerated type that identifies the type of communication action that was used to generate the Message.")
  enum MessageSort {

    @GenModel(documentation="The message was generated by a synchronous call to an operation.")
    synchCall = 0;

    @GenModel(documentation="The message was generated by an asynchronous call to an operation; i.e., a CallAction with isSynchronous = false.")
    asynchCall = 1;

    @GenModel(documentation="The message was generated by an asynchronous send action.")
    asynchSignal = 2;

    @GenModel(documentation="The message designating the creation of another lifeline object.")
    createMessage = 3;

    @GenModel(documentation="The message designating the termination of another lifeline.")
    deleteMessage = 4;

    @GenModel(documentation="The message is a reply message to an operation call.")
    reply = 5;
  }

  @GenModel(documentation="An InteractionOperand is contained in a CombinedFragment. An InteractionOperand represents one operand of the expression given by the enclosing CombinedFragment.")
  @Ecore(constraints="guard_contain_references guard_directly_prior")
  class InteractionOperand extends commonStructure.Namespace, InteractionFragment {

    @GenModel(documentation="The fragments of the operand.")
    @subsets
    val InteractionFragment[*]#enclosingOperand fragment;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="interactionOperand")
    @GenModel(documentation="Constraint of the operand.")
    @subsets
    !ordered val InteractionConstraint guard;
  }

  @GenModel(documentation="An InteractionConstraint is a Boolean expression that guards an operand in a CombinedFragment.
maxint->notEmpty() or minint->notEmpty() implies
interactionOperand.combinedFragment.interactionOperator =
InteractionOperatorKind::loop
minint->notEmpty() implies 
minint->asSequence()->first().integerValue() >= 0
maxint->notEmpty() implies 
maxint->asSequence()->first().integerValue() > 0
maxint->notEmpty() implies (minint->notEmpty() and 
maxint->asSequence()->first().integerValue() >=
minint->asSequence()->first().integerValue() )")
  @Ecore(constraints="minint_maxint minint_non_negative maxint_positive dynamic_variables global_data maxint_greater_equal_minint")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(minint_maxint="maxint->notEmpty() or minint->notEmpty() implies
interactionOperand.combinedFragment.interactionOperator =
InteractionOperatorKind::loop", minint_non_negative="minint->notEmpty() implies 
minint->asSequence()->first().integerValue() >= 0", maxint_positive="maxint->notEmpty() implies 
maxint->asSequence()->first().integerValue() > 0", maxint_greater_equal_minint="maxint->notEmpty() implies (minint->notEmpty() and 
maxint->asSequence()->first().integerValue() >=
minint->asSequence()->first().integerValue() )")
  class InteractionConstraint extends commonStructure.Constraint {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="interactionConstraint")
    @GenModel(documentation="The maximum number of iterations of a loop")
    @subsets
    !ordered val values.ValueSpecification maxint;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="interactionConstraint")
    @GenModel(documentation="The minimum number of iterations of a loop")
    @subsets
    !ordered val values.ValueSpecification minint;
  }

  @GenModel(documentation="A GeneralOrdering represents a binary relation between two OccurrenceSpecifications, to describe that one OccurrenceSpecification must occur before the other in a valid trace. This mechanism provides the ability to define partial orders of OccurrenceSpecifications that may otherwise not have a specified order.
after->closure(toAfter.after)->excludes(before)")
  @Ecore(constraints="irreflexive_transitive_closure")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(irreflexive_transitive_closure="after->closure(toAfter.after)->excludes(before)")
  class GeneralOrdering extends commonStructure.NamedElement {

    @GenModel(documentation="The OccurrenceSpecification referenced comes after the OccurrenceSpecification referenced by before.")
    !ordered ref OccurrenceSpecification[1]#toBefore after;

    @GenModel(documentation="The OccurrenceSpecification referenced comes before the OccurrenceSpecification referenced by after.")
    !ordered ref OccurrenceSpecification[1]#toAfter before;
  }

  @GenModel(documentation="An OccurrenceSpecification is the basic semantic unit of Interactions. The sequences of occurrences specified by them are the meanings of Interactions.")
  @duplicates
  class OccurrenceSpecification extends InteractionFragment {

    @GenModel(documentation="References the GeneralOrderings that specify EventOcurrences that must occur after this OccurrenceSpecification.")
    !ordered ref GeneralOrdering[*]#before toAfter;

    @GenModel(documentation="References the GeneralOrderings that specify EventOcurrences that must occur before this OccurrenceSpecification.")
    !ordered ref GeneralOrdering[*]#after toBefore;
  }

  @GenModel(documentation="A BehaviorExecutionSpecification is a kind of ExecutionSpecification representing the execution of a Behavior.")
  class BehaviorExecutionSpecification extends ExecutionSpecification {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="behaviorExecutionSpecification")
    @GenModel(documentation="Behavior whose execution is occurring.")
    !ordered ref commonBehavior.Behavior behavior;
  }

  @GenModel(documentation="A CombinedFragment defines an expression of InteractionFragments. A CombinedFragment is defined by an interaction operator and corresponding InteractionOperands. Through the use of CombinedFragments the user will be able to describe a number of traces in a compact and concise manner.
interactionOperator=InteractionOperatorKind::break  implies   
enclosingInteraction.oclAsType(InteractionFragment)->asSet()->union(
   enclosingOperand.oclAsType(InteractionFragment)->asSet()).covered->asSet() = self.covered->asSet()
((interactionOperator = InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)) implies oclIsKindOf(ConsiderIgnoreFragment)
(interactionOperator =  InteractionOperatorKind::opt or interactionOperator = InteractionOperatorKind::loop or
interactionOperator = InteractionOperatorKind::break or interactionOperator = InteractionOperatorKind::assert or
interactionOperator = InteractionOperatorKind::neg)
implies operand->size()=1")
  @Ecore(constraints="break consider_and_ignore opt_loop_break_neg")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(break="interactionOperator=InteractionOperatorKind::break  implies   
enclosingInteraction.oclAsType(InteractionFragment)->asSet()->union(
   enclosingOperand.oclAsType(InteractionFragment)->asSet()).covered->asSet() = self.covered->asSet()", consider_and_ignore="((interactionOperator = InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)) implies oclIsKindOf(ConsiderIgnoreFragment)", opt_loop_break_neg="(interactionOperator =  InteractionOperatorKind::opt or interactionOperator = InteractionOperatorKind::loop or
interactionOperator = InteractionOperatorKind::break or interactionOperator = InteractionOperatorKind::assert or
interactionOperator = InteractionOperatorKind::neg)
implies operand->size()=1")
  class CombinedFragment extends InteractionFragment {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="combinedFragment")
    @GenModel(documentation="Specifies the gates that form the interface between this CombinedFragment and its surroundings")
    @subsets
    !ordered val Gate[*] cfragmentGate;

    @GenModel(documentation="Specifies the operation which defines the semantics of this combination of InteractionFragments.")
    !ordered attr InteractionOperatorKind[1] interactionOperator = "seq";

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="combinedFragment")
    @GenModel(documentation="The set of operands of the combined fragment.")
    @subsets
    val InteractionOperand[+] operand;
  }

  @GenModel(documentation="InteractionOperatorKind is an enumeration designating the different kinds of operators of CombinedFragments. The InteractionOperand defines the type of operator of a CombinedFragment.")
  enum InteractionOperatorKind {

    @GenModel(documentation="The InteractionOperatorKind seq designates that the CombinedFragment represents a weak sequencing between the behaviors of the operands.")
    seq = 0;

    @GenModel(documentation="The InteractionOperatorKind alt designates that the CombinedFragment represents a choice of behavior. At most one of the operands will be chosen. The chosen operand must have an explicit or implicit guard expression that evaluates to true at this point in the interaction. An implicit true guard is implied if the operand has no guard.")
    alt = 1;

    @GenModel(documentation="The InteractionOperatorKind opt designates that the CombinedFragment represents a choice of behavior where either the (sole) operand happens or nothing happens. An option is semantically equivalent to an alternative CombinedFragment where there is one operand with non-empty content and the second operand is empty.")
    opt = 2;

    @GenModel(documentation="The InteractionOperatorKind break designates that the CombinedFragment represents a breaking scenario in the sense that the operand is a scenario that is performed instead of the remainder of the enclosing InteractionFragment. A break operator with a guard is chosen when the guard is true and the rest of the enclosing Interaction Fragment is ignored. When the guard of the break operand is false, the break operand is ignored and the rest of the enclosing InteractionFragment is chosen. The choice between a break operand without a guard and the rest of the enclosing InteractionFragment is done non-deterministically.")
    break = 3;

    @GenModel(documentation="The InteractionOperatorKind par designates that the CombinedFragment represents a parallel merge between the behaviors of the operands. The OccurrenceSpecifications of the different operands can be interleaved in any way as long as the ordering imposed by each operand as such is preserved.")
    par = 4;

    @GenModel(documentation="The InteractionOperatorKind strict designates that the CombinedFragment represents a strict sequencing between the behaviors of the operands. The semantics of strict sequencing defines a strict ordering of the operands on the first level within the CombinedFragment with interactionOperator strict. Therefore OccurrenceSpecifications within contained CombinedFragment will not directly be compared with other OccurrenceSpecifications of the enclosing CombinedFragment.")
    strict = 5;

    @GenModel(documentation="The InteractionOperatorKind loop designates that the CombinedFragment represents a loop. The loop operand will be repeated a number of times.")
    loop = 6;

    @GenModel(documentation="The InteractionOperatorKind critical designates that the CombinedFragment represents a critical region. A critical region means that the traces of the region cannot be interleaved by other OccurrenceSpecifications (on those Lifelines covered by the region). This means that the region is treated atomically by the enclosing fragment when determining the set of valid traces. Even though enclosing CombinedFragments may imply that some OccurrenceSpecifications may interleave into the region, such as with par-operator, this is prevented by defining a region.")
    critical = 7;

    @GenModel(documentation="The InteractionOperatorKind neg designates that the CombinedFragment represents traces that are defined to be invalid.")
    neg = 8;

    @GenModel(documentation="The InteractionOperatorKind assert designates that the CombinedFragment represents an assertion. The sequences of the operand of the assertion are the only valid continuations. All other continuations result in an invalid trace.")
    assert = 9;

    @GenModel(documentation="The InteractionOperatorKind ignore designates that there are some message types that are not shown within this combined fragment. These message types can be considered insignificant and are implicitly ignored if they appear in a corresponding execution. Alternatively, one can understand ignore to mean that the message types that are ignored can appear anywhere in the traces.")
    ignore = 10;

    @GenModel(documentation="The InteractionOperatorKind consider designates which messages should be considered within this combined fragment. This is equivalent to defining every other message to be ignored.")
    consider = 11;
  }

  @GenModel(documentation="A ConsiderIgnoreFragment is a kind of CombinedFragment that is used for the consider and ignore cases, which require lists of pertinent Messages to be specified.
(interactionOperator =  InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)
message->forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Signal))")
  @Ecore(constraints="consider_or_ignore type")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(consider_or_ignore="(interactionOperator =  InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)", type="message->forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Signal))")
  class ConsiderIgnoreFragment extends CombinedFragment {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="considerIgnoreFragment")
    @GenModel(documentation="The set of messages that apply to this fragment.")
    !ordered ref commonStructure.NamedElement[*] message;
  }

  @GenModel(documentation="A Continuation is a syntactic way to define continuations of different branches of an alternative CombinedFragment. Continuations are intuitively similar to labels representing intermediate points in a flow of control.
 enclosingOperand->notEmpty() and 
 let peerFragments : OrderedSet(InteractionFragment) =  enclosingOperand.fragment in 
   ( peerFragments->notEmpty() and 
   ((peerFragments->first() = self) or  (peerFragments->last() = self)))
enclosingOperand.combinedFragment->notEmpty() and
let parentInteraction : Set(Interaction) = 
enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->
collect(enclosingInteraction).oclAsType(Interaction)->asSet()
in 
(parentInteraction->size() = 1) 
and let peerInteractions : Set(Interaction) =
 (parentInteraction->union(parentInteraction->collect(_'context')->collect(behavior)->
 select(oclIsKindOf(Interaction)).oclAsType(Interaction)->asSet())->asSet()) in
 (peerInteractions->notEmpty()) and 
  let combinedFragments1 : Set(CombinedFragment) = peerInteractions.fragment->
 select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)->asSet() in
   combinedFragments1->notEmpty() and  combinedFragments1->closure(operand.fragment->
   select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment))->asSet().operand.fragment->
   select(oclIsKindOf(Continuation)).oclAsType(Continuation)->asSet()->
   forAll(c : Continuation |  (c.name = self.name) implies 
  (c.covered->asSet()->forAll(cl : Lifeline | --  cl must be common to one lifeline covered by self
  self.covered->asSet()->
  select(represents = cl.represents and selector = cl.selector)->asSet()->size()=1))
   and
 (self.covered->asSet()->forAll(cl : Lifeline | --  cl must be common to one lifeline covered by c
 c.covered->asSet()->
  select(represents = cl.represents and selector = cl.selector)->asSet()->size()=1))
  )
enclosingOperand->notEmpty() and
  let operandLifelines : Set(Lifeline) =  enclosingOperand.covered in 
    (operandLifelines->notEmpty() and 
    operandLifelines->forAll(ol :Lifeline |self.covered->includes(ol)))")
  @Ecore(constraints="first_or_last_interaction_fragment same_name global")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(first_or_last_interaction_fragment=" enclosingOperand->notEmpty() and 
 let peerFragments : OrderedSet(InteractionFragment) =  enclosingOperand.fragment in 
   ( peerFragments->notEmpty() and 
   ((peerFragments->first() = self) or  (peerFragments->last() = self)))", same_name="enclosingOperand.combinedFragment->notEmpty() and
let parentInteraction : Set(Interaction) = 
enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->
collect(enclosingInteraction).oclAsType(Interaction)->asSet()
in 
(parentInteraction->size() = 1) 
and let peerInteractions : Set(Interaction) =
 (parentInteraction->union(parentInteraction->collect(_'context')->collect(behavior)->
 select(oclIsKindOf(Interaction)).oclAsType(Interaction)->asSet())->asSet()) in
 (peerInteractions->notEmpty()) and 
  let combinedFragments1 : Set(CombinedFragment) = peerInteractions.fragment->
 select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)->asSet() in
   combinedFragments1->notEmpty() and  combinedFragments1->closure(operand.fragment->
   select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment))->asSet().operand.fragment->
   select(oclIsKindOf(Continuation)).oclAsType(Continuation)->asSet()->
   forAll(c : Continuation |  (c.name = self.name) implies 
  (c.covered->asSet()->forAll(cl : Lifeline | --  cl must be common to one lifeline covered by self
  self.covered->asSet()->
  select(represents = cl.represents and selector = cl.selector)->asSet()->size()=1))
   and
 (self.covered->asSet()->forAll(cl : Lifeline | --  cl must be common to one lifeline covered by c
 c.covered->asSet()->
  select(represents = cl.represents and selector = cl.selector)->asSet()->size()=1))
  )", global="enclosingOperand->notEmpty() and
  let operandLifelines : Set(Lifeline) =  enclosingOperand.covered in 
    (operandLifelines->notEmpty() and 
    operandLifelines->forAll(ol :Lifeline |self.covered->includes(ol)))")
  class Continuation extends InteractionFragment {

    @GenModel(documentation="True: when the Continuation is at the end of the enclosing InteractionFragment and False when it is in the beginning.")
    !ordered attr types.Boolean[1] setting = "true";
  }

  @GenModel(documentation="A DestructionOccurenceSpecification models the destruction of an object.
let o : InteractionOperand = enclosingOperand in o->notEmpty() and 
let peerEvents : OrderedSet(OccurrenceSpecification) = covered.events->select(enclosingOperand = o)
in peerEvents->last() = self")
  @Ecore(constraints="no_occurrence_specifications_below")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(no_occurrence_specifications_below="let o : InteractionOperand = enclosingOperand in o->notEmpty() and 
let peerEvents : OrderedSet(OccurrenceSpecification) = covered.events->select(enclosingOperand = o)
in peerEvents->last() = self")
  class DestructionOccurrenceSpecification extends MessageOccurrenceSpecification {
  }

  @GenModel(documentation="A MessageOccurrenceSpecification specifies the occurrence of Message events, such as sending and receiving of Signals or invoking or receiving of Operation calls. A MessageOccurrenceSpecification is a kind of MessageEnd. Messages are generated either by synchronous Operation calls or asynchronous Signal sends. They are received by the execution of corresponding AcceptEventActions.")
  class MessageOccurrenceSpecification extends OccurrenceSpecification, MessageEnd {
  }

  @GenModel(documentation="An ExecutionOccurrenceSpecification represents moments in time at which Actions or Behaviors start or finish.")
  class ExecutionOccurrenceSpecification extends OccurrenceSpecification {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="executionOccurrenceSpecification")
    @GenModel(documentation="References the execution specification describing the execution that is started or finished at this execution event.")
    !ordered ref ExecutionSpecification[1] execution;
  }

  @GenModel(documentation="A StateInvariant is a runtime constraint on the participants of the Interaction. It may be used to specify a variety of different kinds of Constraints, such as values of Attributes or Variables, internal or external States, and so on. A StateInvariant is an InteractionFragment and it is placed on a Lifeline.")
  @duplicates
  class StateInvariant extends InteractionFragment {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="stateInvariant")
    @GenModel(documentation="A Constraint that should hold at runtime for this StateInvariant.")
    @subsets
    !ordered val commonStructure.Constraint[1] invariant;
  }

}

@"http://www.eclipse.org/uml2/2.0.0/UML"(originalName="InformationFlows")
@Ecore(validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL")
@namespace(uri="http:///uml/informationFlows.ecore", prefix="uml.informationFlows")
package informationFlows {
  @GenModel(documentation="InformationFlows describe circulation of information through a system in a general manner. They do not specify the nature of the information, mechanisms by which it is conveyed, sequences of exchange or any control conditions. During more detailed modeling, representation and realization links may be added to specify which model elements implement an InformationFlow and to show how information is conveyed.  InformationFlows require some kind of “information channel” for unidirectional transmission of information items from sources to targets.  They specify the information channel’s realizations, if any, and identify the information that flows along them.  Information moving along the information channel may be represented by abstract InformationItems and by concrete Classifiers.
(self.informationSource->forAll( sis |
  oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or 
  oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or 
  oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or 
  (oclIsKindOf(InstanceSpecification) and not sis.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship))))) 

and

(self.informationTarget->forAll( sit | 
  oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or 
  oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or 
  oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or 
(oclIsKindOf(InstanceSpecification) and not sit.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship)))))
self.conveyed->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface)
  or oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component))")
  @Ecore(constraints="must_conform sources_and_targets_kind convey_classifiers")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(sources_and_targets_kind="(self.informationSource->forAll( sis |
  oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or 
  oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or 
  oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or 
  (oclIsKindOf(InstanceSpecification) and not sis.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship))))) 

and

(self.informationTarget->forAll( sit | 
  oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or 
  oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or 
  oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or 
(oclIsKindOf(InstanceSpecification) and not sit.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship)))))", convey_classifiers="self.conveyed->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface)
  or oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component))")
  class InformationFlow extends commonStructure.PackageableElement, commonStructure.DirectedRelationship {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="conveyingFlow")
    @GenModel(documentation="Specifies the information items that may circulate on this information flow.")
    !ordered ref classification.Classifier[+] conveyed;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="informationFlow")
    @GenModel(documentation="Defines from which source the conveyed InformationItems are initiated.")
    @subsets
    !ordered ref commonStructure.NamedElement[+] informationSource;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="informationFlow")
    @GenModel(documentation="Defines to which target the conveyed InformationItems are directed.")
    @subsets
    !ordered ref commonStructure.NamedElement[+] informationTarget;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="abstraction")
    @GenModel(documentation="Determines which Relationship will realize the specified flow.")
    !ordered ref commonStructure.Relationship[*] realization;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="informationFlow")
    @GenModel(documentation="Determines which ActivityEdges will realize the specified flow.")
    !ordered ref activities.ActivityEdge[*] realizingActivityEdge;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="informationFlow")
    @GenModel(documentation="Determines which Connectors will realize the specified flow.")
    !ordered ref structuredClassifiers.Connector[*] realizingConnector;

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="informationFlow")
    @GenModel(documentation="Determines which Messages will realize the specified flow.")
    !ordered ref interactions.Message[*] realizingMessage;
  }

  @GenModel(documentation="InformationItems represent many kinds of information that can flow from sources to targets in very abstract ways.  They represent the kinds of information that may move within a system, but do not elaborate details of the transferred information.  Details of transferred information are the province of other Classifiers that may ultimately define InformationItems.  Consequently, InformationItems cannot be instantiated and do not themselves have features, generalizations, or associations. An important use of InformationItems is to represent information during early design stages, possibly before the detailed modeling decisions that will ultimately define them have been made. Another purpose of InformationItems is to abstract portions of complex models in less precise, but perhaps more general and communicable, ways. 
(self.represented->select(oclIsKindOf(InformationItem))->forAll(p |
  p.conveyingFlow.source->forAll(q | self.conveyingFlow.source->includes(q)) and
    p.conveyingFlow.target->forAll(q | self.conveyingFlow.target->includes(q)))) and
      (self.represented->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface) or
        oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component)))
self.generalization->isEmpty() and self.feature->isEmpty()
isAbstract")
  @Ecore(constraints="sources_and_targets has_no not_instantiable")
  @"http://www.eclipse.org/emf/2002/Ecore/OCL"(sources_and_targets="(self.represented->select(oclIsKindOf(InformationItem))->forAll(p |
  p.conveyingFlow.source->forAll(q | self.conveyingFlow.source->includes(q)) and
    p.conveyingFlow.target->forAll(q | self.conveyingFlow.target->includes(q)))) and
      (self.represented->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface) or
        oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component)))", has_no="self.generalization->isEmpty() and self.feature->isEmpty()", not_instantiable="isAbstract")
  class InformationItem extends classification.Classifier {

    @"http://schema.omg.org/spec/MOF/2.0/emof.xml#Property.oppositeRoleName"(body="representation")
    @GenModel(documentation="Determines the classifiers that will specify the structure and nature of the information. An information item represents all its represented classifiers.")
    !ordered ref classification.Classifier[*] represented;
  }

}

