/*
 * generated by Xtext 2.10.0
 */
package org.smalluml.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.smalluml.services.SmallUmlGrammarAccess;

@SuppressWarnings("all")
public class SmallUmlSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SmallUmlGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Class_BEGINTerminalRuleCall_5_q;
	protected AbstractElementAlias match_Class_ENDTerminalRuleCall_7_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SmallUmlGrammarAccess) access;
		match_Class_BEGINTerminalRuleCall_5_q = new TokenAlias(false, true, grammarAccess.getClassAccess().getBEGINTerminalRuleCall_5());
		match_Class_ENDTerminalRuleCall_7_q = new TokenAlias(false, true, grammarAccess.getClassAccess().getENDTerminalRuleCall_7());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBEGINRule())
			return getBEGINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDRule())
			return getENDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getBEGINToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getENDToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Class_BEGINTerminalRuleCall_5_q.equals(syntax))
				emit_Class_BEGINTerminalRuleCall_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Class_ENDTerminalRuleCall_7_q.equals(syntax))
				emit_Class_ENDTerminalRuleCall_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     BEGIN?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=EString '{' (ambiguity) END? '}' (rule end)
	 *     name=EString '{' (ambiguity) attribute+=Attribute
	 *     name=EString '{' (ambiguity) method+=Method
	 *     super=[Class|EString] '{' (ambiguity) END? '}' (rule end)
	 *     super=[Class|EString] '{' (ambiguity) attribute+=Attribute
	 *     super=[Class|EString] '{' (ambiguity) method+=Method
	 */
	protected void emit_Class_BEGINTerminalRuleCall_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     END?
	 *
	 * This ambiguous syntax occurs at:
	 *     attribute+=Attribute (ambiguity) '}' (rule end)
	 *     method+=Method (ambiguity) '}' (rule end)
	 *     name=EString '{' BEGIN? (ambiguity) '}' (rule end)
	 *     super=[Class|EString] '{' BEGIN? (ambiguity) '}' (rule end)
	 */
	protected void emit_Class_ENDTerminalRuleCall_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
