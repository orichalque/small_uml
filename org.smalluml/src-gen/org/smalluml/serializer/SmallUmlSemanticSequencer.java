/*
 * generated by Xtext 2.10.0
 */
package org.smalluml.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.smalluml.services.SmallUmlGrammarAccess;
import smalluml.Attribute;
import smalluml.Bool;
import smalluml.Composition;
import smalluml.Enumeration;
import smalluml.Method;
import smalluml.Real;
import smalluml.Reference;
import smalluml.Role;
import smalluml.SmallumlPackage;
import smalluml.UnlimitedNatural;

@SuppressWarnings("all")
public class SmallUmlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SmallUmlGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SmallumlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SmallumlPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case SmallumlPackage.BOOL:
				sequence_Bool(context, (Bool) semanticObject); 
				return; 
			case SmallumlPackage.CLASS:
				sequence_Class(context, (smalluml.Class) semanticObject); 
				return; 
			case SmallumlPackage.COMPOSITION:
				sequence_Composition(context, (Composition) semanticObject); 
				return; 
			case SmallumlPackage.ENUMERATION:
				sequence_Enumeration(context, (Enumeration) semanticObject); 
				return; 
			case SmallumlPackage.INTEGER:
				sequence_Integer(context, (smalluml.Integer) semanticObject); 
				return; 
			case SmallumlPackage.METHOD:
				sequence_Method(context, (Method) semanticObject); 
				return; 
			case SmallumlPackage.PACKAGE:
				sequence_Package(context, (smalluml.Package) semanticObject); 
				return; 
			case SmallumlPackage.PARAMETER:
				sequence_Parameter(context, (smalluml.Parameter) semanticObject); 
				return; 
			case SmallumlPackage.REAL:
				sequence_Real(context, (Real) semanticObject); 
				return; 
			case SmallumlPackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			case SmallumlPackage.ROLE:
				sequence_Role(context, (Role) semanticObject); 
				return; 
			case SmallumlPackage.STRING:
				sequence_String0(context, (smalluml.String) semanticObject); 
				return; 
			case SmallumlPackage.UNLIMITED_NATURAL:
				sequence_UnlimitedNatural(context, (UnlimitedNatural) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     NamedElement returns Attribute
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=EString type=Type)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.ATTRIBUTE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.ATTRIBUTE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAttributeAccess().getTypeTypeParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Bool
	 *     Bool returns Bool
	 *
	 * Constraint:
	 *     {Bool}
	 */
	protected void sequence_Bool(ISerializationContext context, Bool semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns Class
	 *     Class returns Class
	 *
	 * Constraint:
	 *     (name=EString super=[Class|EString]? (method+=Method | attribute+=Attribute)*)
	 */
	protected void sequence_Class(ISerializationContext context, smalluml.Class semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns Composition
	 *     Composition returns Composition
	 *
	 * Constraint:
	 *     (name=EString? source=Role target=Role)
	 */
	protected void sequence_Composition(ISerializationContext context, Composition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Enumeration
	 *     Enumeration returns Enumeration
	 *
	 * Constraint:
	 *     (value+=String0 value+=String0*)
	 */
	protected void sequence_Enumeration(ISerializationContext context, Enumeration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Integer
	 *     Integer returns Integer
	 *
	 * Constraint:
	 *     {Integer}
	 */
	protected void sequence_Integer(ISerializationContext context, smalluml.Integer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns Method
	 *     Method returns Method
	 *
	 * Constraint:
	 *     (name=EString (parameter+=Parameter parameter+=Parameter*)? returnType=Type?)
	 */
	protected void sequence_Method(ISerializationContext context, Method semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Package returns Package
	 *     NamedElement returns Package
	 *
	 * Constraint:
	 *     (name=EString member+=NamedElement*)
	 */
	protected void sequence_Package(ISerializationContext context, smalluml.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns Parameter
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=EString type=Type)
	 */
	protected void sequence_Parameter(ISerializationContext context, smalluml.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, SmallumlPackage.Literals.PARAMETER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmallumlPackage.Literals.PARAMETER__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Real
	 *     Real returns Real
	 *
	 * Constraint:
	 *     {Real}
	 */
	protected void sequence_Real(ISerializationContext context, Real semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns Reference
	 *     Reference returns Reference
	 *
	 * Constraint:
	 *     (name=EString? source=Role target=Role)
	 */
	protected void sequence_Reference(ISerializationContext context, Reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns Role
	 *     Role returns Role
	 *
	 * Constraint:
	 *     (name=EString? class=[Class|EString] (lowerBound=EInt upperBound=EInt)?)
	 */
	protected void sequence_Role(ISerializationContext context, Role semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns String
	 *     String0 returns String
	 *
	 * Constraint:
	 *     {String}
	 */
	protected void sequence_String0(ISerializationContext context, smalluml.String semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns UnlimitedNatural
	 *     UnlimitedNatural returns UnlimitedNatural
	 *
	 * Constraint:
	 *     {UnlimitedNatural}
	 */
	protected void sequence_UnlimitedNatural(ISerializationContext context, UnlimitedNatural semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
