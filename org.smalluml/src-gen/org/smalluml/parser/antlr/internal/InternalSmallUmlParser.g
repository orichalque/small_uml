/*
 * generated by Xtext 2.10.0
 */
parser grammar InternalSmallUmlParser;

options {
	tokenVocab=InternalSmallUmlLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package org.smalluml.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.smalluml.services.SmallUmlGrammarAccess;

}

@members {

 	private SmallUmlGrammarAccess grammarAccess;

    public InternalSmallUmlParser(TokenStream input, SmallUmlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Package";
   	}

   	@Override
   	protected SmallUmlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePackage
entryRulePackage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageRule()); }
	iv_rulePackage=rulePackage
	{ $current=$iv_rulePackage.current; }
	EOF;

// Rule Package
rulePackage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPackageAccess().getPackageAction_0(),
					$current);
			}
		)
		otherlv_1=Package
		{
			newLeafNode(otherlv_1, grammarAccess.getPackageAccess().getPackageKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.smalluml.SmallUml.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_BEGIN_3=RULE_BEGIN
		{
			newLeafNode(this_BEGIN_3, grammarAccess.getPackageAccess().getBEGINTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageAccess().getMemberNamedElementParserRuleCall_4_0());
				}
				lv_member_4_0=ruleNamedElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageRule());
					}
					add(
						$current,
						"member",
						lv_member_4_0,
						"org.smalluml.SmallUml.NamedElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_END_5=RULE_END
		{
			newLeafNode(this_END_5, grammarAccess.getPackageAccess().getENDTerminalRuleCall_5());
		}
	)
;

// Entry rule entryRuleNamedElement
entryRuleNamedElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNamedElementRule()); }
	iv_ruleNamedElement=ruleNamedElement
	{ $current=$iv_ruleNamedElement.current; }
	EOF;

// Rule NamedElement
ruleNamedElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNamedElementAccess().getClassParserRuleCall_0());
		}
		this_Class_0=ruleClass
		{
			$current = $this_Class_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNamedElementAccess().getAttributeParserRuleCall_1());
		}
		this_Attribute_1=ruleAttribute
		{
			$current = $this_Attribute_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNamedElementAccess().getMethodParserRuleCall_2());
		}
		this_Method_2=ruleMethod
		{
			$current = $this_Method_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNamedElementAccess().getParameterParserRuleCall_3());
		}
		this_Parameter_3=ruleParameter
		{
			$current = $this_Parameter_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNamedElementAccess().getRoleParserRuleCall_4());
		}
		this_Role_4=ruleRole
		{
			$current = $this_Role_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNamedElementAccess().getCompositionParserRuleCall_5());
		}
		this_Composition_5=ruleComposition
		{
			$current = $this_Composition_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNamedElementAccess().getReferenceParserRuleCall_6());
		}
		this_Reference_6=ruleReference
		{
			$current = $this_Reference_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNamedElementAccess().getPackageParserRuleCall_7());
		}
		this_Package_7=rulePackage
		{
			$current = $this_Package_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getString0ParserRuleCall_0());
		}
		this_String0_0=ruleString0
		{
			$current = $this_String0_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getIntegerParserRuleCall_1());
		}
		this_Integer_1=ruleInteger
		{
			$current = $this_Integer_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getBoolParserRuleCall_2());
		}
		this_Bool_2=ruleBool
		{
			$current = $this_Bool_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getRealParserRuleCall_3());
		}
		this_Real_3=ruleReal
		{
			$current = $this_Real_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getUnlimitedNaturalParserRuleCall_4());
		}
		this_UnlimitedNatural_4=ruleUnlimitedNatural
		{
			$current = $this_UnlimitedNatural_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getEnumerationParserRuleCall_5());
		}
		this_Enumeration_5=ruleEnumeration
		{
			$current = $this_Enumeration_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	iv_ruleClass=ruleClass
	{ $current=$iv_ruleClass.current; }
	EOF;

// Rule Class
ruleClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getClassAccess().getClassAction_0(),
					$current);
			}
		)
		otherlv_1=Class
		{
			newLeafNode(otherlv_1, grammarAccess.getClassAccess().getClassKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.smalluml.SmallUml.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=Extends
			{
				newLeafNode(otherlv_3, grammarAccess.getClassAccess().getExtendsKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getClassRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getClassAccess().getSuperClassCrossReference_3_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			this_BEGIN_5=RULE_BEGIN
			{
				newLeafNode(this_BEGIN_5, grammarAccess.getClassAccess().getBEGINTerminalRuleCall_4_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getClassAccess().getMethodMethodParserRuleCall_4_1_0_0());
						}
						lv_method_6_0=ruleMethod
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getClassRule());
							}
							add(
								$current,
								"method",
								lv_method_6_0,
								"org.smalluml.SmallUml.Method");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getClassAccess().getAttributeAttributeParserRuleCall_4_1_1_0());
						}
						lv_attribute_7_0=ruleAttribute
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getClassRule());
							}
							add(
								$current,
								"attribute",
								lv_attribute_7_0,
								"org.smalluml.SmallUml.Attribute");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			this_END_8=RULE_END
			{
				newLeafNode(this_END_8, grammarAccess.getClassAccess().getENDTerminalRuleCall_4_2());
			}
		)?
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=PlusSign
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributeAccess().getPlusSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.smalluml.SmallUml.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=Colon
		{
			newLeafNode(otherlv_2, grammarAccess.getAttributeAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getTypeTypeParserRuleCall_3_0());
				}
				lv_type_3_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"org.smalluml.SmallUml.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	iv_ruleMethod=ruleMethod
	{ $current=$iv_ruleMethod.current; }
	EOF;

// Rule Method
ruleMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMethodAccess().getMethodAction_0(),
					$current);
			}
		)
		otherlv_1=PlusSign
		{
			newLeafNode(otherlv_1, grammarAccess.getMethodAccess().getPlusSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.smalluml.SmallUml.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=LeftParenthesis
		{
			newLeafNode(otherlv_3, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodAccess().getParameterParameterParserRuleCall_4_0_0());
					}
					lv_parameter_4_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodRule());
						}
						add(
							$current,
							"parameter",
							lv_parameter_4_0,
							"org.smalluml.SmallUml.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=Comma
				{
					newLeafNode(otherlv_5, grammarAccess.getMethodAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMethodAccess().getParameterParameterParserRuleCall_4_1_1_0());
						}
						lv_parameter_6_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMethodRule());
							}
							add(
								$current,
								"parameter",
								lv_parameter_6_0,
								"org.smalluml.SmallUml.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_7=RightParenthesis
		{
			newLeafNode(otherlv_7, grammarAccess.getMethodAccess().getRightParenthesisKeyword_5());
		}
		(
			otherlv_8=Colon
			{
				newLeafNode(otherlv_8, grammarAccess.getMethodAccess().getColonKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodAccess().getReturnTypeTypeParserRuleCall_6_1_0());
					}
					lv_returnType_9_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodRule());
						}
						set(
							$current,
							"returnType",
							lv_returnType_9_0,
							"org.smalluml.SmallUml.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_0_0());
				}
				lv_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"org.smalluml.SmallUml.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=Colon
		{
			newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.smalluml.SmallUml.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleComposition
entryRuleComposition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompositionRule()); }
	iv_ruleComposition=ruleComposition
	{ $current=$iv_ruleComposition.current; }
	EOF;

// Rule Composition
ruleComposition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCompositionAccess().getNameEStringParserRuleCall_0_0_0());
					}
					lv_name_0_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompositionRule());
						}
						set(
							$current,
							"name",
							lv_name_0_0,
							"org.smalluml.SmallUml.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1=Colon
			{
				newLeafNode(otherlv_1, grammarAccess.getCompositionAccess().getColonKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositionAccess().getSourceRoleParserRuleCall_1_0());
				}
				lv_source_2_0=ruleRole
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositionRule());
					}
					set(
						$current,
						"source",
						lv_source_2_0,
						"org.smalluml.SmallUml.Role");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=LessThanSignGreaterThanSignHyphenMinusHyphenMinus
		{
			newLeafNode(otherlv_3, grammarAccess.getCompositionAccess().getLessThanSignGreaterThanSignHyphenMinusHyphenMinusKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositionAccess().getTargetRoleParserRuleCall_3_0());
				}
				lv_target_4_0=ruleRole
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositionRule());
					}
					set(
						$current,
						"target",
						lv_target_4_0,
						"org.smalluml.SmallUml.Role");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	iv_ruleReference=ruleReference
	{ $current=$iv_ruleReference.current; }
	EOF;

// Rule Reference
ruleReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getReferenceAccess().getNameEStringParserRuleCall_0_0_0());
					}
					lv_name_0_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReferenceRule());
						}
						set(
							$current,
							"name",
							lv_name_0_0,
							"org.smalluml.SmallUml.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1=Colon
			{
				newLeafNode(otherlv_1, grammarAccess.getReferenceAccess().getColonKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getReferenceAccess().getSourceRoleParserRuleCall_1_0());
				}
				lv_source_2_0=ruleRole
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReferenceRule());
					}
					set(
						$current,
						"source",
						lv_source_2_0,
						"org.smalluml.SmallUml.Role");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=HyphenMinusHyphenMinusHyphenMinusGreaterThanSign
		{
			newLeafNode(otherlv_3, grammarAccess.getReferenceAccess().getHyphenMinusHyphenMinusHyphenMinusGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReferenceAccess().getTargetRoleParserRuleCall_3_0());
				}
				lv_target_4_0=ruleRole
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReferenceRule());
					}
					set(
						$current,
						"target",
						lv_target_4_0,
						"org.smalluml.SmallUml.Role");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRole
entryRuleRole returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoleRule()); }
	iv_ruleRole=ruleRole
	{ $current=$iv_ruleRole.current; }
	EOF;

// Rule Role
ruleRole returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRoleAccess().getNameEStringParserRuleCall_0_0());
				}
				lv_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRoleRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"org.smalluml.SmallUml.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1=LeftParenthesis
		{
			newLeafNode(otherlv_1, grammarAccess.getRoleAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRoleRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRoleAccess().getClassClassCrossReference_2_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=Comma
			{
				newLeafNode(otherlv_3, grammarAccess.getRoleAccess().getCommaKeyword_3_0());
			}
			otherlv_4=LeftSquareBracket
			{
				newLeafNode(otherlv_4, grammarAccess.getRoleAccess().getLeftSquareBracketKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRoleAccess().getLowerBoundEIntParserRuleCall_3_2_0());
					}
					lv_lowerBound_5_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRoleRule());
						}
						set(
							$current,
							"lowerBound",
							lv_lowerBound_5_0,
							"org.smalluml.SmallUml.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=Comma
			{
				newLeafNode(otherlv_6, grammarAccess.getRoleAccess().getCommaKeyword_3_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRoleAccess().getUpperBoundEIntParserRuleCall_3_4_0());
					}
					lv_upperBound_7_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRoleRule());
						}
						set(
							$current,
							"upperBound",
							lv_upperBound_7_0,
							"org.smalluml.SmallUml.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8=RightSquareBracket
			{
				newLeafNode(otherlv_8, grammarAccess.getRoleAccess().getRightSquareBracketKeyword_3_5());
			}
		)?
		otherlv_9=RightParenthesis
		{
			newLeafNode(otherlv_9, grammarAccess.getRoleAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleString0
entryRuleString0 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getString0Rule()); }
	iv_ruleString0=ruleString0
	{ $current=$iv_ruleString0.current; }
	EOF;

// Rule String0
ruleString0 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getString0Access().getStringAction_0(),
					$current);
			}
		)
		otherlv_1=String
		{
			newLeafNode(otherlv_1, grammarAccess.getString0Access().getStringKeyword_1());
		}
	)
;

// Entry rule entryRuleInteger
entryRuleInteger returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerRule()); }
	iv_ruleInteger=ruleInteger
	{ $current=$iv_ruleInteger.current; }
	EOF;

// Rule Integer
ruleInteger returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntegerAccess().getIntegerAction_0(),
					$current);
			}
		)
		otherlv_1=Integer
		{
			newLeafNode(otherlv_1, grammarAccess.getIntegerAccess().getIntegerKeyword_1());
		}
	)
;

// Entry rule entryRuleBool
entryRuleBool returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolRule()); }
	iv_ruleBool=ruleBool
	{ $current=$iv_ruleBool.current; }
	EOF;

// Rule Bool
ruleBool returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBoolAccess().getBoolAction_0(),
					$current);
			}
		)
		otherlv_1=Bool
		{
			newLeafNode(otherlv_1, grammarAccess.getBoolAccess().getBoolKeyword_1());
		}
	)
;

// Entry rule entryRuleReal
entryRuleReal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRealRule()); }
	iv_ruleReal=ruleReal
	{ $current=$iv_ruleReal.current; }
	EOF;

// Rule Real
ruleReal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRealAccess().getRealAction_0(),
					$current);
			}
		)
		otherlv_1=Real
		{
			newLeafNode(otherlv_1, grammarAccess.getRealAccess().getRealKeyword_1());
		}
	)
;

// Entry rule entryRuleUnlimitedNatural
entryRuleUnlimitedNatural returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnlimitedNaturalRule()); }
	iv_ruleUnlimitedNatural=ruleUnlimitedNatural
	{ $current=$iv_ruleUnlimitedNatural.current; }
	EOF;

// Rule UnlimitedNatural
ruleUnlimitedNatural returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getUnlimitedNaturalAccess().getUnlimitedNaturalAction_0(),
					$current);
			}
		)
		otherlv_1=UnlimitedNatural
		{
			newLeafNode(otherlv_1, grammarAccess.getUnlimitedNaturalAccess().getUnlimitedNaturalKeyword_1());
		}
	)
;

// Entry rule entryRuleEnumeration
entryRuleEnumeration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerationRule()); }
	iv_ruleEnumeration=ruleEnumeration
	{ $current=$iv_ruleEnumeration.current; }
	EOF;

// Rule Enumeration
ruleEnumeration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Enumeration
		{
			newLeafNode(otherlv_0, grammarAccess.getEnumerationAccess().getEnumerationKeyword_0());
		}
		otherlv_1=LeftCurlyBracket
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2=Value
		{
			newLeafNode(otherlv_2, grammarAccess.getEnumerationAccess().getValueKeyword_2());
		}
		otherlv_3=LeftCurlyBracket
		{
			newLeafNode(otherlv_3, grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumerationAccess().getValueString0ParserRuleCall_4_0());
				}
				lv_value_4_0=ruleString0
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumerationRule());
					}
					add(
						$current,
						"value",
						lv_value_4_0,
						"org.smalluml.SmallUml.String0");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=Comma
			{
				newLeafNode(otherlv_5, grammarAccess.getEnumerationAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEnumerationAccess().getValueString0ParserRuleCall_5_1_0());
					}
					lv_value_6_0=ruleString0
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnumerationRule());
						}
						add(
							$current,
							"value",
							lv_value_6_0,
							"org.smalluml.SmallUml.String0");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_7=RightCurlyBracket
		{
			newLeafNode(otherlv_7, grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_6());
		}
		otherlv_8=RightCurlyBracket
		{
			newLeafNode(otherlv_8, grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw=HyphenMinus
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;
