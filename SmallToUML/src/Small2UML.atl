-- @path SUML=/SmallUML/model/smalluml.ecore
-- @path UML=/UML/model/uml.ecore

module Small2UML;
create OUT : UML from IN : SUML;


rule boolean {
	from
		x : SUML!Bool
	to 
		y : UML!PrimitiveType (
			name <- 'boolean'	
		)
}

rule string {
	from
		x : SUML!"smalluml::String"
	to 
		y : UML!PrimitiveType (
			name <- 'string'	
		)
}

rule integer {
	from
		x : SUML!"smalluml::Integer"
	to 
		y : UML!PrimitiveType (
			name <- 'integer'	
		)
}

rule real {
	from
		x : SUML!"smalluml::Real"
	to 
		y : UML!PrimitiveType (
			name <- 'real'	
		)
}

rule unlimitedNatural {
	from
		x : SUML!UnlimitedNatural
	to 
		y : UML!PrimitiveType (
			name <- 'unlimitedNatural'	
		)
}

rule parameter {
	from
		x : SUML!Parameter
	to 
		y : UML!Parameter (
			name <- x.name,
			type <- x.type
		)
}

rule method {
	from
		x : SUML!Method
	to 
		y : UML!Operation (			
			type <- x.returnType,			
			name <- x.name,
			ownedParameter <- x.parameter
		)
}
rule attribute {
	from
		x : SUML!Attribute
	to 
		y : UML!Property (
			name <- x.name,
			type <- x.type			
		)
}

rule class {
	from
		x : SUML!Class
	to 
		y : UML!Class (
			name <- x.name,
			ownedAttribute <- x.attribute -> collect(iterator | iterator),
			ownedOperation <- x.method,
			superClass <- x.super
			-- role ?
		)
}

rule composition {
	from
		input_name : SUML!Composition
	to 
		output_name : UML!Association (
			name <- input_name.name,
			memberEnd <- Set{input_name.target},
			navigableOwnedEnd <- Set{input_name.source}
		)
}

rule reference {
	from
		input_name : SUML!Reference
	to 
		output_name : UML!Dependency (
			name <- input_name.name,
			client <- input_name.source,
			supplier <- input_name.target
		)
}

rule role {
	from
		input_name : SUML!Role
	to 
		output_name : UML!Property (
			name <- input_name.name,			
			upper <- input_name.upperBound,
			lower <- input_name.lowerBound
		)
}

lazy rule realString{
	from x : String
	to y : UML!Property(
		name <- x
		)
}

rule enumeration {
	from
		x : SUML!Enumeration
	to 
		y : UML!Enumeration (
			name <- x.name,
			 ownedAttribute <-    x.values->collect(e | thisModule.realString(e))
		)
}


rule package {
	from
		input_name : SUML!Package
	to 
		output_name : UML!Package (			
			name <- input_name.name,
			packagedElement <- input_name.member -> select(iterator | iterator.oclIsKindOf(SUML!Class))
		)
}
